{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.storeAsStream = void 0;\n\nconst stream_1 = require(\"stream\");\n\nclass ObservableStoreStream extends stream_1.Duplex {\n  constructor(obsStore) {\n    super({\n      // pass values, not serializations\n      objectMode: true\n    }); // dont buffer outgoing updates\n\n    this.resume(); // save handler so we can unsubscribe later\n\n    this.handler = state => this.push(state); // subscribe to obsStore changes\n\n\n    this.obsStore = obsStore;\n    this.obsStore.subscribe(this.handler);\n  } // emit current state on new destination\n\n\n  pipe(dest, options) {\n    const result = super.pipe(dest, options);\n    dest.write(this.obsStore.getState());\n    return result;\n  } // write from incoming stream to state\n\n\n  _write(chunk, _encoding, callback) {\n    this.obsStore.putState(chunk);\n    callback();\n  } // noop - outgoing stream is asking us if we have data we arent giving it\n\n\n  _read(_size) {\n    return undefined;\n  } // unsubscribe from event emitter\n\n\n  _destroy(err, callback) {\n    this.obsStore.unsubscribe(this.handler);\n\n    super._destroy(err, callback);\n  }\n\n}\n\nfunction storeAsStream(obsStore) {\n  return new ObservableStoreStream(obsStore);\n}\n\nexports.storeAsStream = storeAsStream;","map":{"version":3,"sources":["../src/asStream.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAIA,MAAM,qBAAN,SAAuC,QAAA,CAAA,MAAvC,CAAmD;AAKjD,EAAA,WAAA,CAAY,QAAZ,EAAwC;AACtC,UAAM;AACJ;AACA,MAAA,UAAU,EAAE;AAFR,KAAN,EADsC,CAKtC;;AACA,SAAK,MAAL,GANsC,CAOtC;;AACA,SAAK,OAAL,GAAgB,KAAD,IAAc,KAAK,IAAL,CAAU,KAAV,CAA7B,CARsC,CAStC;;;AACA,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,QAAL,CAAc,SAAd,CAAwB,KAAK,OAA7B;AACD,GAjBgD,CAmBjD;;;AACA,EAAA,IAAI,CACF,IADE,EAEF,OAFE,EAEyB;AAE3B,UAAM,MAAM,GAAG,MAAM,IAAN,CAAW,IAAX,EAAiB,OAAjB,CAAf;AACA,IAAA,IAAI,CAAC,KAAL,CAAW,KAAK,QAAL,CAAc,QAAd,EAAX;AACA,WAAO,MAAP;AACD,GA3BgD,CA6BjD;;;AACA,EAAA,MAAM,CACJ,KADI,EAEJ,SAFI,EAGJ,QAHI,EAGoC;AAExC,SAAK,QAAL,CAAc,QAAd,CAAuB,KAAvB;AACA,IAAA,QAAQ;AACT,GArCgD,CAuCjD;;;AACA,EAAA,KAAK,CAAC,KAAD,EAAc;AACjB,WAAO,SAAP;AACD,GA1CgD,CA4CjD;;;AACA,EAAA,QAAQ,CAAC,GAAD,EAAoB,QAApB,EAA2D;AACjE,SAAK,QAAL,CAAc,WAAd,CAA0B,KAAK,OAA/B;;AACA,UAAM,QAAN,CAAe,GAAf,EAAoB,QAApB;AACD;;AAhDgD;;AAmDnD,SAAgB,aAAhB,CACE,QADF,EAC8B;AAE5B,SAAO,IAAI,qBAAJ,CAA0B,QAA1B,CAAP;AACD;;AAJD,OAAA,CAAA,aAAA,GAAA,aAAA","sourcesContent":["import { Duplex as DuplexStream } from 'stream';\n\nimport { ObservableStore } from './ObservableStore';\n\nclass ObservableStoreStream<T> extends DuplexStream {\n  handler: (state: T) => void;\n\n  obsStore: ObservableStore<T>;\n\n  constructor(obsStore: ObservableStore<T>) {\n    super({\n      // pass values, not serializations\n      objectMode: true,\n    });\n    // dont buffer outgoing updates\n    this.resume();\n    // save handler so we can unsubscribe later\n    this.handler = (state: T) => this.push(state);\n    // subscribe to obsStore changes\n    this.obsStore = obsStore;\n    this.obsStore.subscribe(this.handler);\n  }\n\n  // emit current state on new destination\n  pipe<U extends NodeJS.WritableStream>(\n    dest: U,\n    options?: { end?: boolean },\n  ): U {\n    const result = super.pipe(dest, options);\n    dest.write(this.obsStore.getState() as any);\n    return result;\n  }\n\n  // write from incoming stream to state\n  _write(\n    chunk: any,\n    _encoding: string,\n    callback: (error?: Error | null) => void,\n  ): void {\n    this.obsStore.putState(chunk);\n    callback();\n  }\n\n  // noop - outgoing stream is asking us if we have data we arent giving it\n  _read(_size: number): void {\n    return undefined;\n  }\n\n  // unsubscribe from event emitter\n  _destroy(err: Error | null, callback: (error: Error | null) => void): void {\n    this.obsStore.unsubscribe(this.handler);\n    super._destroy(err, callback);\n  }\n}\n\nexport function storeAsStream<T>(\n  obsStore: ObservableStore<T>,\n): ObservableStoreStream<T> {\n  return new ObservableStoreStream(obsStore);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}