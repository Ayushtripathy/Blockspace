{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Transaction } from '@solana/web3.js';\nimport { createLoggerMiddleware, COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from '@toruslabs/base-controllers';\nimport { setAPIKey } from '@toruslabs/http-helpers';\nimport { SafeEventEmitter, ObjectMultiplex, createStreamMiddleware, JRPCEngine, createIdRemapMiddleware, getRpcPromiseCallback, BasePostMessageStream } from '@toruslabs/openlogin-jrpc';\nimport { ethErrors, EthereumRpcError } from 'eth-rpc-errors';\nimport { isDuplexStream } from 'is-stream';\nimport pump from 'pump';\nimport loglevel from 'loglevel';\nimport dequal from 'fast-deep-equal';\nvar messages = {\n  errors: {\n    disconnected: () => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: () => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: method => \"Torus: The Torus Ethereum provider does not support synchronous methods like \".concat(method, \" without a callback parameter.\"),\n    invalidDuplexStream: () => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: maxEventListeners => \"Invalid options. Received: { maxEventListeners: \".concat(maxEventListeners, \"}\"),\n    invalidRequestArgs: () => \"Expected a single, non-array, object argument.\",\n    invalidRequestMethod: () => \"'args.method' must be a non-empty string.\",\n    invalidRequestParams: () => \"'args.params' must be an object or array if provided.\",\n    invalidLoggerObject: () => \"'args.logger' must be an object if provided.\",\n    invalidLoggerMethod: method => \"'args.logger' must include required method '\".concat(method, \"'.\")\n  },\n  info: {\n    connected: chainId => \"Torus: Connected to chain with ID \\\"\".concat(chainId, \"\\\".\")\n  },\n  warnings: {}\n};\nconst PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\nconst TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\"\n};\nconst BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\"\n};\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\"\n    }\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\"\n    }\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\"\n    }\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\"\n    }\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\"\n    }\n  }\n};\nvar configuration = {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKey: \"torus-\".concat(window.location.hostname)\n};\nvar log = loglevel.getLogger(\"solana-embed\");\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\n\nfunction createErrorMiddleware() {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: \"The request 'method' must be a non-empty string.\",\n        data: req\n      });\n    }\n\n    next(done => {\n      const {\n        error\n      } = res;\n\n      if (!error) {\n        return done();\n      }\n\n      log.error(\"Torus - RPC Error: \".concat(error.message), error);\n      return done();\n    });\n  };\n}\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\n\n\nfunction logStreamDisconnectWarning(remoteLabel, error, emitter) {\n  let warningMsg = \"Torus: Lost connection to \\\"\".concat(remoteLabel, \"\\\".\");\n\n  if (error !== null && error !== void 0 && error.stack) {\n    warningMsg += \"\\n\".concat(error.stack);\n  }\n\n  log.warn(warningMsg);\n\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\n\nconst getWindowId = () => Math.random().toString(36).slice(2);\n\nconst getTorusUrl = async buildEnv => {\n  let torusUrl;\n  let logLevel; // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n\n    default:\n      torusUrl = \"https://solana.tor.us\";\n      logLevel = \"error\";\n      break;\n  }\n\n  return {\n    torusUrl,\n    logLevel\n  };\n};\n\nconst getUserLanguage = () => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\n\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n  height: 660,\n  width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n  height: 740,\n  width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n  height: 700,\n  width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n  height: 600,\n  width: 400\n};\n\nfunction storageAvailable(type) {\n  let storage;\n\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e && ( // everything except Firefox\n    e.code === 22 || // Firefox\n    e.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === \"QuotaExceededError\" || // Firefox\n    e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\n/**\n * popup handler utils\n */\n\n\nfunction getPopupFeatures(_ref) {\n  let {\n    width: w,\n    height: h\n  } = _ref; // Fixes dual-screen position                             Most browsers      Firefox\n\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = \"titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=\".concat(h / systemZoom, \",width=\").concat(w / systemZoom, \",top=\").concat(top, \",left=\").concat(left);\n  return features;\n}\n\nconst getNetworkConfig = label => {\n  switch (label) {\n    case \"mainnet-beta\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x1\",\n        displayName: \"Solana Mainnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.mainnet-beta.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\"\n      };\n\n    case \"testnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x2\",\n        displayName: \"Solana Testnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.testnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\"\n      };\n\n    case \"devnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x3\",\n        displayName: \"Solana Devnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.devnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\"\n      };\n\n    default:\n      return undefined;\n  }\n};\n\nclass BaseProvider extends SafeEventEmitter {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"isTorus\", void 0);\n\n    _defineProperty(this, \"_rpcEngine\", void 0);\n\n    _defineProperty(this, \"jsonRpcConnectionEvents\", void 0);\n\n    _defineProperty(this, \"_state\", void 0);\n\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this); // this.enable = this.enable.bind(this);\n    // setup connectionStream multiplexing\n\n    const mux = new ObjectMultiplex();\n    pump(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, \"Torus\")); // ignore phishing warning message (handled elsewhere)\n\n    mux.ignoreStream(\"phishing\"); // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")); // handle RPC requests via dapp-side rpc engine\n\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({\n      origin: location.origin\n    }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n\n\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args\n      });\n    }\n\n    const {\n      method,\n      params\n    } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({\n        method,\n        params\n      }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n\n\n  send(payload, callback) {\n    this._rpcRequest(payload, callback);\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n\n\n  sendAsync(payload) {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleStreamDisconnect(streamName, error) {\n    logStreamDisconnectWarning(streamName, error, this);\n\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n}\n\nconst handleEvent = function (handle, eventName, handler) {\n  for (var _len = arguments.length, handlerArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    handlerArgs[_key - 3] = arguments[_key];\n  }\n\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n\n  handle.addEventListener(eventName, handlerWrapper);\n};\n\nasync function documentReady() {\n  return new Promise(resolve => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\n\nconst htmlToElement = html => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild;\n};\n\nclass PopupHandler extends SafeEventEmitter {\n  constructor(_ref) {\n    let {\n      url,\n      target,\n      features\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"target\", void 0);\n\n    _defineProperty(this, \"features\", void 0);\n\n    _defineProperty(this, \"window\", void 0);\n\n    _defineProperty(this, \"windowTimer\", void 0);\n\n    _defineProperty(this, \"iClosedWindow\", void 0);\n\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n\n    this._setupTimer();\n  }\n\n  _setupTimer() {\n    this.windowTimer = Number(setInterval(() => {\n      if (this.window && this.window.closed) {\n        clearInterval(this.windowTimer);\n\n        if (!this.iClosedWindow) {\n          this.emit(\"close\");\n        }\n\n        this.iClosedWindow = false;\n        this.window = undefined;\n      }\n\n      if (this.window === undefined) clearInterval(this.windowTimer);\n    }, 500));\n  }\n\n  open() {\n    var _this$window;\n\n    this.window = window.open(this.url.href, this.target, this.features);\n    if ((_this$window = this.window) !== null && _this$window !== void 0 && _this$window.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close() {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect) {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n\n}\n\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass TorusCommunicationProvider extends BaseProvider {\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(this, \"embedTranslations\", void 0);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"windowRefs\", void 0);\n\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    this._state = _objectSpread$2({}, TorusCommunicationProvider._defaultState); // public state\n\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {}; // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const notificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const {\n          isFullScreen,\n          rid\n        } = params;\n\n        this._displayIframe({\n          isFull: isFullScreen,\n          rid: rid\n        });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const {\n          windowId,\n          url\n        } = params;\n\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const {\n          currentLoginProvider\n        } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n\n        this._displayIframe();\n      }\n    };\n\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n\n  get isLoggedIn() {\n    return this._state.isLoggedIn;\n  }\n\n  get isIFrameFullScreen() {\n    return this._state.isIFrameFullScreen;\n  }\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n\n\n  isConnected() {\n    return this._state.isConnected;\n  }\n\n  async _initializeState(params) {\n    try {\n      const {\n        torusUrl,\n        dappStorageKey,\n        torusAlertContainer,\n        torusIframe\n      } = params;\n      this.torusUrl = torusUrl;\n      this.dappStorageKey = dappStorageKey;\n      this.torusAlertContainer = torusAlertContainer;\n      this.torusIframe = torusIframe;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const {\n        currentLoginProvider,\n        isLoggedIn\n      } = await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  _handleWindow(windowId) {\n    let {\n      url,\n      target,\n      features\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const finalUrl = new URL(url || \"\".concat(this.torusUrl, \"/redirect?windowId=\").concat(windowId));\n\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += \"&dappStorageKey=\".concat(this.dappStorageKey);else finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n    }\n\n    const handledWindow = new PopupHandler({\n      url: finalUrl,\n      target,\n      features\n    });\n    handledWindow.open();\n\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n\n      return;\n    } // Add to collection only if window is opened\n\n\n    this.windowRefs[windowId] = handledWindow; // We tell the iframe that the window has been successfully opened\n\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: {\n        windowId\n      }\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: {\n          windowId\n        }\n      });\n    });\n  }\n\n  _displayIframe() {\n    let {\n      isFull = false,\n      rid = \"\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const style = {}; // set phase\n\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: {\n        isIFrameFullScreen: isFull,\n        rid\n      }\n    });\n  }\n\n  hideTorusButton() {\n    this._state.torusWidgetVisibility = false;\n\n    this._displayIframe();\n  }\n\n  showTorusButton() {\n    this._state.torusWidgetVisibility = true;\n\n    this._displayIframe();\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n\n  _rpcRequest(payload, callback) {\n    const cb = callback;\n    const _payload = payload;\n\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n\n\n  _handleConnect(currentLoginProvider, isLoggedIn) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        currentLoginProvider,\n        isLoggedIn\n      });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013, // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011, // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  } // Called if the iframe wants to close the window cause it is done processing the request\n\n\n  _handleCloseWindow(params) {\n    const {\n      windowId\n    } = params;\n\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n\n  async _createPopupBlockAlert(windowId, url) {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + \"<div id=\\\"torusAlert__logo\\\"><img src=\\\"\".concat(logoUrl, \"\\\" /></div>\") + \"<div>\" + \"<h1 id=\\\"torusAlert__title\\\">\".concat(this.embedTranslations.actionRequired, \"</h1>\") + \"<p id=\\\"torusAlert__desc\\\">\".concat(this.embedTranslations.pendingAction, \"</p>\") + \"</div>\" + \"</div>\");\n    const successAlert = htmlToElement(\"<div><a id=\\\"torusAlert__btn\\\">\".concat(this.embedTranslations.continue, \"</a></div>\"));\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        });\n\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    await documentReady();\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n\n  getLogoUrl() {\n    const logoUrl = \"\".concat(this.torusUrl, \"/images/torus_icon-blue.svg\");\n    return logoUrl;\n  }\n\n}\n\n_defineProperty(TorusCommunicationProvider, \"_defaultState\", {\n  buttonPosition: \"bottom-left\",\n  currentLoginProvider: null,\n  isIFrameFullScreen: false,\n  hasEmittedConnection: false,\n  torusWidgetVisibility: false,\n  initialized: false,\n  isLoggedIn: false,\n  isPermanentlyDisconnected: false,\n  isConnected: false\n});\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass TorusInPageProvider extends BaseProvider {\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(this, \"chainId\", void 0);\n\n    _defineProperty(this, \"selectedAddress\", void 0);\n\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n\n    this._state = _objectSpread$1({}, TorusInPageProvider._defaultState); // public state\n\n    this.selectedAddress = null;\n    this.chainId = null;\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this); // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const jsonRpcNotificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params);\n      }\n    }; // json rpc notification listener\n\n\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n\n\n  isConnected() {\n    return this._state.isConnected;\n  } // Private Methods\n  //= ===================\n\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n\n\n  async _initializeState() {\n    try {\n      const {\n        accounts,\n        chainId,\n        isUnlocked\n      } = await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this.emit(\"connect\", {\n        chainId\n      });\n\n      this._handleChainChanged({\n        chainId\n      });\n\n      this._handleUnlockStateChanged({\n        accounts,\n        isUnlocked\n      });\n\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n\n  _rpcRequest(payload, callback) {\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let cb = callback;\n    const _payload = payload;\n\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err, res) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload, cb);\n\n        return;\n      }\n    }\n\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n\n\n  _handleConnect(chainId) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        chainId\n      });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013, // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011, // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n  /**\n   * Called when accounts may have changed.\n   */\n\n\n  _handleAccountsChanged(accounts) {\n    let isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false; // defensive programming\n\n    let finalAccounts = accounts;\n\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    } // emit accountsChanged if anything about the accounts array has changed\n\n\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts;\n      this.emit(\"accountsChanged\", finalAccounts);\n    } // handle selectedAddress\n\n\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = finalAccounts[0] || null;\n    }\n  }\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n\n\n  _handleChainChanged() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", {\n        chainId\n      });\n      return;\n    }\n\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n\n\n  _handleUnlockStateChanged() {\n    let {\n      accounts,\n      isUnlocked\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", {\n        isUnlocked\n      });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n\n}\n\n_defineProperty(TorusInPageProvider, \"_defaultState\", {\n  accounts: null,\n  isConnected: false,\n  isUnlocked: false,\n  initialized: false,\n  isPermanentlyDisconnected: false,\n  hasEmittedConnection: false\n});\n/**\n * Returns whether the given image URL exists\n */\n\n\nfunction imgExists(url) {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n\n      img.onload = () => resolve(true);\n\n      img.onerror = () => resolve(false);\n\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n/**\n * Extracts a name for the site from the DOM\n */\n\n\nconst getSiteName = window => {\n  const {\n    document\n  } = window;\n  const siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector('head > meta[name=\"title\"]');\n\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n/**\n * Extracts an icon for the site from the DOM\n */\n\n\nasync function getSiteIcon(window) {\n  try {\n    const {\n      document\n    } = window; // Use the site's favicon if it exists\n\n    let icon = document.querySelector('head > link[rel=\"shortcut icon\"]');\n\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    } // Search through available icons in no particular order\n\n\n    icon = Array.from(document.querySelectorAll('head > link[rel=\"icon\"]')).find(_icon => Boolean(_icon.href));\n\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n/**\n * Gets site metadata and returns it\n *\n */\n\n\nconst getSiteMetadata = async () => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window)\n});\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\"); // preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const {\n      torusUrl\n    } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = \"\".concat(torusUrl, \"/frame\");\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  constructor() {\n    let {\n      modalZIndex = 99999\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _defineProperty(this, \"isInitialized\", void 0);\n\n    _defineProperty(this, \"torusAlert\", void 0);\n\n    _defineProperty(this, \"modalZIndex\", void 0);\n\n    _defineProperty(this, \"alertZIndex\", void 0);\n\n    _defineProperty(this, \"requestedLoginProvider\", void 0);\n\n    _defineProperty(this, \"provider\", void 0);\n\n    _defineProperty(this, \"communicationProvider\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    _defineProperty(this, \"styleLink\", void 0);\n\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  get isLoggedIn() {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n\n  async init() {\n    let {\n      buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n      enableLogging = false,\n      network,\n      showTorusButton = false,\n      useLocalStorage = false,\n      buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n      apiKey = \"torus-default\",\n      extraParams = {}\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const {\n      torusUrl,\n      logLevel\n    } = await getTorusUrl(buildEnv);\n    log.info(torusUrl, \"url loaded\");\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();else log.disableAll();\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";else torusIframeUrl.pathname += \"/frame\";\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n    torusIframeUrl.hash = hashParams.toString(); // Iframe code\n\n    this.torusIframe = htmlToElement(\"<iframe\\n        id=\\\"torusIframe\\\"\\n        class=\\\"torusIframe\\\"\\n        src=\\\"\".concat(torusIframeUrl.href, \"\\\"\\n        style=\\\"display: none; position: fixed; top: 0; right: 0; width: 100%;\\n        height: 100%; border: none; border-radius: 0; z-index: \").concat(this.modalZIndex.toString(), \"\\\"\\n      ></iframe>\"));\n    this.torusAlertContainer = htmlToElement(\"<div id=\\\"torusAlertContainer\\\" style=\\\"display:none; z-index: \".concat(this.alertZIndex.toString(), \"\\\"></div>\"));\n    this.styleLink = htmlToElement(\"<link href=\\\"\".concat(torusUrl, \"/css/widget.css\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\">\"));\n\n    const handleSetup = async () => {\n      return new Promise((resolve, reject) => {\n        try {\n          window.document.head.appendChild(this.styleLink);\n          window.document.body.appendChild(this.torusIframe);\n          window.document.body.appendChild(this.torusAlertContainer);\n          this.torusIframe.addEventListener(\"load\", async () => {\n            const dappMetadata = await getSiteMetadata(); // send init params here\n\n            this.torusIframe.contentWindow.postMessage({\n              buttonPosition,\n              apiKey,\n              network: typeof network === \"string\" ? getNetworkConfig(network) : network,\n              dappMetadata,\n              extraParams\n            }, torusIframeUrl.origin);\n            await this._setupWeb3({\n              torusUrl\n            });\n            if (showTorusButton) this.showTorusButton();else this.hideTorusButton();\n            this.isInitialized = true;\n            window.torus = this;\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    };\n\n    await documentReady();\n    await handleSetup();\n  }\n\n  async login() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({\n          isFull: true\n        });\n      } // If user is already logged in, we assume they have given access to the website\n\n\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest({\n          method: \"solana_requestAccounts\",\n          params: [this.requestedLoginProvider, params.login_hint]\n        }, getRpcPromiseCallback(resolve, reject));\n      });\n\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      } // This would never happen, but just in case\n\n\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n\n  async logout() {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: []\n    });\n    this.requestedLoginProvider = null;\n  }\n\n  async cleanUp() {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n\n    this.clearInit();\n  }\n\n  clearInit() {\n    function isElement(element) {\n      return element instanceof Element || element instanceof Document;\n    }\n\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n\n    this.isInitialized = false;\n  }\n\n  hideTorusButton() {\n    this.communicationProvider.hideTorusButton();\n  }\n\n  showTorusButton() {\n    this.communicationProvider.showTorusButton();\n  }\n\n  async setProvider(params) {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: _objectSpread({}, params)\n    });\n  }\n\n  async showWallet(path) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const instanceId = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: []\n    });\n    const finalPath = path ? \"/\".concat(path) : \"\";\n    const finalUrl = new URL(\"\".concat(this.torusUrl, \"/wallet\").concat(finalPath)); // Using URL constructor to prevent js injection and allow parameter validation.!\n\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach(x => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n\n    if (this.dappStorageKey) {\n      finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n    } // No need to track this window state. Hence, no _handleWindow call.\n\n\n    const walletWindow = new PopupHandler({\n      url: finalUrl,\n      features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW)\n    });\n    walletWindow.open();\n  }\n\n  async getUserInfo() {\n    const userInfoResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: []\n    });\n    return userInfoResponse;\n  }\n\n  async initiateTopup(provider, params) {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n\n    this.communicationProvider._handleWindow(windowId);\n\n    const topupResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: {\n        provider,\n        params,\n        windowId\n      }\n    });\n    return topupResponse;\n  } // Solana specific API\n\n\n  async sendTransaction(transaction) {\n    const response = await this.provider.request({\n      method: \"send_transaction\",\n      // params: { message: transaction.serializeMessage().toString(\"hex\") },\n      params: {\n        message: transaction.serialize({\n          requireAllSignatures: false\n        }).toString(\"hex\")\n      }\n    });\n    return response;\n  }\n\n  async signTransaction(transaction) {\n    const response = await this.provider.request({\n      method: \"sign_transaction\",\n      // params: { message: transaction.serializeMessage().toString(\"hex\") },\n      params: {\n        message: transaction.serialize({\n          requireAllSignatures: false\n        }).toString(\"hex\")\n      }\n    });\n    const buf = Buffer.from(response, \"hex\");\n    const sendTx = Transaction.from(buf);\n    return sendTx;\n  }\n\n  async signAllTransactions(transactions) {\n    const encodedTransactions = transactions.map(x => x.serialize({\n      requireAllSignatures: false\n    }).toString(\"hex\"));\n    const response = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: {\n        message: encodedTransactions\n      }\n    });\n    const allSignedTransaction = response.map(msg => Transaction.from(Buffer.from(msg, \"hex\")));\n    return allSignedTransaction;\n  }\n\n  async signMessage(data) {\n    const response = await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data\n      }\n    });\n    return response;\n  }\n\n  async getGaslessPublicKey() {\n    const response = await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: []\n    });\n    return response;\n  } // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n\n  handleDappStorageKey(useLocalStorage) {\n    let dappStorageKey = \"\";\n\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(configuration.localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;else {\n        const generatedKey = \"torus-app-\".concat(getWindowId());\n        window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n\n  async _setupWeb3(providerParams) {\n    log.info(\"setupWeb3 running\"); // setup background connection\n\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow\n    }); // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow\n    }); // compose the inPage provider\n\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n    inPageProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        }); // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n\n\n        _payload.windowId = windowId;\n      }\n\n      inPageProvider._rpcEngine.handle(_payload, cb);\n    };\n\n    communicationProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW) // todo: are these features generic for all\n\n        }); // for communication methods sending window id in jrpc req params\n\n\n        _payload.params.windowId = windowId;\n      }\n\n      communicationProvider._rpcEngine.handle(_payload, cb);\n    }; // detect solana_requestAccounts and pipe to enable for now\n\n\n    const detectAccountRequestPrototypeModifier = m => {\n      const originalMethod = inPageProvider[m]; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n      const self = this;\n\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const {\n          method,\n          params = []\n        } = request;\n\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({\n            loginProvider: params[0]\n          });\n          self.login({\n            loginProvider: params[0]\n          }) // eslint-disable-next-line promise/no-callback-in-promise\n          .then(res => cb(null, res)) // eslint-disable-next-line promise/no-callback-in-promise\n          .catch(err => cb(err));\n        }\n\n        return originalMethod.apply(this, [request, cb]);\n      };\n    }; // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n\n\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n    await Promise.all([inPageProvider._initializeState(), communicationProvider._initializeState(_objectSpread(_objectSpread({}, providerParams), {}, {\n      dappStorageKey: this.dappStorageKey,\n      torusAlertContainer: this.torusAlertContainer,\n      torusIframe: this.torusIframe\n    }))]);\n    log.debug(\"Torus - injected provider\");\n  }\n\n}\n\nexport { BUTTON_POSITION, LOGIN_PROVIDER, PAYMENT_PROVIDER, TORUS_BUILD_ENV, TorusInPageProvider, Torus as default };","map":{"version":3,"sources":["../src/messages.ts","../src/interfaces.ts","../src/config.ts","../src/loglevel.ts","../src/utils.ts","../src/baseProvider.ts","../src/embedUtils.ts","../src/PopupHandler.ts","../src/communicationProvider.ts","../src/inPageProvider.ts","../src/siteMetadata.ts","../src/embed.ts"],"names":["errors","disconnected","permanentlyDisconnected","unsupportedSync","method","invalidDuplexStream","invalidOptions","maxEventListeners","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","info","connected","chainId","warnings","PAYMENT_PROVIDER","MOONPAY","WYRE","RAMPNETWORK","XANPOOL","MERCURYO","TRANSAK","TORUS_BUILD_ENV","PRODUCTION","DEVELOPMENT","TESTING","BUTTON_POSITION","BOTTOM_LEFT","TOP_LEFT","BOTTOM_RIGHT","TOP_RIGHT","LOGIN_PROVIDER","GOOGLE","FACEBOOK","REDDIT","DISCORD","TWITCH","APPLE","LINE","GITHUB","KAKAO","LINKEDIN","TWITTER","WEIBO","WECHAT","EMAIL_PASSWORDLESS","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","supportedVerifierList","api","prodTorusUrl","localStorageKey","window","loglevel","createErrorMiddleware","req","res","message","data","next","done","error","log","logStreamDisconnectWarning","remoteLabel","emitter","warningMsg","getWindowId","Math","getTorusUrl","torusUrl","logLevel","getUserLanguage","userLanguage","userLanguages","Object","config","FEATURES_PROVIDER_CHANGE_WINDOW","height","width","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","storageAvailable","type","storage","x","e","getPopupFeatures","h","dualScreenLeft","dualScreenTop","document","systemZoom","left","top","features","w","getNetworkConfig","label","blockExplorerUrl","displayName","logo","rpcTarget","ticker","tickerName","constructor","connectionStream","jsonRpcStreamName","isDuplexStream","messages","mux","pump","jsonRpcConnection","createStreamMiddleware","rpcEngine","createIdRemapMiddleware","createLoggerMiddleware","origin","location","request","Array","args","params","getRpcPromiseCallback","send","sendAsync","_handleStreamDisconnect","handleEvent","handlerArgs","handlerWrapper","handler","handle","resolve","htmlToElement","html","template","trimmedHtml","target","_setupTimer","Number","setInterval","clearInterval","open","Promise","close","redirect","TorusCommunicationProvider","buttonPosition","currentLoginProvider","isIFrameFullScreen","hasEmittedConnection","torusWidgetVisibility","initialized","isLoggedIn","isPermanentlyDisconnected","isConnected","languageTranslations","configuration","notificationHandler","payload","COMMUNICATION_NOTIFICATIONS","rid","isFull","url","_initializeState","torusIframe","COMMUNICATION_JRPC_METHODS","_handleWindow","finalUrl","handledWindow","windowId","_displayIframe","style","hideTorusButton","showTorusButton","_rpcRequest","cb","_payload","_handleConnect","_handleDisconnect","errorMessage","_handleCloseWindow","_createPopupBlockAlert","logoUrl","torusAlert","successAlert","btnContainer","bindOnLoad","attachOnLoad","documentReady","getLogoUrl","TorusInPageProvider","accounts","isUnlocked","jsonRpcNotificationHandler","PROVIDER_NOTIFICATIONS","PROVIDER_JRPC_METHODS","isInternal","callback","_handleAccountsChanged","isEthAccounts","finalAccounts","dequal","_handleChainChanged","_handleUnlockStateChanged","img","reject","getSiteName","siteName","metaTitle","icon","imgExists","_icon","Boolean","getSiteMetadata","name","getSiteIcon","PROVIDER_UNSAFE_METHODS","COMMUNICATION_UNSAFE_METHODS","isLocalStorageAvailable","torusIframeHtml","modalZIndex","init","buildEnv","enableLogging","useLocalStorage","apiKey","extraParams","setAPIKey","dappStorageKey","torusIframeUrl","hashParams","handleSetup","dappMetadata","network","login","logout","cleanUp","clearInit","element","isElement","setProvider","showWallet","instanceId","finalPath","path","walletWindow","getUserInfo","userInfoResponse","initiateTopup","topupResponse","sendTransaction","response","requireAllSignatures","signTransaction","buf","Buffer","sendTx","Transaction","signAllTransactions","encodedTransactions","allSignedTransaction","msg","signMessage","getGaslessPublicKey","handleDappStorageKey","storedKey","generatedKey","_setupWeb3","providerStream","targetWindow","contentWindow","communicationStream","inPageProvider","communicationProvider","detectAccountRequestPrototypeModifier","m","originalMethod","self","loginProvider","err","proxiedInPageProvider","deleteProperty","proxiedCommunicationProvider","torusAlertContainer"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Transaction } from '@solana/web3.js';\nimport { createLoggerMiddleware, COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from '@toruslabs/base-controllers';\nimport { setAPIKey } from '@toruslabs/http-helpers';\nimport { SafeEventEmitter, ObjectMultiplex, createStreamMiddleware, JRPCEngine, createIdRemapMiddleware, getRpcPromiseCallback, BasePostMessageStream } from '@toruslabs/openlogin-jrpc';\nimport { ethErrors, EthereumRpcError } from 'eth-rpc-errors';\nimport { isDuplexStream } from 'is-stream';\nimport pump from 'pump';\nimport loglevel from 'loglevel';\nimport dequal from 'fast-deep-equal';\n\nvar messages = {\n  errors: {\n    disconnected: () => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: () => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: method => \"Torus: The Torus Ethereum provider does not support synchronous methods like \".concat(method, \" without a callback parameter.\"),\n    invalidDuplexStream: () => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: maxEventListeners => \"Invalid options. Received: { maxEventListeners: \".concat(maxEventListeners, \"}\"),\n    invalidRequestArgs: () => \"Expected a single, non-array, object argument.\",\n    invalidRequestMethod: () => \"'args.method' must be a non-empty string.\",\n    invalidRequestParams: () => \"'args.params' must be an object or array if provided.\",\n    invalidLoggerObject: () => \"'args.logger' must be an object if provided.\",\n    invalidLoggerMethod: method => \"'args.logger' must include required method '\".concat(method, \"'.\")\n  },\n  info: {\n    connected: chainId => \"Torus: Connected to chain with ID \\\"\".concat(chainId, \"\\\".\")\n  },\n  warnings: {}\n};\n\nconst PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\nconst TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\"\n};\nconst BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\"\n};\nconst LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\n\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\"\n    }\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\"\n    }\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\"\n    }\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\"\n    }\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\"\n    }\n  }\n};\nvar configuration = {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKey: \"torus-\".concat(window.location.hostname)\n};\n\nvar log = loglevel.getLogger(\"solana-embed\");\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\n\nfunction createErrorMiddleware() {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: \"The request 'method' must be a non-empty string.\",\n        data: req\n      });\n    }\n\n    next(done => {\n      const {\n        error\n      } = res;\n\n      if (!error) {\n        return done();\n      }\n\n      log.error(\"Torus - RPC Error: \".concat(error.message), error);\n      return done();\n    });\n  };\n}\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\n\nfunction logStreamDisconnectWarning(remoteLabel, error, emitter) {\n  let warningMsg = \"Torus: Lost connection to \\\"\".concat(remoteLabel, \"\\\".\");\n\n  if (error !== null && error !== void 0 && error.stack) {\n    warningMsg += \"\\n\".concat(error.stack);\n  }\n\n  log.warn(warningMsg);\n\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\nconst getWindowId = () => Math.random().toString(36).slice(2);\nconst getTorusUrl = async buildEnv => {\n  let torusUrl;\n  let logLevel; // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n\n    default:\n      torusUrl = \"https://solana.tor.us\";\n      logLevel = \"error\";\n      break;\n  }\n\n  return {\n    torusUrl,\n    logLevel\n  };\n};\nconst getUserLanguage = () => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n  height: 660,\n  width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n  height: 740,\n  width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n  height: 700,\n  width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n  height: 600,\n  width: 400\n};\nfunction storageAvailable(type) {\n  let storage;\n\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e && ( // everything except Firefox\n    e.code === 22 || // Firefox\n    e.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === \"QuotaExceededError\" || // Firefox\n    e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\n/**\n * popup handler utils\n */\n\nfunction getPopupFeatures(_ref) {\n  let {\n    width: w,\n    height: h\n  } = _ref;\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = \"titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=\".concat(h / systemZoom, \",width=\").concat(w / systemZoom, \",top=\").concat(top, \",left=\").concat(left);\n  return features;\n}\nconst getNetworkConfig = label => {\n  switch (label) {\n    case \"mainnet-beta\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x1\",\n        displayName: \"Solana Mainnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.mainnet-beta.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\"\n      };\n\n    case \"testnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x2\",\n        displayName: \"Solana Testnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.testnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\"\n      };\n\n    case \"devnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x3\",\n        displayName: \"Solana Devnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.devnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\"\n      };\n\n    default:\n      return undefined;\n  }\n};\n\nclass BaseProvider extends SafeEventEmitter {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"isTorus\", void 0);\n\n    _defineProperty(this, \"_rpcEngine\", void 0);\n\n    _defineProperty(this, \"jsonRpcConnectionEvents\", void 0);\n\n    _defineProperty(this, \"_state\", void 0);\n\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this); // this.enable = this.enable.bind(this);\n    // setup connectionStream multiplexing\n\n    const mux = new ObjectMultiplex();\n    pump(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, \"Torus\")); // ignore phishing warning message (handled elsewhere)\n\n    mux.ignoreStream(\"phishing\"); // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")); // handle RPC requests via dapp-side rpc engine\n\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({\n      origin: location.origin\n    }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n\n\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args\n      });\n    }\n\n    const {\n      method,\n      params\n    } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({\n        method,\n        params\n      }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n\n\n  send(payload, callback) {\n    this._rpcRequest(payload, callback);\n  }\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n\n\n  sendAsync(payload) {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleStreamDisconnect(streamName, error) {\n    logStreamDisconnectWarning(streamName, error, this);\n\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n}\n\nconst handleEvent = function (handle, eventName, handler) {\n  for (var _len = arguments.length, handlerArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    handlerArgs[_key - 3] = arguments[_key];\n  }\n\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n\n  handle.addEventListener(eventName, handlerWrapper);\n};\nasync function documentReady() {\n  return new Promise(resolve => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\nconst htmlToElement = html => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild;\n};\n\nclass PopupHandler extends SafeEventEmitter {\n  constructor(_ref) {\n    let {\n      url,\n      target,\n      features\n    } = _ref;\n    super();\n\n    _defineProperty(this, \"url\", void 0);\n\n    _defineProperty(this, \"target\", void 0);\n\n    _defineProperty(this, \"features\", void 0);\n\n    _defineProperty(this, \"window\", void 0);\n\n    _defineProperty(this, \"windowTimer\", void 0);\n\n    _defineProperty(this, \"iClosedWindow\", void 0);\n\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n\n    this._setupTimer();\n  }\n\n  _setupTimer() {\n    this.windowTimer = Number(setInterval(() => {\n      if (this.window && this.window.closed) {\n        clearInterval(this.windowTimer);\n\n        if (!this.iClosedWindow) {\n          this.emit(\"close\");\n        }\n\n        this.iClosedWindow = false;\n        this.window = undefined;\n      }\n\n      if (this.window === undefined) clearInterval(this.windowTimer);\n    }, 500));\n  }\n\n  open() {\n    var _this$window;\n\n    this.window = window.open(this.url.href, this.target, this.features);\n    if ((_this$window = this.window) !== null && _this$window !== void 0 && _this$window.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close() {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect) {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n\n}\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nclass TorusCommunicationProvider extends BaseProvider {\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(this, \"embedTranslations\", void 0);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"windowRefs\", void 0);\n\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    this._state = _objectSpread$2({}, TorusCommunicationProvider._defaultState); // public state\n\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {}; // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const notificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const {\n          isFullScreen,\n          rid\n        } = params;\n\n        this._displayIframe({\n          isFull: isFullScreen,\n          rid: rid\n        });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const {\n          windowId,\n          url\n        } = params;\n\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const {\n          currentLoginProvider\n        } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n\n        this._displayIframe();\n      }\n    };\n\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n\n  get isLoggedIn() {\n    return this._state.isLoggedIn;\n  }\n\n  get isIFrameFullScreen() {\n    return this._state.isIFrameFullScreen;\n  }\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n\n\n  isConnected() {\n    return this._state.isConnected;\n  }\n\n  async _initializeState(params) {\n    try {\n      const {\n        torusUrl,\n        dappStorageKey,\n        torusAlertContainer,\n        torusIframe\n      } = params;\n      this.torusUrl = torusUrl;\n      this.dappStorageKey = dappStorageKey;\n      this.torusAlertContainer = torusAlertContainer;\n      this.torusIframe = torusIframe;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const {\n        currentLoginProvider,\n        isLoggedIn\n      } = await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  _handleWindow(windowId) {\n    let {\n      url,\n      target,\n      features\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const finalUrl = new URL(url || \"\".concat(this.torusUrl, \"/redirect?windowId=\").concat(windowId));\n\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += \"&dappStorageKey=\".concat(this.dappStorageKey);else finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n    }\n\n    const handledWindow = new PopupHandler({\n      url: finalUrl,\n      target,\n      features\n    });\n    handledWindow.open();\n\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n\n      return;\n    } // Add to collection only if window is opened\n\n\n    this.windowRefs[windowId] = handledWindow; // We tell the iframe that the window has been successfully opened\n\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: {\n        windowId\n      }\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: {\n          windowId\n        }\n      });\n    });\n  }\n\n  _displayIframe() {\n    let {\n      isFull = false,\n      rid = \"\"\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const style = {}; // set phase\n\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: {\n        isIFrameFullScreen: isFull,\n        rid\n      }\n    });\n  }\n\n  hideTorusButton() {\n    this._state.torusWidgetVisibility = false;\n\n    this._displayIframe();\n  }\n\n  showTorusButton() {\n    this._state.torusWidgetVisibility = true;\n\n    this._displayIframe();\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n\n  _rpcRequest(payload, callback) {\n    const cb = callback;\n    const _payload = payload;\n\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n\n\n  _handleConnect(currentLoginProvider, isLoggedIn) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        currentLoginProvider,\n        isLoggedIn\n      });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013, // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011, // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  } // Called if the iframe wants to close the window cause it is done processing the request\n\n\n  _handleCloseWindow(params) {\n    const {\n      windowId\n    } = params;\n\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n\n  async _createPopupBlockAlert(windowId, url) {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + \"<div id=\\\"torusAlert__logo\\\"><img src=\\\"\".concat(logoUrl, \"\\\" /></div>\") + \"<div>\" + \"<h1 id=\\\"torusAlert__title\\\">\".concat(this.embedTranslations.actionRequired, \"</h1>\") + \"<p id=\\\"torusAlert__desc\\\">\".concat(this.embedTranslations.pendingAction, \"</p>\") + \"</div>\" + \"</div>\");\n    const successAlert = htmlToElement(\"<div><a id=\\\"torusAlert__btn\\\">\".concat(this.embedTranslations.continue, \"</a></div>\"));\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        });\n\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    await documentReady();\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n\n  getLogoUrl() {\n    const logoUrl = \"\".concat(this.torusUrl, \"/images/torus_icon-blue.svg\");\n    return logoUrl;\n  }\n\n}\n\n_defineProperty(TorusCommunicationProvider, \"_defaultState\", {\n  buttonPosition: \"bottom-left\",\n  currentLoginProvider: null,\n  isIFrameFullScreen: false,\n  hasEmittedConnection: false,\n  torusWidgetVisibility: false,\n  initialized: false,\n  isLoggedIn: false,\n  isPermanentlyDisconnected: false,\n  isConnected: false\n});\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nclass TorusInPageProvider extends BaseProvider {\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  constructor(connectionStream, _ref) {\n    let {\n      maxEventListeners = 100,\n      jsonRpcStreamName = \"provider\"\n    } = _ref;\n    super(connectionStream, {\n      maxEventListeners,\n      jsonRpcStreamName\n    }); // private state\n\n    _defineProperty(this, \"chainId\", void 0);\n\n    _defineProperty(this, \"selectedAddress\", void 0);\n\n    _defineProperty(this, \"tryWindowHandle\", void 0);\n\n    this._state = _objectSpread$1({}, TorusInPageProvider._defaultState); // public state\n\n    this.selectedAddress = null;\n    this.chainId = null;\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this); // setup own event listeners\n    // EIP-1193 connect\n\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const jsonRpcNotificationHandler = payload => {\n      const {\n        method,\n        params\n      } = payload;\n\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params);\n      }\n    }; // json rpc notification listener\n\n\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n\n\n  isConnected() {\n    return this._state.isConnected;\n  } // Private Methods\n  //= ===================\n\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n\n\n  async _initializeState() {\n    try {\n      const {\n        accounts,\n        chainId,\n        isUnlocked\n      } = await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: []\n      }); // indicate that we've connected, for EIP-1193 compliance\n\n      this.emit(\"connect\", {\n        chainId\n      });\n\n      this._handleChainChanged({\n        chainId\n      });\n\n      this._handleUnlockStateChanged({\n        accounts,\n        isUnlocked\n      });\n\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n\n\n  _rpcRequest(payload, callback) {\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let cb = callback;\n    const _payload = payload;\n\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err, res) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload, cb);\n\n        return;\n      }\n    }\n\n    this.tryWindowHandle(_payload, cb);\n  }\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n\n\n  _handleConnect(chainId) {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", {\n        chainId\n      });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n\n\n  _handleDisconnect(isRecoverable, errorMessage) {\n    if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n      this._state.isConnected = false;\n      let error;\n\n      if (isRecoverable) {\n        error = new EthereumRpcError(1013, // Try again later\n        errorMessage || messages.errors.disconnected());\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(1011, // Internal error\n        errorMessage || messages.errors.permanentlyDisconnected());\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n  /**\n   * Called when accounts may have changed.\n   */\n\n\n  _handleAccountsChanged(accounts) {\n    let isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    // defensive programming\n    let finalAccounts = accounts;\n\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    } // emit accountsChanged if anything about the accounts array has changed\n\n\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts;\n      this.emit(\"accountsChanged\", finalAccounts);\n    } // handle selectedAddress\n\n\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = finalAccounts[0] || null;\n    }\n  }\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n\n\n  _handleChainChanged() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", {\n        chainId\n      });\n      return;\n    }\n\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n\n\n  _handleUnlockStateChanged() {\n    let {\n      accounts,\n      isUnlocked\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", {\n        isUnlocked\n      });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n\n}\n\n_defineProperty(TorusInPageProvider, \"_defaultState\", {\n  accounts: null,\n  isConnected: false,\n  isUnlocked: false,\n  initialized: false,\n  isPermanentlyDisconnected: false,\n  hasEmittedConnection: false\n});\n\n/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url) {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n\n      img.onload = () => resolve(true);\n\n      img.onerror = () => resolve(false);\n\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n/**\n * Extracts a name for the site from the DOM\n */\n\n\nconst getSiteName = window => {\n  const {\n    document\n  } = window;\n  const siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector('head > meta[name=\"title\"]');\n\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n/**\n * Extracts an icon for the site from the DOM\n */\n\n\nasync function getSiteIcon(window) {\n  try {\n    const {\n      document\n    } = window; // Use the site's favicon if it exists\n\n    let icon = document.querySelector('head > link[rel=\"shortcut icon\"]');\n\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    } // Search through available icons in no particular order\n\n\n    icon = Array.from(document.querySelectorAll('head > link[rel=\"icon\"]')).find(_icon => Boolean(_icon.href));\n\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n/**\n * Gets site metadata and returns it\n *\n */\n\n\nconst getSiteMetadata = async () => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window)\n});\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\"); // preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const {\n      torusUrl\n    } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = \"\".concat(torusUrl, \"/frame\");\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  constructor() {\n    let {\n      modalZIndex = 99999\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _defineProperty(this, \"isInitialized\", void 0);\n\n    _defineProperty(this, \"torusAlert\", void 0);\n\n    _defineProperty(this, \"modalZIndex\", void 0);\n\n    _defineProperty(this, \"alertZIndex\", void 0);\n\n    _defineProperty(this, \"requestedLoginProvider\", void 0);\n\n    _defineProperty(this, \"provider\", void 0);\n\n    _defineProperty(this, \"communicationProvider\", void 0);\n\n    _defineProperty(this, \"dappStorageKey\", void 0);\n\n    _defineProperty(this, \"torusAlertContainer\", void 0);\n\n    _defineProperty(this, \"torusUrl\", void 0);\n\n    _defineProperty(this, \"torusIframe\", void 0);\n\n    _defineProperty(this, \"styleLink\", void 0);\n\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  get isLoggedIn() {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n\n  async init() {\n    let {\n      buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n      enableLogging = false,\n      network,\n      showTorusButton = false,\n      useLocalStorage = false,\n      buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n      apiKey = \"torus-default\",\n      extraParams = {}\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const {\n      torusUrl,\n      logLevel\n    } = await getTorusUrl(buildEnv);\n    log.info(torusUrl, \"url loaded\");\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();else log.disableAll();\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";else torusIframeUrl.pathname += \"/frame\";\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n    torusIframeUrl.hash = hashParams.toString(); // Iframe code\n\n    this.torusIframe = htmlToElement(\"<iframe\\n        id=\\\"torusIframe\\\"\\n        class=\\\"torusIframe\\\"\\n        src=\\\"\".concat(torusIframeUrl.href, \"\\\"\\n        style=\\\"display: none; position: fixed; top: 0; right: 0; width: 100%;\\n        height: 100%; border: none; border-radius: 0; z-index: \").concat(this.modalZIndex.toString(), \"\\\"\\n      ></iframe>\"));\n    this.torusAlertContainer = htmlToElement(\"<div id=\\\"torusAlertContainer\\\" style=\\\"display:none; z-index: \".concat(this.alertZIndex.toString(), \"\\\"></div>\"));\n    this.styleLink = htmlToElement(\"<link href=\\\"\".concat(torusUrl, \"/css/widget.css\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\">\"));\n\n    const handleSetup = async () => {\n      return new Promise((resolve, reject) => {\n        try {\n          window.document.head.appendChild(this.styleLink);\n          window.document.body.appendChild(this.torusIframe);\n          window.document.body.appendChild(this.torusAlertContainer);\n          this.torusIframe.addEventListener(\"load\", async () => {\n            const dappMetadata = await getSiteMetadata(); // send init params here\n\n            this.torusIframe.contentWindow.postMessage({\n              buttonPosition,\n              apiKey,\n              network: typeof network === \"string\" ? getNetworkConfig(network) : network,\n              dappMetadata,\n              extraParams\n            }, torusIframeUrl.origin);\n            await this._setupWeb3({\n              torusUrl\n            });\n            if (showTorusButton) this.showTorusButton();else this.hideTorusButton();\n            this.isInitialized = true;\n            window.torus = this;\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    };\n\n    await documentReady();\n    await handleSetup();\n  }\n\n  async login() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({\n          isFull: true\n        });\n      } // If user is already logged in, we assume they have given access to the website\n\n\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest({\n          method: \"solana_requestAccounts\",\n          params: [this.requestedLoginProvider, params.login_hint]\n        }, getRpcPromiseCallback(resolve, reject));\n      });\n\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      } // This would never happen, but just in case\n\n\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n\n  async logout() {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: []\n    });\n    this.requestedLoginProvider = null;\n  }\n\n  async cleanUp() {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n\n    this.clearInit();\n  }\n\n  clearInit() {\n    function isElement(element) {\n      return element instanceof Element || element instanceof Document;\n    }\n\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n\n    this.isInitialized = false;\n  }\n\n  hideTorusButton() {\n    this.communicationProvider.hideTorusButton();\n  }\n\n  showTorusButton() {\n    this.communicationProvider.showTorusButton();\n  }\n\n  async setProvider(params) {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: _objectSpread({}, params)\n    });\n  }\n\n  async showWallet(path) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const instanceId = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: []\n    });\n    const finalPath = path ? \"/\".concat(path) : \"\";\n    const finalUrl = new URL(\"\".concat(this.torusUrl, \"/wallet\").concat(finalPath)); // Using URL constructor to prevent js injection and allow parameter validation.!\n\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach(x => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n\n    if (this.dappStorageKey) {\n      finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n    } // No need to track this window state. Hence, no _handleWindow call.\n\n\n    const walletWindow = new PopupHandler({\n      url: finalUrl,\n      features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW)\n    });\n    walletWindow.open();\n  }\n\n  async getUserInfo() {\n    const userInfoResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: []\n    });\n    return userInfoResponse;\n  }\n\n  async initiateTopup(provider, params) {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n\n    this.communicationProvider._handleWindow(windowId);\n\n    const topupResponse = await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: {\n        provider,\n        params,\n        windowId\n      }\n    });\n    return topupResponse;\n  } // Solana specific API\n\n\n  async sendTransaction(transaction) {\n    const response = await this.provider.request({\n      method: \"send_transaction\",\n      // params: { message: transaction.serializeMessage().toString(\"hex\") },\n      params: {\n        message: transaction.serialize({\n          requireAllSignatures: false\n        }).toString(\"hex\")\n      }\n    });\n    return response;\n  }\n\n  async signTransaction(transaction) {\n    const response = await this.provider.request({\n      method: \"sign_transaction\",\n      // params: { message: transaction.serializeMessage().toString(\"hex\") },\n      params: {\n        message: transaction.serialize({\n          requireAllSignatures: false\n        }).toString(\"hex\")\n      }\n    });\n    const buf = Buffer.from(response, \"hex\");\n    const sendTx = Transaction.from(buf);\n    return sendTx;\n  }\n\n  async signAllTransactions(transactions) {\n    const encodedTransactions = transactions.map(x => x.serialize({\n      requireAllSignatures: false\n    }).toString(\"hex\"));\n    const response = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: {\n        message: encodedTransactions\n      }\n    });\n    const allSignedTransaction = response.map(msg => Transaction.from(Buffer.from(msg, \"hex\")));\n    return allSignedTransaction;\n  }\n\n  async signMessage(data) {\n    const response = await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data\n      }\n    });\n    return response;\n  }\n\n  async getGaslessPublicKey() {\n    const response = await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: []\n    });\n    return response;\n  } // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n\n  handleDappStorageKey(useLocalStorage) {\n    let dappStorageKey = \"\";\n\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(configuration.localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;else {\n        const generatedKey = \"torus-app-\".concat(getWindowId());\n        window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n\n  async _setupWeb3(providerParams) {\n    log.info(\"setupWeb3 running\"); // setup background connection\n\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow\n    }); // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow\n    }); // compose the inPage provider\n\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n    inPageProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n        }); // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n\n\n        _payload.windowId = windowId;\n      }\n\n      inPageProvider._rpcEngine.handle(_payload, cb);\n    };\n\n    communicationProvider.tryWindowHandle = (payload, cb) => {\n      const _payload = payload;\n\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW) // todo: are these features generic for all\n\n        }); // for communication methods sending window id in jrpc req params\n\n\n        _payload.params.windowId = windowId;\n      }\n\n      communicationProvider._rpcEngine.handle(_payload, cb);\n    }; // detect solana_requestAccounts and pipe to enable for now\n\n\n    const detectAccountRequestPrototypeModifier = m => {\n      const originalMethod = inPageProvider[m]; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n      const self = this;\n\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const {\n          method,\n          params = []\n        } = request;\n\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({\n            loginProvider: params[0]\n          });\n          self.login({\n            loginProvider: params[0]\n          }) // eslint-disable-next-line promise/no-callback-in-promise\n          .then(res => cb(null, res)) // eslint-disable-next-line promise/no-callback-in-promise\n          .catch(err => cb(err));\n        }\n\n        return originalMethod.apply(this, [request, cb]);\n      };\n    }; // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n\n\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true\n    });\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n    await Promise.all([inPageProvider._initializeState(), communicationProvider._initializeState(_objectSpread(_objectSpread({}, providerParams), {}, {\n      dappStorageKey: this.dappStorageKey,\n      torusAlertContainer: this.torusAlertContainer,\n      torusIframe: this.torusIframe\n    }))]);\n    log.debug(\"Torus - injected provider\");\n  }\n\n}\n\nexport { BUTTON_POSITION, LOGIN_PROVIDER, PAYMENT_PROVIDER, TORUS_BUILD_ENV, TorusInPageProvider, Torus as default };\n//# sourceMappingURL=solanaEmbed.esm.js.map\n"]},"metadata":{},"sourceType":"module"}