{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fillOptionsWithDefaults = fillOptionsWithDefaults;\n\nfunction fillOptionsWithDefaults() {\n  var originalOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var options = JSON.parse(JSON.stringify(originalOptions)); // main\n\n  if (typeof options.webWorkerSupport === 'undefined') options.webWorkerSupport = true; // indexed-db\n\n  if (!options.idb) options.idb = {}; //  after this time the messages get deleted\n\n  if (!options.idb.ttl) options.idb.ttl = 1000 * 45;\n  if (!options.idb.fallbackInterval) options.idb.fallbackInterval = 150; //  handles abrupt db onclose events.\n\n  if (originalOptions.idb && typeof originalOptions.idb.onclose === 'function') options.idb.onclose = originalOptions.idb.onclose; // localstorage\n\n  if (!options.localstorage) options.localstorage = {};\n  if (!options.localstorage.removeTimeout) options.localstorage.removeTimeout = 1000 * 60; // custom methods\n\n  if (originalOptions.methods) options.methods = originalOptions.methods; // node\n\n  if (!options.node) options.node = {};\n  if (!options.node.ttl) options.node.ttl = 1000 * 60 * 2; // 2 minutes;\n\n  /**\n   * On linux use 'ulimit -Hn' to get the limit of open files.\n   * On ubuntu this was 4096 for me, so we use half of that as maxParallelWrites default.\n   */\n\n  if (!options.node.maxParallelWrites) options.node.maxParallelWrites = 2048;\n  if (typeof options.node.useFastPath === 'undefined') options.node.useFastPath = true;\n  return options;\n}","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/Twitter-Start/node_modules/broadcast-channel/dist/lib/options.js"],"names":["Object","defineProperty","exports","value","fillOptionsWithDefaults","originalOptions","arguments","length","undefined","options","JSON","parse","stringify","webWorkerSupport","idb","ttl","fallbackInterval","onclose","localstorage","removeTimeout","methods","node","maxParallelWrites","useFastPath"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,uBAAR,GAAkCA,uBAAlC;;AAEA,SAASA,uBAAT,GAAmC;AACjC,MAAIC,eAAe,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA1F;AACA,MAAIG,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeP,eAAf,CAAX,CAAd,CAFiC,CAE0B;;AAE3D,MAAI,OAAOI,OAAO,CAACI,gBAAf,KAAoC,WAAxC,EAAqDJ,OAAO,CAACI,gBAAR,GAA2B,IAA3B,CAJpB,CAIqD;;AAEtF,MAAI,CAACJ,OAAO,CAACK,GAAb,EAAkBL,OAAO,CAACK,GAAR,GAAc,EAAd,CANe,CAMG;;AAEpC,MAAI,CAACL,OAAO,CAACK,GAAR,CAAYC,GAAjB,EAAsBN,OAAO,CAACK,GAAR,CAAYC,GAAZ,GAAkB,OAAO,EAAzB;AACtB,MAAI,CAACN,OAAO,CAACK,GAAR,CAAYE,gBAAjB,EAAmCP,OAAO,CAACK,GAAR,CAAYE,gBAAZ,GAA+B,GAA/B,CATF,CASsC;;AAEvE,MAAIX,eAAe,CAACS,GAAhB,IAAuB,OAAOT,eAAe,CAACS,GAAhB,CAAoBG,OAA3B,KAAuC,UAAlE,EAA8ER,OAAO,CAACK,GAAR,CAAYG,OAAZ,GAAsBZ,eAAe,CAACS,GAAhB,CAAoBG,OAA1C,CAX7C,CAWgG;;AAEjI,MAAI,CAACR,OAAO,CAACS,YAAb,EAA2BT,OAAO,CAACS,YAAR,GAAuB,EAAvB;AAC3B,MAAI,CAACT,OAAO,CAACS,YAAR,CAAqBC,aAA1B,EAAyCV,OAAO,CAACS,YAAR,CAAqBC,aAArB,GAAqC,OAAO,EAA5C,CAdR,CAcwD;;AAEzF,MAAId,eAAe,CAACe,OAApB,EAA6BX,OAAO,CAACW,OAAR,GAAkBf,eAAe,CAACe,OAAlC,CAhBI,CAgBuC;;AAExE,MAAI,CAACX,OAAO,CAACY,IAAb,EAAmBZ,OAAO,CAACY,IAAR,GAAe,EAAf;AACnB,MAAI,CAACZ,OAAO,CAACY,IAAR,CAAaN,GAAlB,EAAuBN,OAAO,CAACY,IAAR,CAAaN,GAAb,GAAmB,OAAO,EAAP,GAAY,CAA/B,CAnBU,CAmBwB;;AAEzD;AACF;AACA;AACA;;AAEE,MAAI,CAACN,OAAO,CAACY,IAAR,CAAaC,iBAAlB,EAAqCb,OAAO,CAACY,IAAR,CAAaC,iBAAb,GAAiC,IAAjC;AACrC,MAAI,OAAOb,OAAO,CAACY,IAAR,CAAaE,WAApB,KAAoC,WAAxC,EAAqDd,OAAO,CAACY,IAAR,CAAaE,WAAb,GAA2B,IAA3B;AACrD,SAAOd,OAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fillOptionsWithDefaults = fillOptionsWithDefaults;\n\nfunction fillOptionsWithDefaults() {\n  var originalOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var options = JSON.parse(JSON.stringify(originalOptions)); // main\n\n  if (typeof options.webWorkerSupport === 'undefined') options.webWorkerSupport = true; // indexed-db\n\n  if (!options.idb) options.idb = {}; //  after this time the messages get deleted\n\n  if (!options.idb.ttl) options.idb.ttl = 1000 * 45;\n  if (!options.idb.fallbackInterval) options.idb.fallbackInterval = 150; //  handles abrupt db onclose events.\n\n  if (originalOptions.idb && typeof originalOptions.idb.onclose === 'function') options.idb.onclose = originalOptions.idb.onclose; // localstorage\n\n  if (!options.localstorage) options.localstorage = {};\n  if (!options.localstorage.removeTimeout) options.localstorage.removeTimeout = 1000 * 60; // custom methods\n\n  if (originalOptions.methods) options.methods = originalOptions.methods; // node\n\n  if (!options.node) options.node = {};\n  if (!options.node.ttl) options.node.ttl = 1000 * 60 * 2; // 2 minutes;\n\n  /**\n   * On linux use 'ulimit -Hn' to get the limit of open files.\n   * On ubuntu this was 4096 for me, so we use half of that as maxParallelWrites default.\n   */\n\n  if (!options.node.maxParallelWrites) options.node.maxParallelWrites = 2048;\n  if (typeof options.node.useFastPath === 'undefined') options.node.useFastPath = true;\n  return options;\n}"]},"metadata":{},"sourceType":"script"}