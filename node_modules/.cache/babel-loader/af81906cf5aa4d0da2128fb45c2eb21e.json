{"ast":null,"code":"\"use strict\";\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Represents a Role on the Parse server. Roles represent groupings of\n * Users for the purposes of granting permissions (e.g. specifying an ACL\n * for an Object). Roles are specified by their sets of child users and\n * child roles, all of which are granted any permissions that the parent\n * role has.\n *\n * <p>Roles must have a name (which cannot be changed after creation of the\n * role), and must specify an ACL.</p>\n *\n * @alias Parse.Role\n * @augments Parse.Object\n */\n\n\nvar ParseRole = /*#__PURE__*/function (_ParseObject) {\n  (0, _inherits2.default)(ParseRole, _ParseObject);\n\n  var _super = _createSuper(ParseRole);\n  /**\n   * @param {string} name The name of the Role to create.\n   * @param {Parse.ACL} acl The ACL for this role. Roles must have an ACL.\n   * A Parse.Role is a local representation of a role persisted to the Parse\n   * cloud.\n   */\n\n\n  function ParseRole(name\n  /*: string*/\n  , acl\n  /*: ParseACL*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseRole);\n    _this = _super.call(this, '_Role');\n\n    if (typeof name === 'string' && acl instanceof _ParseACL.default) {\n      _this.setName(name);\n\n      _this.setACL(acl);\n    }\n\n    return _this;\n  }\n  /**\n   * Gets the name of the role.  You can alternatively call role.get(\"name\")\n   *\n   * @returns {string} the name of the role.\n   */\n\n\n  (0, _createClass2.default)(ParseRole, [{\n    key: \"getName\",\n    value: function ()\n    /*: ?string*/\n    {\n      var name = this.get('name');\n\n      if (name == null || typeof name === 'string') {\n        return name;\n      }\n\n      return '';\n    }\n    /**\n     * Sets the name for a role. This value must be set before the role has\n     * been saved to the server, and cannot be set once the role has been\n     * saved.\n     *\n     * <p>\n     *   A role's name can only contain alphanumeric characters, _, -, and\n     *   spaces.\n     * </p>\n     *\n     * <p>This is equivalent to calling role.set(\"name\", name)</p>\n     *\n     * @param {string} name The name of the role.\n     * @param {object} options Standard options object with success and error\n     *     callbacks.\n     * @returns {(ParseObject|boolean)} true if the set succeeded.\n     */\n\n  }, {\n    key: \"setName\",\n    value: function (name\n    /*: string*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set('name', name, options);\n    }\n    /**\n     * Gets the Parse.Relation for the Parse.Users that are direct\n     * children of this role. These users are granted any privileges that this\n     * role has been granted (e.g. read or write access through ACLs). You can\n     * add or remove users from the role through this relation.\n     *\n     * <p>This is equivalent to calling role.relation(\"users\")</p>\n     *\n     * @returns {Parse.Relation} the relation for the users belonging to this\n     *     role.\n     */\n\n  }, {\n    key: \"getUsers\",\n    value: function ()\n    /*: ParseRelation*/\n    {\n      return this.relation('users');\n    }\n    /**\n     * Gets the Parse.Relation for the Parse.Roles that are direct\n     * children of this role. These roles' users are granted any privileges that\n     * this role has been granted (e.g. read or write access through ACLs). You\n     * can add or remove child roles from this role through this relation.\n     *\n     * <p>This is equivalent to calling role.relation(\"roles\")</p>\n     *\n     * @returns {Parse.Relation} the relation for the roles belonging to this\n     *     role.\n     */\n\n  }, {\n    key: \"getRoles\",\n    value: function ()\n    /*: ParseRelation*/\n    {\n      return this.relation('roles');\n    }\n  }, {\n    key: \"validate\",\n    value: function (attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseError | boolean*/\n    {\n      var isInvalid = (0, _get2.default)((0, _getPrototypeOf2.default)(ParseRole.prototype), \"validate\", this).call(this, attrs, options);\n\n      if (isInvalid) {\n        return isInvalid;\n      }\n\n      if ('name' in attrs && attrs.name !== this.getName()) {\n        var newName = attrs.name;\n\n        if (this.id && this.id !== attrs.objectId) {\n          // Check to see if the objectId being set matches this.id\n          // This happens during a fetch -- the id is set before calling fetch\n          // Let the name be set in this case\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name can only be set before it has been saved.\");\n        }\n\n        if (typeof newName !== 'string') {\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name must be a String.\");\n        }\n\n        if (!/^[0-9a-zA-Z\\-_ ]+$/.test(newName)) {\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name can be only contain alphanumeric characters, _, -, and spaces.\");\n        }\n      }\n\n      return false;\n    }\n  }]);\n  return ParseRole;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_Role', ParseRole);\n\nvar _default = ParseRole;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/Twitter-Start/node_modules/moralis/lib/browser/ParseRole.js"],"names":["_Reflect$construct","require","_Object$defineProperty","_interopRequireDefault","exports","value","default","_classCallCheck2","_createClass2","_get2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_ParseACL","_ParseError","_ParseObject2","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","Super","result","NewTarget","constructor","arguments","apply","Reflect","sham","Proxy","Boolean","prototype","valueOf","call","e","ParseRole","_ParseObject","_super","name","acl","_this","setName","setACL","key","get","options","set","relation","attrs","isInvalid","getName","newName","id","objectId","OTHER_CAUSE","test","registerSubclass","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Represents a Role on the Parse server. Roles represent groupings of\n * Users for the purposes of granting permissions (e.g. specifying an ACL\n * for an Object). Roles are specified by their sets of child users and\n * child roles, all of which are granted any permissions that the parent\n * role has.\n *\n * <p>Roles must have a name (which cannot be changed after creation of the\n * role), and must specify an ACL.</p>\n *\n * @alias Parse.Role\n * @augments Parse.Object\n */\n\n\nvar ParseRole = /*#__PURE__*/function (_ParseObject) {\n  (0, _inherits2.default)(ParseRole, _ParseObject);\n\n  var _super = _createSuper(ParseRole);\n  /**\n   * @param {string} name The name of the Role to create.\n   * @param {Parse.ACL} acl The ACL for this role. Roles must have an ACL.\n   * A Parse.Role is a local representation of a role persisted to the Parse\n   * cloud.\n   */\n\n\n  function ParseRole(name\n  /*: string*/\n  , acl\n  /*: ParseACL*/\n  ) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ParseRole);\n    _this = _super.call(this, '_Role');\n\n    if (typeof name === 'string' && acl instanceof _ParseACL.default) {\n      _this.setName(name);\n\n      _this.setACL(acl);\n    }\n\n    return _this;\n  }\n  /**\n   * Gets the name of the role.  You can alternatively call role.get(\"name\")\n   *\n   * @returns {string} the name of the role.\n   */\n\n\n  (0, _createClass2.default)(ParseRole, [{\n    key: \"getName\",\n    value: function ()\n    /*: ?string*/\n    {\n      var name = this.get('name');\n\n      if (name == null || typeof name === 'string') {\n        return name;\n      }\n\n      return '';\n    }\n    /**\n     * Sets the name for a role. This value must be set before the role has\n     * been saved to the server, and cannot be set once the role has been\n     * saved.\n     *\n     * <p>\n     *   A role's name can only contain alphanumeric characters, _, -, and\n     *   spaces.\n     * </p>\n     *\n     * <p>This is equivalent to calling role.set(\"name\", name)</p>\n     *\n     * @param {string} name The name of the role.\n     * @param {object} options Standard options object with success and error\n     *     callbacks.\n     * @returns {(ParseObject|boolean)} true if the set succeeded.\n     */\n\n  }, {\n    key: \"setName\",\n    value: function (name\n    /*: string*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set('name', name, options);\n    }\n    /**\n     * Gets the Parse.Relation for the Parse.Users that are direct\n     * children of this role. These users are granted any privileges that this\n     * role has been granted (e.g. read or write access through ACLs). You can\n     * add or remove users from the role through this relation.\n     *\n     * <p>This is equivalent to calling role.relation(\"users\")</p>\n     *\n     * @returns {Parse.Relation} the relation for the users belonging to this\n     *     role.\n     */\n\n  }, {\n    key: \"getUsers\",\n    value: function ()\n    /*: ParseRelation*/\n    {\n      return this.relation('users');\n    }\n    /**\n     * Gets the Parse.Relation for the Parse.Roles that are direct\n     * children of this role. These roles' users are granted any privileges that\n     * this role has been granted (e.g. read or write access through ACLs). You\n     * can add or remove child roles from this role through this relation.\n     *\n     * <p>This is equivalent to calling role.relation(\"roles\")</p>\n     *\n     * @returns {Parse.Relation} the relation for the roles belonging to this\n     *     role.\n     */\n\n  }, {\n    key: \"getRoles\",\n    value: function ()\n    /*: ParseRelation*/\n    {\n      return this.relation('roles');\n    }\n  }, {\n    key: \"validate\",\n    value: function (attrs\n    /*: AttributeMap*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseError | boolean*/\n    {\n      var isInvalid = (0, _get2.default)((0, _getPrototypeOf2.default)(ParseRole.prototype), \"validate\", this).call(this, attrs, options);\n\n      if (isInvalid) {\n        return isInvalid;\n      }\n\n      if ('name' in attrs && attrs.name !== this.getName()) {\n        var newName = attrs.name;\n\n        if (this.id && this.id !== attrs.objectId) {\n          // Check to see if the objectId being set matches this.id\n          // This happens during a fetch -- the id is set before calling fetch\n          // Let the name be set in this case\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name can only be set before it has been saved.\");\n        }\n\n        if (typeof newName !== 'string') {\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name must be a String.\");\n        }\n\n        if (!/^[0-9a-zA-Z\\-_ ]+$/.test(newName)) {\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name can be only contain alphanumeric characters, _, -, and spaces.\");\n        }\n      }\n\n      return false;\n    }\n  }]);\n  return ParseRole;\n}(_ParseObject2.default);\n\n_ParseObject2.default.registerSubclass('_Role', ParseRole);\n\nvar _default = ParseRole;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}