{"ast":null,"code":"\"use strict\";\n\nvar _Object$keys2 = require(\"@babel/runtime-corejs3/core-js-stable/object/keys\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\");\n\nvar _filterInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\");\n\nvar _forEachInstanceProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs3/core-js-stable/object/define-properties\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseFileEncode = require(\"./ParseFileEncode\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys2(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) {\n      return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var _context4, _context5;\n\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? _forEachInstanceProperty2(_context4 = ownKeys(Object(source), !0)).call(_context4, function (key) {\n      (0, _defineProperty2.default)(target, key, source[key]);\n    }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty2(_context5 = ownKeys(Object(source))).call(_context5, function (key) {\n      _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar ParseError = require('./ParseError').default;\n/*:: type Base64 = { base64: string };*/\n\n/*:: type Uri = { uri: string };*/\n\n/*:: type FileData = Array<number> | Base64 | Blob | Uri;*/\n\n/*:: export type FileSource =\n  | {\n      format: 'file',\n      file: Blob,\n      type: string,\n    }\n  | {\n      format: 'base64',\n      base64: string,\n      type: string,\n    }\n  | {\n      format: 'uri',\n      uri: string,\n      type: string,\n    };*/\n\n\nvar dataUriRegexp = /^data:([a-zA-Z]+\\/[-a-zA-Z0-9+.]+)(;charset=[a-zA-Z0-9\\-/]*)?;base64,/;\n/**\n * A Parse.File is a local representation of a file that is saved to the Parse\n * cloud.\n *\n * @alias Parse.File\n */\n\nvar ParseFile = /*#__PURE__*/function () {\n  /**\n   * @param name {String} The file's name. This will be prefixed by a unique\n   *     value once the file has finished saving. The file name must begin with\n   *     an alphanumeric character, and consist of alphanumeric characters,\n   *     periods, spaces, underscores, or dashes.\n   * @param data {Array} The data for the file, as either:\n   *     1. an Array of byte value Numbers, or\n   *     2. an Object like { base64: \"...\" } with a base64-encoded String.\n   *     3. an Object like { uri: \"...\" } with a uri String.\n   *     4. a File object selected with a file upload control. (3) only works\n   *        in Firefox 3.6+, Safari 6.0.2+, Chrome 7+, and IE 10+.\n   *        For example:\n   * <pre>\n   * var fileUploadControl = $(\"#profilePhotoFileUpload\")[0];\n   * if (fileUploadControl.files.length > 0) {\n   *   var file = fileUploadControl.files[0];\n   *   var name = \"photo.jpg\";\n   *   var parseFile = new Parse.File(name, file);\n   *   parseFile.save().then(function() {\n   *     // The file has been saved to Parse.\n   *   }, function(error) {\n   *     // The file either could not be read, or could not be saved to Parse.\n   *   });\n   * }</pre>\n   * @param type {String} Optional Content-Type header to use for the file. If\n   *     this is omitted, the content type will be inferred from the name's\n   *     extension.\n   * @param metadata {Object} Optional key value pairs to be stored with file object\n   * @param tags {Object} Optional key value pairs to be stored with file object\n   */\n  function ParseFile(name\n  /*: string*/\n  , data\n  /*:: ?: FileData*/\n  , type\n  /*:: ?: string*/\n  , metadata\n  /*:: ?: Object*/\n  , tags\n  /*:: ?: Object*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseFile);\n    (0, _defineProperty2.default)(this, \"_name\", void 0);\n    (0, _defineProperty2.default)(this, \"_url\", void 0);\n    (0, _defineProperty2.default)(this, \"_hash\", void 0);\n    (0, _defineProperty2.default)(this, \"_ipfs\", void 0);\n    (0, _defineProperty2.default)(this, \"_source\", void 0);\n    (0, _defineProperty2.default)(this, \"_previousSave\", void 0);\n    (0, _defineProperty2.default)(this, \"_data\", void 0);\n    (0, _defineProperty2.default)(this, \"_requestTask\", void 0);\n    (0, _defineProperty2.default)(this, \"_metadata\", void 0);\n    (0, _defineProperty2.default)(this, \"_tags\", void 0);\n    var specifiedType = type || '';\n    this._name = name;\n    this._metadata = metadata || {};\n    this._tags = tags || {};\n\n    if (data !== undefined) {\n      if ((0, _isArray.default)(data)) {\n        this._data = ParseFile.encodeBase64(data);\n        this._source = {\n          format: 'base64',\n          base64: this._data,\n          type: specifiedType\n        };\n      } else if (typeof Blob !== 'undefined' && data instanceof Blob) {\n        this._source = {\n          format: 'file',\n          file: data,\n          type: specifiedType\n        };\n      } else if (data && typeof data.uri === 'string' && data.uri !== undefined) {\n        this._source = {\n          format: 'uri',\n          uri: data.uri,\n          type: specifiedType\n        };\n      } else if (data && typeof data.base64 === 'string') {\n        var base64 = data.base64;\n        var commaIndex = (0, _indexOf.default)(base64).call(base64, ',');\n\n        if (commaIndex !== -1) {\n          var matches = dataUriRegexp.exec((0, _slice.default)(base64).call(base64, 0, commaIndex + 1)); // if data URI with type and charset, there will be 4 matches.\n\n          this._data = (0, _slice.default)(base64).call(base64, commaIndex + 1);\n          this._source = {\n            format: 'base64',\n            base64: this._data,\n            type: matches[1]\n          };\n        } else {\n          this._data = base64;\n          this._source = {\n            format: 'base64',\n            base64: base64,\n            type: specifiedType\n          };\n        }\n      } else {\n        throw new TypeError('Cannot create a Parse.File with that data.');\n      }\n    }\n  }\n  /**\n   * Return the data for the file, downloading it if not already present.\n   * Data is present if initialized with Byte Array, Base64 or Saved with Uri.\n   * Data is cleared if saved with File object selected with a file upload control\n   *\n   * @returns {Promise} Promise that is resolve with base64 data\n   */\n\n\n  (0, _createClass2.default)(ParseFile, [{\n    key: \"getData\",\n    value: function () {\n      var _getData = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n        var _this = this;\n\n        var options, controller, result;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this._data) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this._data);\n\n              case 2:\n                if (this._url) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new Error('Cannot retrieve data for unsaved ParseFile.');\n\n              case 4:\n                options = {\n                  requestTask: function (task) {\n                    return _this._requestTask = task;\n                  }\n                };\n                controller = _CoreManager.default.getFileController();\n                _context.next = 8;\n                return controller.download(this._url, options);\n\n              case 8:\n                result = _context.sent;\n                this._data = result.base64;\n                return _context.abrupt(\"return\", this._data);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function () {\n        return _getData.apply(this, arguments);\n      };\n    }()\n    /**\n     * Gets the name of the file. Before save is called, this is the filename\n     * given by the user. After save is called, that name gets prefixed with a\n     * unique identifier.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"name\",\n    value: function ()\n    /*: string*/\n    {\n      return this._name;\n    }\n    /**\n     * Gets the url of the file. It is only available after you save the file or\n     * after you get the file from a Parse.Object.\n     *\n     * @param {object} options An object to specify url options\n     * @returns {string}\n     */\n\n  }, {\n    key: \"url\",\n    value: function (options\n    /*:: ?: { forceSecure?: boolean }*/\n    )\n    /*: ?string*/\n    {\n      options = options || {};\n\n      if (!this._url) {\n        return;\n      }\n\n      if (options.forceSecure) {\n        return this._url.replace(/^http:\\/\\//i, 'https://');\n      }\n\n      return this._url;\n    }\n  }, {\n    key: \"ipfs\",\n    value: function () {\n      return this._ipfs;\n    }\n  }, {\n    key: \"hash\",\n    value: function () {\n      return this._hash;\n    }\n    /**\n     * Gets the metadata of the file.\n     *\n     * @returns {object}\n     */\n\n  }, {\n    key: \"metadata\",\n    value: function ()\n    /*: Object*/\n    {\n      return this._metadata;\n    }\n    /**\n     * Gets the tags of the file.\n     *\n     * @returns {object}\n     */\n\n  }, {\n    key: \"tags\",\n    value: function ()\n    /*: Object*/\n    {\n      return this._tags;\n    }\n    /**\n     * Saves the file to the Parse cloud.\n     *\n     * @param {object} options\n     *  * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *     behalf of a specific user.\n     *   <li>progress: In Browser only, callback for upload progress. For example:\n     * <pre>\n     * let parseFile = new Parse.File(name, file);\n     * parseFile.save({\n     *   progress: (progressValue, loaded, total, { type }) => {\n     *     if (type === \"upload\" && progressValue !== null) {\n     *       // Update the UI using progressValue\n     *     }\n     *   }\n     * });\n     * </pre>\n     * </ul>\n     * @returns {Promise} Promise that is resolved when the save finishes.\n     */\n\n  }, {\n    key: \"save\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    ) {\n      var _this2 = this;\n\n      options = options || {};\n\n      options.requestTask = function (task) {\n        return _this2._requestTask = task;\n      };\n\n      options.metadata = this._metadata;\n      options.tags = this._tags;\n\n      var controller = _CoreManager.default.getFileController();\n\n      if (!this._previousSave) {\n        if (this._source.format === 'file') {\n          this._previousSave = controller.saveFile(this._name, this._source, options).then(function (res) {\n            _this2._name = res.name;\n            _this2._url = res.url;\n            _this2._hash = res.hash;\n            _this2._ipfs = res.ipfs;\n            _this2._data = null;\n            _this2._requestTask = null;\n            return _this2;\n          });\n        } else if (this._source.format === 'uri') {\n          this._previousSave = controller.download(this._source.uri, options).then(function (result) {\n            if (!(result && result.base64)) {\n              return {};\n            }\n\n            var newSource = {\n              format: 'base64',\n              base64: result.base64,\n              type: result.contentType\n            };\n            _this2._data = result.base64;\n            _this2._requestTask = null;\n            return controller.saveBase64(_this2._name, newSource, options);\n          }).then(function (res) {\n            _this2._name = res.name;\n            _this2._url = res.url;\n            _this2._hash = res.hash;\n            _this2._ipfs = res.ipfs;\n            _this2._requestTask = null;\n            return _this2;\n          });\n        } else {\n          this._previousSave = controller.saveBase64(this._name, this._source, options).then(function (res) {\n            _this2._name = res.name;\n            _this2._url = res.url;\n            _this2._hash = res.hash;\n            _this2._ipfs = res.ipfs;\n            _this2._requestTask = null;\n            return _this2;\n          });\n        }\n      }\n\n      if (this._previousSave) {\n        return this._previousSave;\n      }\n    }\n  }, {\n    key: \"saveIPFS\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    ) {\n      return this.save(_objectSpread(_objectSpread({}, options), {}, {\n        ipfs: true\n      }));\n    }\n    /**\n     * Aborts the request if it has already been sent.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function () {\n      if (this._requestTask && typeof this._requestTask.abort === 'function') {\n        this._requestTask.abort();\n      }\n\n      this._requestTask = null;\n    }\n    /**\n     * Deletes the file from the Parse cloud.\n     * In Cloud Code and Node only with Master Key.\n     *\n     * @param {object} options\n     *  * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     * <pre>\n     * @returns {Promise} Promise that is resolved when the delete finishes.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function () {\n      var _this3 = this;\n\n      var options\n      /*:: ?: FullOptions*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!this._name) {\n        throw new ParseError(ParseError.FILE_DELETE_UNNAMED_ERROR, 'Cannot delete an unnamed file.');\n      }\n\n      var destroyOptions = {\n        useMasterKey: true\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getFileController();\n\n      return controller.deleteFile(this._name, destroyOptions).then(function () {\n        _this3._data = null;\n        _this3._requestTask = null;\n        return _this3;\n      });\n    }\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: { name: ?string, url: ?string }*/\n    {\n      return {\n        __type: 'File',\n        name: this._name,\n        url: this._url,\n        ipfs: this._ipfs,\n        hash: this._hash\n      };\n    }\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: mixed*/\n    )\n    /*: boolean*/\n    {\n      if (this === other) {\n        return true;\n      } // Unsaved Files are never equal, since they will be saved to different URLs\n\n\n      return other instanceof ParseFile && this.name() === other.name() && this.url() === other.url() && typeof this.url() !== 'undefined';\n    }\n    /**\n     * Sets metadata to be saved with file object. Overwrites existing metadata\n     *\n     * @param {object} metadata Key value pairs to be stored with file object\n     */\n\n  }, {\n    key: \"setMetadata\",\n    value: function (metadata\n    /*: any*/\n    ) {\n      var _this4 = this;\n\n      if (metadata && (0, _typeof2.default)(metadata) === 'object') {\n        var _context2;\n\n        (0, _forEach.default)(_context2 = (0, _keys.default)(metadata)).call(_context2, function (key) {\n          _this4.addMetadata(key, metadata[key]);\n        });\n      }\n    }\n    /**\n     * Sets metadata to be saved with file object. Adds to existing metadata.\n     *\n     * @param {string} key key to store the metadata\n     * @param {*} value metadata\n     */\n\n  }, {\n    key: \"addMetadata\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: any*/\n    ) {\n      if (typeof key === 'string') {\n        this._metadata[key] = value;\n      }\n    }\n    /**\n     * Sets tags to be saved with file object. Overwrites existing tags\n     *\n     * @param {object} tags Key value pairs to be stored with file object\n     */\n\n  }, {\n    key: \"setTags\",\n    value: function (tags\n    /*: any*/\n    ) {\n      var _this5 = this;\n\n      if (tags && (0, _typeof2.default)(tags) === 'object') {\n        var _context3;\n\n        (0, _forEach.default)(_context3 = (0, _keys.default)(tags)).call(_context3, function (key) {\n          _this5.addTag(key, tags[key]);\n        });\n      }\n    }\n    /**\n     * Sets tags to be saved with file object. Adds to existing tags.\n     *\n     * @param {string} key key to store tags\n     * @param {*} value tag\n     */\n\n  }, {\n    key: \"addTag\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: string*/\n    ) {\n      if (typeof key === 'string') {\n        this._tags[key] = value;\n      }\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function (obj)\n    /*: ParseFile*/\n    {\n      if (obj.__type !== 'File') {\n        throw new TypeError('JSON object does not represent a ParseFile');\n      }\n\n      var file = new ParseFile(obj.name);\n      file._url = obj.url;\n      file._hash = obj.hash;\n      file._ipfs = obj.ipfs;\n      return file;\n    }\n  }, {\n    key: \"encodeBase64\",\n    value: function (bytes\n    /*: Array<number>*/\n    )\n    /*: string*/\n    {\n      return (0, _ParseFileEncode.encodeBase64)(bytes);\n    }\n  }]);\n  return ParseFile;\n}();\n\n_CoreManager.default.setFileController(require('./ParseFileController.default'));\n\nvar _default = ParseFile;\nexports.default = _default;\nexports.b64Digit = _ParseFileEncode.b64Digit;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/Twitter-Start/node_modules/moralis/lib/browser/ParseFile.js"],"names":["_Object$keys2","require","_Object$getOwnPropertySymbols","_filterInstanceProperty","_Object$getOwnPropertyDescriptor","_forEachInstanceProperty2","_Object$getOwnPropertyDescriptors","_Object$defineProperties","_Object$defineProperty","_interopRequireDefault","exports","value","default","_regenerator","_isArray","_indexOf","_slice","_forEach","_keys","_typeof2","_asyncToGenerator2","_classCallCheck2","_createClass2","_defineProperty2","_CoreManager","_ParseFileEncode","ownKeys","object","enumerableOnly","keys","symbols","call","sym","enumerable","push","apply","_objectSpread","target","i","arguments","length","_context4","_context5","source","Object","key","ParseError","dataUriRegexp","ParseFile","name","data","type","metadata","tags","specifiedType","_name","_metadata","_tags","undefined","_data","encodeBase64","_source","format","base64","Blob","file","uri","commaIndex","matches","exec","TypeError","_getData","mark","_callee","_this","options","controller","result","wrap","_context","prev","next","abrupt","_url","Error","requestTask","task","_requestTask","getFileController","download","sent","stop","forceSecure","replace","_ipfs","_hash","_this2","_previousSave","saveFile","then","res","url","hash","ipfs","newSource","contentType","saveBase64","save","abort","_this3","FILE_DELETE_UNNAMED_ERROR","destroyOptions","useMasterKey","hasOwnProperty","deleteFile","__type","other","_this4","_context2","addMetadata","_this5","_context3","addTag","obj","bytes","setFileController","_default","b64Digit"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _Object$keys2 = require(\"@babel/runtime-corejs3/core-js-stable/object/keys\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\");\n\nvar _filterInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\");\n\nvar _forEachInstanceProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs3/core-js-stable/object/define-properties\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseFileEncode = require(\"./ParseFileEncode\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys2(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) {\n      return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var _context4, _context5;\n\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? _forEachInstanceProperty2(_context4 = ownKeys(Object(source), !0)).call(_context4, function (key) {\n      (0, _defineProperty2.default)(target, key, source[key]);\n    }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty2(_context5 = ownKeys(Object(source))).call(_context5, function (key) {\n      _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar ParseError = require('./ParseError').default;\n/*:: type Base64 = { base64: string };*/\n\n/*:: type Uri = { uri: string };*/\n\n/*:: type FileData = Array<number> | Base64 | Blob | Uri;*/\n\n/*:: export type FileSource =\n  | {\n      format: 'file',\n      file: Blob,\n      type: string,\n    }\n  | {\n      format: 'base64',\n      base64: string,\n      type: string,\n    }\n  | {\n      format: 'uri',\n      uri: string,\n      type: string,\n    };*/\n\n\nvar dataUriRegexp = /^data:([a-zA-Z]+\\/[-a-zA-Z0-9+.]+)(;charset=[a-zA-Z0-9\\-/]*)?;base64,/;\n/**\n * A Parse.File is a local representation of a file that is saved to the Parse\n * cloud.\n *\n * @alias Parse.File\n */\n\nvar ParseFile = /*#__PURE__*/function () {\n  /**\n   * @param name {String} The file's name. This will be prefixed by a unique\n   *     value once the file has finished saving. The file name must begin with\n   *     an alphanumeric character, and consist of alphanumeric characters,\n   *     periods, spaces, underscores, or dashes.\n   * @param data {Array} The data for the file, as either:\n   *     1. an Array of byte value Numbers, or\n   *     2. an Object like { base64: \"...\" } with a base64-encoded String.\n   *     3. an Object like { uri: \"...\" } with a uri String.\n   *     4. a File object selected with a file upload control. (3) only works\n   *        in Firefox 3.6+, Safari 6.0.2+, Chrome 7+, and IE 10+.\n   *        For example:\n   * <pre>\n   * var fileUploadControl = $(\"#profilePhotoFileUpload\")[0];\n   * if (fileUploadControl.files.length > 0) {\n   *   var file = fileUploadControl.files[0];\n   *   var name = \"photo.jpg\";\n   *   var parseFile = new Parse.File(name, file);\n   *   parseFile.save().then(function() {\n   *     // The file has been saved to Parse.\n   *   }, function(error) {\n   *     // The file either could not be read, or could not be saved to Parse.\n   *   });\n   * }</pre>\n   * @param type {String} Optional Content-Type header to use for the file. If\n   *     this is omitted, the content type will be inferred from the name's\n   *     extension.\n   * @param metadata {Object} Optional key value pairs to be stored with file object\n   * @param tags {Object} Optional key value pairs to be stored with file object\n   */\n  function ParseFile(name\n  /*: string*/\n  , data\n  /*:: ?: FileData*/\n  , type\n  /*:: ?: string*/\n  , metadata\n  /*:: ?: Object*/\n  , tags\n  /*:: ?: Object*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseFile);\n    (0, _defineProperty2.default)(this, \"_name\", void 0);\n    (0, _defineProperty2.default)(this, \"_url\", void 0);\n    (0, _defineProperty2.default)(this, \"_hash\", void 0);\n    (0, _defineProperty2.default)(this, \"_ipfs\", void 0);\n    (0, _defineProperty2.default)(this, \"_source\", void 0);\n    (0, _defineProperty2.default)(this, \"_previousSave\", void 0);\n    (0, _defineProperty2.default)(this, \"_data\", void 0);\n    (0, _defineProperty2.default)(this, \"_requestTask\", void 0);\n    (0, _defineProperty2.default)(this, \"_metadata\", void 0);\n    (0, _defineProperty2.default)(this, \"_tags\", void 0);\n    var specifiedType = type || '';\n    this._name = name;\n    this._metadata = metadata || {};\n    this._tags = tags || {};\n\n    if (data !== undefined) {\n      if ((0, _isArray.default)(data)) {\n        this._data = ParseFile.encodeBase64(data);\n        this._source = {\n          format: 'base64',\n          base64: this._data,\n          type: specifiedType\n        };\n      } else if (typeof Blob !== 'undefined' && data instanceof Blob) {\n        this._source = {\n          format: 'file',\n          file: data,\n          type: specifiedType\n        };\n      } else if (data && typeof data.uri === 'string' && data.uri !== undefined) {\n        this._source = {\n          format: 'uri',\n          uri: data.uri,\n          type: specifiedType\n        };\n      } else if (data && typeof data.base64 === 'string') {\n        var base64 = data.base64;\n        var commaIndex = (0, _indexOf.default)(base64).call(base64, ',');\n\n        if (commaIndex !== -1) {\n          var matches = dataUriRegexp.exec((0, _slice.default)(base64).call(base64, 0, commaIndex + 1)); // if data URI with type and charset, there will be 4 matches.\n\n          this._data = (0, _slice.default)(base64).call(base64, commaIndex + 1);\n          this._source = {\n            format: 'base64',\n            base64: this._data,\n            type: matches[1]\n          };\n        } else {\n          this._data = base64;\n          this._source = {\n            format: 'base64',\n            base64: base64,\n            type: specifiedType\n          };\n        }\n      } else {\n        throw new TypeError('Cannot create a Parse.File with that data.');\n      }\n    }\n  }\n  /**\n   * Return the data for the file, downloading it if not already present.\n   * Data is present if initialized with Byte Array, Base64 or Saved with Uri.\n   * Data is cleared if saved with File object selected with a file upload control\n   *\n   * @returns {Promise} Promise that is resolve with base64 data\n   */\n\n\n  (0, _createClass2.default)(ParseFile, [{\n    key: \"getData\",\n    value: function () {\n      var _getData = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n        var _this = this;\n\n        var options, controller, result;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this._data) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this._data);\n\n              case 2:\n                if (this._url) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new Error('Cannot retrieve data for unsaved ParseFile.');\n\n              case 4:\n                options = {\n                  requestTask: function (task) {\n                    return _this._requestTask = task;\n                  }\n                };\n                controller = _CoreManager.default.getFileController();\n                _context.next = 8;\n                return controller.download(this._url, options);\n\n              case 8:\n                result = _context.sent;\n                this._data = result.base64;\n                return _context.abrupt(\"return\", this._data);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function () {\n        return _getData.apply(this, arguments);\n      };\n    }()\n    /**\n     * Gets the name of the file. Before save is called, this is the filename\n     * given by the user. After save is called, that name gets prefixed with a\n     * unique identifier.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"name\",\n    value: function ()\n    /*: string*/\n    {\n      return this._name;\n    }\n    /**\n     * Gets the url of the file. It is only available after you save the file or\n     * after you get the file from a Parse.Object.\n     *\n     * @param {object} options An object to specify url options\n     * @returns {string}\n     */\n\n  }, {\n    key: \"url\",\n    value: function (options\n    /*:: ?: { forceSecure?: boolean }*/\n    )\n    /*: ?string*/\n    {\n      options = options || {};\n\n      if (!this._url) {\n        return;\n      }\n\n      if (options.forceSecure) {\n        return this._url.replace(/^http:\\/\\//i, 'https://');\n      }\n\n      return this._url;\n    }\n  }, {\n    key: \"ipfs\",\n    value: function () {\n      return this._ipfs;\n    }\n  }, {\n    key: \"hash\",\n    value: function () {\n      return this._hash;\n    }\n    /**\n     * Gets the metadata of the file.\n     *\n     * @returns {object}\n     */\n\n  }, {\n    key: \"metadata\",\n    value: function ()\n    /*: Object*/\n    {\n      return this._metadata;\n    }\n    /**\n     * Gets the tags of the file.\n     *\n     * @returns {object}\n     */\n\n  }, {\n    key: \"tags\",\n    value: function ()\n    /*: Object*/\n    {\n      return this._tags;\n    }\n    /**\n     * Saves the file to the Parse cloud.\n     *\n     * @param {object} options\n     *  * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *     behalf of a specific user.\n     *   <li>progress: In Browser only, callback for upload progress. For example:\n     * <pre>\n     * let parseFile = new Parse.File(name, file);\n     * parseFile.save({\n     *   progress: (progressValue, loaded, total, { type }) => {\n     *     if (type === \"upload\" && progressValue !== null) {\n     *       // Update the UI using progressValue\n     *     }\n     *   }\n     * });\n     * </pre>\n     * </ul>\n     * @returns {Promise} Promise that is resolved when the save finishes.\n     */\n\n  }, {\n    key: \"save\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    ) {\n      var _this2 = this;\n\n      options = options || {};\n\n      options.requestTask = function (task) {\n        return _this2._requestTask = task;\n      };\n\n      options.metadata = this._metadata;\n      options.tags = this._tags;\n\n      var controller = _CoreManager.default.getFileController();\n\n      if (!this._previousSave) {\n        if (this._source.format === 'file') {\n          this._previousSave = controller.saveFile(this._name, this._source, options).then(function (res) {\n            _this2._name = res.name;\n            _this2._url = res.url;\n            _this2._hash = res.hash;\n            _this2._ipfs = res.ipfs;\n            _this2._data = null;\n            _this2._requestTask = null;\n            return _this2;\n          });\n        } else if (this._source.format === 'uri') {\n          this._previousSave = controller.download(this._source.uri, options).then(function (result) {\n            if (!(result && result.base64)) {\n              return {};\n            }\n\n            var newSource = {\n              format: 'base64',\n              base64: result.base64,\n              type: result.contentType\n            };\n            _this2._data = result.base64;\n            _this2._requestTask = null;\n            return controller.saveBase64(_this2._name, newSource, options);\n          }).then(function (res) {\n            _this2._name = res.name;\n            _this2._url = res.url;\n            _this2._hash = res.hash;\n            _this2._ipfs = res.ipfs;\n            _this2._requestTask = null;\n            return _this2;\n          });\n        } else {\n          this._previousSave = controller.saveBase64(this._name, this._source, options).then(function (res) {\n            _this2._name = res.name;\n            _this2._url = res.url;\n            _this2._hash = res.hash;\n            _this2._ipfs = res.ipfs;\n            _this2._requestTask = null;\n            return _this2;\n          });\n        }\n      }\n\n      if (this._previousSave) {\n        return this._previousSave;\n      }\n    }\n  }, {\n    key: \"saveIPFS\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    ) {\n      return this.save(_objectSpread(_objectSpread({}, options), {}, {\n        ipfs: true\n      }));\n    }\n    /**\n     * Aborts the request if it has already been sent.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function () {\n      if (this._requestTask && typeof this._requestTask.abort === 'function') {\n        this._requestTask.abort();\n      }\n\n      this._requestTask = null;\n    }\n    /**\n     * Deletes the file from the Parse cloud.\n     * In Cloud Code and Node only with Master Key.\n     *\n     * @param {object} options\n     *  * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     * <pre>\n     * @returns {Promise} Promise that is resolved when the delete finishes.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function () {\n      var _this3 = this;\n\n      var options\n      /*:: ?: FullOptions*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (!this._name) {\n        throw new ParseError(ParseError.FILE_DELETE_UNNAMED_ERROR, 'Cannot delete an unnamed file.');\n      }\n\n      var destroyOptions = {\n        useMasterKey: true\n      };\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n\n      var controller = _CoreManager.default.getFileController();\n\n      return controller.deleteFile(this._name, destroyOptions).then(function () {\n        _this3._data = null;\n        _this3._requestTask = null;\n        return _this3;\n      });\n    }\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: { name: ?string, url: ?string }*/\n    {\n      return {\n        __type: 'File',\n        name: this._name,\n        url: this._url,\n        ipfs: this._ipfs,\n        hash: this._hash\n      };\n    }\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: mixed*/\n    )\n    /*: boolean*/\n    {\n      if (this === other) {\n        return true;\n      } // Unsaved Files are never equal, since they will be saved to different URLs\n\n\n      return other instanceof ParseFile && this.name() === other.name() && this.url() === other.url() && typeof this.url() !== 'undefined';\n    }\n    /**\n     * Sets metadata to be saved with file object. Overwrites existing metadata\n     *\n     * @param {object} metadata Key value pairs to be stored with file object\n     */\n\n  }, {\n    key: \"setMetadata\",\n    value: function (metadata\n    /*: any*/\n    ) {\n      var _this4 = this;\n\n      if (metadata && (0, _typeof2.default)(metadata) === 'object') {\n        var _context2;\n\n        (0, _forEach.default)(_context2 = (0, _keys.default)(metadata)).call(_context2, function (key) {\n          _this4.addMetadata(key, metadata[key]);\n        });\n      }\n    }\n    /**\n     * Sets metadata to be saved with file object. Adds to existing metadata.\n     *\n     * @param {string} key key to store the metadata\n     * @param {*} value metadata\n     */\n\n  }, {\n    key: \"addMetadata\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: any*/\n    ) {\n      if (typeof key === 'string') {\n        this._metadata[key] = value;\n      }\n    }\n    /**\n     * Sets tags to be saved with file object. Overwrites existing tags\n     *\n     * @param {object} tags Key value pairs to be stored with file object\n     */\n\n  }, {\n    key: \"setTags\",\n    value: function (tags\n    /*: any*/\n    ) {\n      var _this5 = this;\n\n      if (tags && (0, _typeof2.default)(tags) === 'object') {\n        var _context3;\n\n        (0, _forEach.default)(_context3 = (0, _keys.default)(tags)).call(_context3, function (key) {\n          _this5.addTag(key, tags[key]);\n        });\n      }\n    }\n    /**\n     * Sets tags to be saved with file object. Adds to existing tags.\n     *\n     * @param {string} key key to store tags\n     * @param {*} value tag\n     */\n\n  }, {\n    key: \"addTag\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: string*/\n    ) {\n      if (typeof key === 'string') {\n        this._tags[key] = value;\n      }\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function (obj)\n    /*: ParseFile*/\n    {\n      if (obj.__type !== 'File') {\n        throw new TypeError('JSON object does not represent a ParseFile');\n      }\n\n      var file = new ParseFile(obj.name);\n      file._url = obj.url;\n      file._hash = obj.hash;\n      file._ipfs = obj.ipfs;\n      return file;\n    }\n  }, {\n    key: \"encodeBase64\",\n    value: function (bytes\n    /*: Array<number>*/\n    )\n    /*: string*/\n    {\n      return (0, _ParseFileEncode.encodeBase64)(bytes);\n    }\n  }]);\n  return ParseFile;\n}();\n\n_CoreManager.default.setFileController(require('./ParseFileController.default'));\n\nvar _default = ParseFile;\nexports.default = _default;\nexports.b64Digit = _ParseFileEncode.b64Digit;"]},"metadata":{},"sourceType":"script"}