{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\"; // #region API Keys\n\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\n\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\n\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\n\nfunction getEmbedHost() {\n  return embedHost;\n}\n\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\n\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\n\nfunction getAPIKey() {\n  return apiKey;\n} // #endregion\n\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\n\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\n\nfunction debugLogResponse(response) {\n  log.info(\"Response: \".concat(response.status, \" \").concat(response.statusText));\n  log.info(\"Url: \".concat(response.url));\n}\n\nconst promiseTimeout = (ms, promise) => {\n  const timeout = new Promise((resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(\"Timed out in \".concat(ms, \"ms\")));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\n\nconst get = async function (url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {}\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"GET\"\n  });\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\n\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  return promiseTimeout(customOptions.timeout || 60000, fetch(url, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    debugLogResponse(response);\n    throw response;\n  }));\n};\n\nconst patch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"PATCH\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\n\nconst remove = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"DELETE\"\n  });\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\n\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\n\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\n\nexport { clearAPIKey, clearEmbedHost, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, remove, setAPIKey, setEmbedHost, setLogLevel };","map":{"version":3,"sources":["../src/index.ts"],"names":["log","logLevel","levels","apiKey","embedHost","gatewayAuthHeader","gatewayEmbedHostHeader","setEmbedHost","embedHost_","clearEmbedHost","getEmbedHost","setAPIKey","apiKey_","clearAPIKey","getAPIKey","setLogLevel","level","headers","response","promiseTimeout","timeout","id","setTimeout","clearTimeout","reject","Promise","get","options_","customOptions","defaultOptions","mode","getApiKeyHeaders","options","merge","method","fetch","debugLogResponse","post","data","JSON","patch","remove","generateJsonRPCObject","jsonrpc","params","parameters","promiseRace"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport logLevel, { levels } from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\"; // #region API Keys\n\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nfunction setEmbedHost(embedHost_) {\n  embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n  embedHost = \"\";\n}\nfunction getEmbedHost() {\n  return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n  apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n  apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n  return apiKey;\n} // #endregion\n\nfunction setLogLevel(level) {\n  log.setLevel(level);\n}\n\nfunction getApiKeyHeaders() {\n  const headers = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\n\nfunction debugLogResponse(response) {\n  log.info(\"Response: \".concat(response.status, \" \").concat(response.statusText));\n  log.info(\"Url: \".concat(response.url));\n}\n\nconst promiseTimeout = (ms, promise) => {\n  const timeout = new Promise((resolve, reject) => {\n    const id = setTimeout(() => {\n      clearTimeout(id);\n      reject(new Error(\"Timed out in \".concat(ms, \"ms\")));\n    }, ms);\n  });\n  return Promise.race([promise, timeout]);\n};\nconst get = async function (url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {}\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"GET\"\n  });\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst post = function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  };\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"POST\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  return promiseTimeout(customOptions.timeout || 60000, fetch(url, options).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    debugLogResponse(response);\n    throw response;\n  }));\n};\nconst patch = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"PATCH\"\n  }); // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst remove = async function (url) {\n  let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const defaultOptions = {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }; // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n  }\n\n  const options = merge(defaultOptions, options_, {\n    method: \"DELETE\"\n  });\n\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data; // If url encoded data, this must not be the content type\n\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  debugLogResponse(response);\n  throw response;\n};\nconst generateJsonRPCObject = (method, parameters) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters\n});\nconst promiseRace = function (url, options) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n  return Promise.race([get(url, options), new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(\"timed out\"));\n    }, timeout);\n  })]);\n};\n\nexport { clearAPIKey, clearEmbedHost, gatewayAuthHeader, gatewayEmbedHostHeader, generateJsonRPCObject, get, getAPIKey, getEmbedHost, patch, post, promiseRace, promiseTimeout, remove, setAPIKey, setEmbedHost, setLogLevel };\n//# sourceMappingURL=httpHelpers.esm.js.map\n"]},"metadata":{},"sourceType":"module"}