{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, ADAPTER_EVENTS, getChainConfig, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport { PhantomInjectedProvider } from '@web3auth/solana-provider';\nimport log from 'loglevel';\n\nfunction poll(callback, interval, count) {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done) poll(callback, interval, count - 1).then(res => {\n          resolve(res);\n          return res;\n        }).catch(err => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\n\nconst detectProvider = async function () {\n  var _window$solana;\n\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    interval: 1000,\n    count: 3\n  };\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!((_window$solana = window.solana) !== null && _window$solana !== void 0 && _window$solana.isPhantom);\n\n  if (isPhantomAvailable) {\n    return window.solana;\n  }\n\n  const isAvailable = await poll(() => {\n    var _window$solana2;\n\n    return (_window$solana2 = window.solana) === null || _window$solana2 === void 0 ? void 0 : _window$solana2.isPhantom;\n  }, options.interval, options.count);\n  if (isAvailable) return window.solana;\n  return null;\n};\n\nclass PhantomAdapter extends BaseAdapter {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.PHANTOM);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"_wallet\", null);\n\n    _defineProperty(this, \"phantomProvider\", null);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    _defineProperty(this, \"_onDisconnect\", () => {\n      if (this._wallet) {\n        this._wallet.off(\"disconnect\", this._onDisconnect);\n\n        this.rehydrated = false; // ready to be connected again only if it was previously connected and not cleaned up\n\n        this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n        this.emit(ADAPTER_EVENTS.DISCONNECTED);\n      }\n    });\n\n    this.chainConfig = options.chainConfig || null;\n  }\n\n  get isWalletConnected() {\n    var _this$_wallet;\n\n    return !!((_this$_wallet = this._wallet) !== null && _this$_wallet !== void 0 && _this$_wallet.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider() {\n    var _this$phantomProvider;\n\n    return ((_this$phantomProvider = this.phantomProvider) === null || _this$phantomProvider === void 0 ? void 0 : _this$phantomProvider.provider) || null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  setAdapterSettings(_) {}\n\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n    }\n\n    this._wallet = await detectProvider({\n      interval: 500,\n      count: 3\n    });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect() {\n    var _this = this;\n\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, {\n        adapter: WALLET_ADAPTERS.PHANTOM\n      });\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n\n        try {\n          await new Promise((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet);\n              resolve(this.provider);\n            };\n\n            if (!this._wallet) return reject(WalletInitializationError.notInstalled());\n\n            this._wallet.once(\"connect\", connect); // Raise an issue on phantom that if window is closed, disconnect event is not fired\n\n\n            this._wallet._handleDisconnect = function () {\n              reject(WalletInitializationError.windowClosed());\n\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n\n              return handleDisconnect.apply(_this._wallet, args);\n            };\n\n            this._wallet.connect().catch(reason => {\n              reject(reason);\n            });\n          });\n        } catch (error) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError(error === null || error === void 0 ? void 0 : error.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n    try {\n      var _this$_wallet2;\n\n      await ((_this$_wallet2 = this._wallet) === null || _this$_wallet2 === void 0 ? void 0 : _this$_wallet2.disconnect());\n\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError(error === null || error === void 0 ? void 0 : error.message));\n    }\n  }\n\n  async getUserInfo() {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async connectWithProvider(injectedProvider) {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, {\n      adapter: WALLET_ADAPTERS.PHANTOM,\n      reconnected: this.rehydrated\n    });\n    return this.provider;\n  }\n\n}\n\nexport { PhantomAdapter };","map":{"version":3,"sources":["../src/utils.ts","../src/phantomAdapter.ts"],"names":["poll","callback","interval","count","setTimeout","done","resolve","res","err","reject","detectProvider","options","isPhantomAvailable","window","isAvailable","PhantomAdapter","BaseAdapter","WALLET_ADAPTERS","PHANTOM","ADAPTER_NAMESPACES","SOLANA","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","constructor","isWalletConnected","provider","setAdapterSettings","init","getChainConfig","WalletInitializationError","config","chainConfig","ADAPTER_EVENTS","log","connect","adapter","handleDisconnect","args","reason","error","WalletLoginError","disconnect","cleanup","getUserInfo","connectWithProvider","reconnected","rehydrated"],"mappings":";;;;;SAEgBA,I,CAAKC,Q,EAA4CC,Q,EAAkBC,K,EAAAA;AACjF,SAAO,IAAA,OAAA,CAAY,CAAA,OAAA,EAAA,MAAA,KAAA;AACjB,QAAIA,KAAK,GAAT,CAAA,EAAe;AACbC,MAAAA,UAAU,CAAC,YAAA;AACT,cAAMC,IAAI,GAAG,MAAMJ,QAAnB,EAAA;AACA,YAAA,IAAA,EAAUK,OAAO,CAAPA,IAAO,CAAPA;AACV,YAAI,CAAJ,IAAA,EACE,IAAI,CAAA,QAAA,EAAA,QAAA,EAAqBH,KAAK,GAA9B,CAAI,CAAJ,CAAA,IAAA,CACSI,GAAD,IAAA;AACJD,UAAAA,OAAO,CAAPA,GAAO,CAAPA;AACA,iBAAA,GAAA;AAHJ,SAAA,EAAA,KAAA,CAKUE,GAAD,IAASC,MAAM,CALxB,GAKwB,CALxB;AAJM,OAAA,EAAVL,QAAU,CAAVA;AADF,KAAA,MAYO;AACLE,MAAAA,OAAO,CAAPA,KAAO,CAAPA;AACD;AAfH,GAAO,CAAP;AAiBD;;AAEM,MAAMI,cAAc,GAAG,kBAAA;;;MAC5BC,OAAAA,GAAAA,SAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAAA,SAAAA,CAAAA,CAAAA,CAAAA,KAAAA,SAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAA+C;AAAET,IAAAA,QAAQ,EAAV,IAAA;AAAkBC,IAAAA,KAAK,EAAE;AAAzB,G;AAE/C,QAAMS,kBAAkB,GAAG,OAAA,MAAA,KAAA,WAAA,IAAiC,CAAC,EAAA,CAAA,cAAA,GAAEC,MAAc,CAAhB,MAAA,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,IAAEA,cAAAA,CAA/D,SAA6D,CAA7D;;AACA,MAAA,kBAAA,EAAwB;AACtB,WAAQA,MAAc,CAAtB,MAAA;AACD;;AACD,QAAMC,WAAW,GAAG,MAAMd,IAAI,CAAC,MAAA;AAAA,QAAA,eAAA;;AAAA,WAAA,CAAA,eAAA,GAAOa,MAAc,CAArB,MAAA,MAAA,IAAA,IAAA,eAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAOA,eAAAA,CAAP,SAAA;AAAD,GAAA,EAA0CF,OAAO,CAAjD,QAAA,EAA4DA,OAAO,CAAjG,KAA8B,CAA9B;AACA,MAAA,WAAA,EAAiB,OAAQE,MAAc,CAAtB,MAAA;AACjB,SAAA,IAAA;AATK,CAAA;;MCQME,c,SAAuBC,W,CAAAA;AAiBlCU,EAAAA,WAAAA,GAAAA;QAAYf,OAAAA,GAAAA,SAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAAA,SAAAA,CAAAA,CAAAA,CAAAA,KAAAA,SAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAAiC,E;AAC3C;;kCAjBsBM,eAAe,CAACC,O;;8CAEUC,kBAAkB,CAACC,M;;mDAEhBC,gBAAgB,CAACD,M;;kCAE/BE,gBAAgB,CAACC,Q;;oCAEnBC,cAAc,CAACC,S;;qCAEJ,I;;6CAEU,I;;wCAErC,K;;2CA0HG,MAAA;AACtB,UAAI,KAAJ,OAAA,EAAkB;AAChB,aAAA,OAAA,CAAA,GAAA,CAAA,YAAA,EAA+B,KAA/B,aAAA;;AACA,aAAA,UAAA,GAFgB,KAEhB,CAFgB,CAAA;;AAIhB,aAAA,MAAA,GAAc,KAAA,MAAA,KAAgBD,cAAc,CAA9B,SAAA,GAA2CA,cAAc,CAAzD,KAAA,GAAkEA,cAAc,CAA9F,SAAA;AACA,aAAA,IAAA,CAAUW,cAAc,CAAxB,YAAA;AACD;AACF,K;;AA9HC,SAAA,WAAA,GAAmBxB,OAAO,CAAPA,WAAAA,IAAnB,IAAA;AACD;;AAEoB,MAAjBgB,iBAAiB,GAAA;;;AACnB,WAAO,CAAC,EAAE,CAAA,aAAA,GAAA,KAAA,OAAA,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,IAAA,aAAA,CAAA,WAAA,IAA6B,KAAA,MAAA,KAAgBH,cAAc,CAArE,SAAQ,CAAR;AACD;;AAEW,MAARI,QAAQ,GAAA;;;AACV,WAAO,CAAA,CAAA,qBAAA,GAAA,KAAA,eAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,QAAA,KAAP,IAAA;AACD;;AAEW,MAARA,QAAQ,CAAA,CAAA,EAAA;AACV,UAAM,IAAA,KAAA,CAAN,iBAAM,CAAN;AACD;;AAEDC,EAAAA,kBAAkB,CAAA,CAAA,EAAA,CAAA;;AAER,QAAJC,IAAI,CAAA,OAAA,EAAA;AACR,UAAA,+BAAA,GADQ,CACR;;AAEA,QAAI,CAAC,KAAL,WAAA,EAAuB;AACrB,WAAA,WAAA,GAAmBC,cAAc,CAACV,gBAAgB,CAAjB,MAAA,EAAjC,KAAiC,CAAjC;AACD;;AACD,SAAA,OAAA,GAAe,MAAMX,cAAc,CAAC;AAAER,MAAAA,QAAQ,EAAV,GAAA;AAAiBC,MAAAA,KAAK,EAAE;AAAxB,KAAD,CAAnC;AACA,QAAI,CAAC,KAAL,OAAA,EAAmB,MAAM6B,yBAAyB,CAA/B,YAAMA,EAAN;AACnB,SAAA,eAAA,GAAuB,IAAA,uBAAA,CAA4B;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,WAAW,EAAE,KAAKA;AAApB;AAAV,KAA5B,CAAvB;AACA,SAAA,MAAA,GAAcV,cAAc,CAA5B,KAAA;AACA,SAAA,IAAA,CAAUW,cAAc,CAAxB,KAAA,EAAgClB,eAAe,CAA/C,OAAA;;AAEA,QAAI;AACF,UAAIN,OAAO,CAAX,WAAA,EAAyB;AACvB,aAAA,UAAA,GAAA,IAAA;AACA,cAAM,KAAN,OAAM,EAAN;AACD;AAJH,KAAA,CAKE,OAAA,KAAA,EAAc;AACdyB,MAAAA,GAAG,CAAHA,KAAAA,CAAAA,gDAAAA,EAAAA,KAAAA;AACA,WAAA,IAAA,CAAA,SAAA,EAAA,KAAA;AACD;AACF;;AAEY,QAAPC,OAAO,GAAA;;;AACX,QAAI;AACF,YAAA,2BAAA;AACA,WAAA,MAAA,GAAcb,cAAc,CAA5B,UAAA;AACA,WAAA,IAAA,CAAUW,cAAc,CAAxB,UAAA,EAAqC;AAAEG,QAAAA,OAAO,EAAErB,eAAe,CAACC;AAA3B,OAArC;AAEA,UAAI,CAAC,KAAL,OAAA,EAAmB,MAAMc,yBAAyB,CAA/B,YAAMA,EAAN;;AACnB,UAAI,CAAC,KAAA,OAAA,CAAL,WAAA,EAA+B;AAC7B,cAAMO,gBAAgB,GAAG,KAAA,OAAA,CAAzB,iBAAA;;AACA,YAAI;AACF,gBAAM,IAAA,OAAA,CAA6C,CAAA,OAAA,EAAA,MAAA,KAAA;AACjD,kBAAMF,OAAO,GAAG,YAAA;AACd,oBAAM,KAAA,mBAAA,CAAyB,KAA/B,OAAM,CAAN;AACA/B,cAAAA,OAAO,CAAC,KAARA,QAAO,CAAPA;AAFF,aAAA;;AAIA,gBAAI,CAAC,KAAL,OAAA,EAAmB,OAAOG,MAAM,CAACuB,yBAAyB,CAAvC,YAAcA,EAAD,CAAb;;AACnB,iBAAA,OAAA,CAAA,IAAA,CAAA,SAAA,EAAA,OAAA,EANiD,CAMjD;;;AAEC,iBAAA,OAAA,CAAA,iBAAA,GAA4D,YAAA;AAC3DvB,cAAAA,MAAM,CAACuB,yBAAyB,CAAhCvB,YAAOuB,EAAD,CAANvB;;gDAD+D+B,IAAAA,GAAAA,IAAAA,KAAAA,CAAAA,IAAAA,C,EAAAA,IAAAA,GAAAA,C,EAAAA,IAAAA,GAAAA,I,EAAAA,IAAAA,E,EAAAA;AAAAA,gBAAAA,IAAAA,CAAAA,IAAAA,CAAAA,GAAAA,SAAAA,CAAAA,IAAAA,CAAAA;;;AAE/D,qBAAOD,gBAAgB,CAAhBA,KAAAA,CAAuB,KAAI,CAA3BA,OAAAA,EAAP,IAAOA,CAAP;AAFD,aAAA;;AAKD,iBAAA,OAAA,CAAA,OAAA,GAAA,KAAA,CAA8BE,MAAD,IAAA;AAC3BhC,cAAAA,MAAM,CAANA,MAAM,CAANA;AADF,aAAA;AAbF,WAAM,CAAN;AADF,SAAA,CAkBE,OAAA,KAAA,EAAuB;AACvB,cAAIiC,KAAK,YAAT,aAAA,EAAoC,MAAA,KAAA;AACpC,gBAAMC,gBAAgB,CAAhBA,eAAAA,CAAkCD,KAAlCC,KAAAA,IAAkCD,IAAAA,KAAlCC,KAAAA,KAAAA,CAAkCD,GAAlCC,KAAAA,CAAkCD,GAAAA,KAAe,CAAvD,OAAMC,CAAN;AApBF,SAAA,SAqBU;AACR,eAAA,OAAA,CAAA,iBAAA,GAAA,gBAAA;AACD;AAzBH,OAAA,MA0BO;AACL,cAAM,KAAA,mBAAA,CAAyB,KAA/B,OAAM,CAAN;AACD;;AAED,UAAI,CAAC,KAAA,OAAA,CAAL,SAAA,EAA6B,MAAMA,gBAAgB,CAAtB,eAAMA,EAAN;;AAC7B,WAAA,OAAA,CAAA,EAAA,CAAA,YAAA,EAA8B,KAA9B,aAAA;;AAEA,aAAO,KAAP,QAAA;AAvCF,KAAA,CAwCE,OAAA,KAAA,EAAuB;AACvB;AACA,WAAA,MAAA,GAAcnB,cAAc,CAA5B,KAAA;AACA,WAAA,UAAA,GAAA,KAAA;AACA,WAAA,IAAA,CAAUW,cAAc,CAAxB,OAAA,EAAA,KAAA;AACA,YAAA,KAAA;AACD;AACF;;AAEe,QAAVS,UAAU,GAAA;QAACjC,OAAAA,GAAAA,SAAAA,CAAAA,MAAAA,GAAAA,CAAAA,IAAAA,SAAAA,CAAAA,CAAAA,CAAAA,KAAAA,SAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA,GAAgC;AAAEkC,MAAAA,OAAO,EAAE;AAAX,K;AAC/C,QAAI,CAAC,KAAL,iBAAA,EAA6B,MAAMF,gBAAgB,CAAhBA,iBAAAA,CAAN,2BAAMA,CAAN;;AAC7B,QAAI;AAAA,UAAA,cAAA;;AACF,aAAA,CAAA,cAAA,GAAM,KAAN,OAAA,MAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAM,cAAA,CAAN,UAAM,EAAN;;AACA,UAAIhC,OAAO,CAAX,OAAA,EAAqB;AACnB,aAAA,MAAA,GAAca,cAAc,CAA5B,SAAA;AACA,aAAA,eAAA,GAAA,IAAA;AACA,aAAA,OAAA,GAAA,IAAA;AACD;;AACD,WAAA,IAAA,CAAUW,cAAc,CAAxB,YAAA;AAPF,KAAA,CAQE,OAAA,KAAA,EAAuB;AACvB,WAAA,IAAA,CAAUA,cAAc,CAAxB,OAAA,EAAkCQ,gBAAgB,CAAhBA,kBAAAA,CAAqCD,KAArCC,KAAAA,IAAqCD,IAAAA,KAArCC,KAAAA,KAAAA,CAAqCD,GAArCC,KAAAA,CAAqCD,GAAAA,KAAe,CAAtF,OAAkCC,CAAlC;AACD;AACF;;AAEgB,QAAXG,WAAW,GAAA;AACf,QAAI,CAAC,KAAL,iBAAA,EAA6B,MAAMH,gBAAgB,CAAhBA,iBAAAA,CAAN,uDAAMA,CAAN;AAC7B,WAAA,EAAA;AACD;;AAEgC,QAAnBI,mBAAmB,CAAA,gBAAA,EAAA;AAC/B,QAAI,CAAC,KAAL,eAAA,EAA2B,MAAMJ,gBAAgB,CAAhBA,eAAAA,CAAN,qBAAMA,CAAN;AAC3B,UAAM,KAAA,eAAA,CAAA,aAAA,CAAN,gBAAM,CAAN;AACA,SAAA,MAAA,GAAcnB,cAAc,CAA5B,SAAA;AACA,SAAA,IAAA,CAAUW,cAAc,CAAxB,SAAA,EAAoC;AAAEG,MAAAA,OAAO,EAAErB,eAAe,CAA1B,OAAA;AAAoC+B,MAAAA,WAAW,EAAE,KAAKC;AAAtD,KAApC;AACA,WAAO,KAAP,QAAA;AACD;;AAvIiCjC","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, ADAPTER_EVENTS, getChainConfig, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport { PhantomInjectedProvider } from '@web3auth/solana-provider';\nimport log from 'loglevel';\n\nfunction poll(callback, interval, count) {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done) poll(callback, interval, count - 1).then(res => {\n          resolve(res);\n          return res;\n        }).catch(err => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\nconst detectProvider = async function () {\n  var _window$solana;\n\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    interval: 1000,\n    count: 3\n  };\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!((_window$solana = window.solana) !== null && _window$solana !== void 0 && _window$solana.isPhantom);\n\n  if (isPhantomAvailable) {\n    return window.solana;\n  }\n\n  const isAvailable = await poll(() => {\n    var _window$solana2;\n\n    return (_window$solana2 = window.solana) === null || _window$solana2 === void 0 ? void 0 : _window$solana2.isPhantom;\n  }, options.interval, options.count);\n  if (isAvailable) return window.solana;\n  return null;\n};\n\nclass PhantomAdapter extends BaseAdapter {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.PHANTOM);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"_wallet\", null);\n\n    _defineProperty(this, \"phantomProvider\", null);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    _defineProperty(this, \"_onDisconnect\", () => {\n      if (this._wallet) {\n        this._wallet.off(\"disconnect\", this._onDisconnect);\n\n        this.rehydrated = false; // ready to be connected again only if it was previously connected and not cleaned up\n\n        this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n        this.emit(ADAPTER_EVENTS.DISCONNECTED);\n      }\n    });\n\n    this.chainConfig = options.chainConfig || null;\n  }\n\n  get isWalletConnected() {\n    var _this$_wallet;\n\n    return !!((_this$_wallet = this._wallet) !== null && _this$_wallet !== void 0 && _this$_wallet.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider() {\n    var _this$phantomProvider;\n\n    return ((_this$phantomProvider = this.phantomProvider) === null || _this$phantomProvider === void 0 ? void 0 : _this$phantomProvider.provider) || null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  setAdapterSettings(_) {}\n\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n    }\n\n    this._wallet = await detectProvider({\n      interval: 500,\n      count: 3\n    });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect() {\n    var _this = this;\n\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, {\n        adapter: WALLET_ADAPTERS.PHANTOM\n      });\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n\n        try {\n          await new Promise((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet);\n              resolve(this.provider);\n            };\n\n            if (!this._wallet) return reject(WalletInitializationError.notInstalled());\n\n            this._wallet.once(\"connect\", connect); // Raise an issue on phantom that if window is closed, disconnect event is not fired\n\n\n            this._wallet._handleDisconnect = function () {\n              reject(WalletInitializationError.windowClosed());\n\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n\n              return handleDisconnect.apply(_this._wallet, args);\n            };\n\n            this._wallet.connect().catch(reason => {\n              reject(reason);\n            });\n          });\n        } catch (error) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError(error === null || error === void 0 ? void 0 : error.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n    try {\n      var _this$_wallet2;\n\n      await ((_this$_wallet2 = this._wallet) === null || _this$_wallet2 === void 0 ? void 0 : _this$_wallet2.disconnect());\n\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError(error === null || error === void 0 ? void 0 : error.message));\n    }\n  }\n\n  async getUserInfo() {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async connectWithProvider(injectedProvider) {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, {\n      adapter: WALLET_ADAPTERS.PHANTOM,\n      reconnected: this.rehydrated\n    });\n    return this.provider;\n  }\n\n}\n\nexport { PhantomAdapter };\n//# sourceMappingURL=phantomAdapter.esm.js.map\n"]},"metadata":{},"sourceType":"module"}