{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ObservableStore = void 0;\n\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\n\nclass ObservableStore extends safe_event_emitter_1.default {\n  constructor(initState) {\n    super();\n\n    if (initState) {\n      this._state = initState;\n    } else {\n      // Typecast/default state: Preserve existing behavior\n      this._state = {};\n    }\n  } // wrapper around internal getState\n\n\n  getState() {\n    return this._getState();\n  } // wrapper around internal putState\n\n\n  putState(newState) {\n    this._putState(newState);\n\n    this.emit('update', newState);\n  }\n\n  updateState(partialState) {\n    // if non-null object, merge\n    if (partialState && typeof partialState === 'object') {\n      const state = this.getState();\n      this.putState(Object.assign(Object.assign({}, state), partialState)); // if not object, use new value\n    } else {\n      this.putState(partialState);\n    }\n  } // subscribe to changes\n\n\n  subscribe(handler) {\n    this.on('update', handler);\n  } // unsubscribe to changes\n\n\n  unsubscribe(handler) {\n    this.removeListener('update', handler);\n  } //\n  // private\n  //\n  // read from persistence\n\n\n  _getState() {\n    return this._state;\n  } // write to persistence\n\n\n  _putState(newState) {\n    this._state = newState;\n  }\n\n}\n\nexports.ObservableStore = ObservableStore;","map":{"version":3,"sources":["../src/ObservableStore.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,oBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,8BAAA,CAAA,CAAA;;AAEA,MAAa,eAAb,SAAwC,oBAAA,CAAA,OAAxC,CAAwD;AAGtD,EAAA,WAAA,CAAY,SAAZ,EAAwB;AACtB;;AACA,QAAI,SAAJ,EAAe;AACb,WAAK,MAAL,GAAc,SAAd;AACD,KAFD,MAEO;AACL;AACA,WAAK,MAAL,GAAc,EAAd;AACD;AACF,GAXqD,CAatD;;;AACA,EAAA,QAAQ,GAAA;AACN,WAAO,KAAK,SAAL,EAAP;AACD,GAhBqD,CAkBtD;;;AACA,EAAA,QAAQ,CAAC,QAAD,EAAY;AAClB,SAAK,SAAL,CAAe,QAAf;;AACA,SAAK,IAAL,CAAU,QAAV,EAAoB,QAApB;AACD;;AAED,EAAA,WAAW,CAAC,YAAD,EAAyB;AAClC;AACA,QAAI,YAAY,IAAI,OAAO,YAAP,KAAwB,QAA5C,EAAsD;AACpD,YAAM,KAAK,GAAG,KAAK,QAAL,EAAd;AACA,WAAK,QAAL,CAAa,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,KAAN,CAAA,EAAgB,YAAhB,CAAb,EAFoD,CAGpD;AACD,KAJD,MAIO;AACL,WAAK,QAAL,CAAc,YAAd;AACD;AACF,GAjCqD,CAmCtD;;;AACA,EAAA,SAAS,CAAC,OAAD,EAA4B;AACnC,SAAK,EAAL,CAAQ,QAAR,EAAkB,OAAlB;AACD,GAtCqD,CAwCtD;;;AACA,EAAA,WAAW,CAAC,OAAD,EAA4B;AACrC,SAAK,cAAL,CAAoB,QAApB,EAA8B,OAA9B;AACD,GA3CqD,CA6CtD;AACA;AACA;AAEA;;;AACU,EAAA,SAAS,GAAA;AACjB,WAAO,KAAK,MAAZ;AACD,GApDqD,CAsDtD;;;AACU,EAAA,SAAS,CAAC,QAAD,EAAY;AAC7B,SAAK,MAAL,GAAc,QAAd;AACD;;AAzDqD;;AAAxD,OAAA,CAAA,eAAA,GAAA,eAAA","sourcesContent":["import SafeEventEmitter from '@metamask/safe-event-emitter';\n\nexport class ObservableStore<T> extends SafeEventEmitter {\n  private _state: T;\n\n  constructor(initState: T) {\n    super();\n    if (initState) {\n      this._state = initState;\n    } else {\n      // Typecast/default state: Preserve existing behavior\n      this._state = {} as unknown as T;\n    }\n  }\n\n  // wrapper around internal getState\n  getState(): T {\n    return this._getState();\n  }\n\n  // wrapper around internal putState\n  putState(newState: T): void {\n    this._putState(newState);\n    this.emit('update', newState);\n  }\n\n  updateState(partialState: Partial<T>): void {\n    // if non-null object, merge\n    if (partialState && typeof partialState === 'object') {\n      const state = this.getState();\n      this.putState({ ...state, ...partialState });\n      // if not object, use new value\n    } else {\n      this.putState(partialState);\n    }\n  }\n\n  // subscribe to changes\n  subscribe(handler: (state: T) => void): void {\n    this.on('update', handler);\n  }\n\n  // unsubscribe to changes\n  unsubscribe(handler: (state: T) => void): void {\n    this.removeListener('update', handler);\n  }\n\n  //\n  // private\n  //\n\n  // read from persistence\n  protected _getState(): T {\n    return this._state;\n  }\n\n  // write to persistence\n  protected _putState(newState: T): void {\n    this._state = newState;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}