{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.recoverTypedSignature = exports.signTypedData = exports.typedSignatureHash = exports.TypedDataUtils = exports.TYPED_MESSAGE_SCHEMA = exports.SignTypedDataVersion = void 0;\n\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nconst ethereumjs_abi_1 = require(\"ethereumjs-abi\");\n\nconst utils_1 = require(\"./utils\");\n/**\n * Represents the version of `signTypedData` being used.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\n *\n * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\n */\n\n\nvar SignTypedDataVersion;\n\n(function (SignTypedDataVersion) {\n  SignTypedDataVersion[\"V1\"] = \"V1\";\n  SignTypedDataVersion[\"V3\"] = \"V3\";\n  SignTypedDataVersion[\"V4\"] = \"V4\";\n})(SignTypedDataVersion = exports.SignTypedDataVersion || (exports.SignTypedDataVersion = {}));\n\nexports.TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: {\n              type: 'string'\n            },\n            type: {\n              type: 'string',\n              enum: getSolidityTypes()\n            }\n          },\n          required: ['name', 'type']\n        }\n      }\n    },\n    primaryType: {\n      type: 'string'\n    },\n    domain: {\n      type: 'object'\n    },\n    message: {\n      type: 'object'\n    }\n  },\n  required: ['types', 'primaryType', 'domain', 'message']\n};\n/**\n * Get a list of all Solidity types.\n *\n * @returns A list of all Solidity types.\n */\n\nfunction getSolidityTypes() {\n  const types = ['bool', 'address', 'string', 'bytes'];\n  const ints = Array.from(new Array(32)).map((_, index) => `int${(index + 1) * 8}`);\n  const uints = Array.from(new Array(32)).map((_, index) => `uint${(index + 1) * 8}`);\n  const bytes = Array.from(new Array(32)).map((_, index) => `bytes${index + 1}`);\n  return [...types, ...ints, ...uints, ...bytes];\n}\n/**\n * Validate that the given value is a valid version string.\n *\n * @param version - The version value to validate.\n * @param allowedVersions - A list of allowed versions. If omitted, all versions are assumed to be\n * allowed.\n */\n\n\nfunction validateVersion(version, allowedVersions) {\n  if (!Object.keys(SignTypedDataVersion).includes(version)) {\n    throw new Error(`Invalid version: '${version}'`);\n  } else if (allowedVersions && !allowedVersions.includes(version)) {\n    throw new Error(`SignTypedDataVersion not allowed: '${version}'. Allowed versions are: ${allowedVersions.join(', ')}`);\n  }\n}\n/**\n * Encode a single field.\n *\n * @param types - All type definitions.\n * @param name - The name of the field to encode.\n * @param type - The type of the field being encoded.\n * @param value - The value to encode.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns Encoded representation of the field.\n */\n\n\nfunction encodeField(types, name, type, value, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  if (types[type] !== undefined) {\n    return ['bytes32', version === SignTypedDataVersion.V4 && value == null // eslint-disable-line no-eq-null\n    ? '0x0000000000000000000000000000000000000000000000000000000000000000' : ethereumjs_util_1.keccak(encodeData(type, value, types, version))];\n  }\n\n  if (value === undefined) {\n    throw new Error(`missing value for field ${name} of type ${type}`);\n  }\n\n  if (type === 'bytes') {\n    return ['bytes32', ethereumjs_util_1.keccak(value)];\n  }\n\n  if (type === 'string') {\n    // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n    if (typeof value === 'string') {\n      value = Buffer.from(value, 'utf8');\n    }\n\n    return ['bytes32', ethereumjs_util_1.keccak(value)];\n  }\n\n  if (type.lastIndexOf(']') === type.length - 1) {\n    if (version === SignTypedDataVersion.V3) {\n      throw new Error('Arrays are unimplemented in encodeData; use V4 extension');\n    }\n\n    const parsedType = type.slice(0, type.lastIndexOf('['));\n    const typeValuePairs = value.map(item => encodeField(types, name, parsedType, item, version));\n    return ['bytes32', ethereumjs_util_1.keccak(ethereumjs_abi_1.rawEncode(typeValuePairs.map(_ref => {\n      let [t] = _ref;\n      return t;\n    }), typeValuePairs.map(_ref2 => {\n      let [, v] = _ref2;\n      return v;\n    })))];\n  }\n\n  return [type, value];\n}\n/**\n * Encodes an object by encoding and concatenating each of its members.\n *\n * @param primaryType - The root type.\n * @param data - The object to encode.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns An encoded representation of an object.\n */\n\n\nfunction encodeData(primaryType, data, types, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  const encodedTypes = ['bytes32'];\n  const encodedValues = [hashType(primaryType, types)];\n\n  for (const field of types[primaryType]) {\n    if (version === SignTypedDataVersion.V3 && data[field.name] === undefined) {\n      continue;\n    }\n\n    const [type, value] = encodeField(types, field.name, field.type, data[field.name], version);\n    encodedTypes.push(type);\n    encodedValues.push(value);\n  }\n\n  return ethereumjs_abi_1.rawEncode(encodedTypes, encodedValues);\n}\n/**\n * Encodes the type of an object by encoding a comma delimited list of its members.\n *\n * @param primaryType - The root type to encode.\n * @param types - Type definitions for all types included in the message.\n * @returns An encoded representation of the primary type.\n */\n\n\nfunction encodeType(primaryType, types) {\n  let result = '';\n  const unsortedDeps = findTypeDependencies(primaryType, types);\n  unsortedDeps.delete(primaryType);\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()];\n\n  for (const type of deps) {\n    const children = types[type];\n\n    if (!children) {\n      throw new Error(`No type definition specified: ${type}`);\n    }\n\n    result += `${type}(${types[type].map(_ref3 => {\n      let {\n        name,\n        type: t\n      } = _ref3;\n      return `${t} ${name}`;\n    }).join(',')})`;\n  }\n\n  return result;\n}\n/**\n * Finds all types within a type definition object.\n *\n * @param primaryType - The root type.\n * @param types - Type definitions for all types included in the message.\n * @param results - The current set of accumulated types.\n * @returns The set of all types found in the type definition.\n */\n\n\nfunction findTypeDependencies(primaryType, types) {\n  let results = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();\n  [primaryType] = primaryType.match(/^\\w*/u);\n\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results;\n  }\n\n  results.add(primaryType);\n\n  for (const field of types[primaryType]) {\n    findTypeDependencies(field.type, types, results);\n  }\n\n  return results;\n}\n/**\n * Hashes an object.\n *\n * @param primaryType - The root type.\n * @param data - The object to hash.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the object.\n */\n\n\nfunction hashStruct(primaryType, data, types, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  return ethereumjs_util_1.keccak(encodeData(primaryType, data, types, version));\n}\n/**\n * Hashes the type of an object.\n *\n * @param primaryType - The root type to hash.\n * @param types - Type definitions for all types included in the message.\n * @returns The hash of the object type.\n */\n\n\nfunction hashType(primaryType, types) {\n  return ethereumjs_util_1.keccak(encodeType(primaryType, types));\n}\n/**\n * Removes properties from a message object that are not defined per EIP-712.\n *\n * @param data - The typed message object.\n * @returns The typed message object with only allowed fields.\n */\n\n\nfunction sanitizeData(data) {\n  const sanitizedData = {};\n\n  for (const key in exports.TYPED_MESSAGE_SCHEMA.properties) {\n    if (data[key]) {\n      sanitizedData[key] = data[key];\n    }\n  }\n\n  if ('types' in sanitizedData) {\n    sanitizedData.types = Object.assign({\n      EIP712Domain: []\n    }, sanitizedData.types);\n  }\n\n  return sanitizedData;\n}\n/**\n * Hash a typed message according to EIP-712. The returned message starts with the EIP-712 prefix,\n * which is \"1901\", followed by the hash of the domain separator, then the data (if any).\n * The result is hashed again and returned.\n *\n * This function does not sign the message. The resulting hash must still be signed to create an\n * EIP-712 signature.\n *\n * @param typedData - The typed message to hash.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the typed message.\n */\n\n\nfunction eip712Hash(typedData, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  const sanitizedData = sanitizeData(typedData);\n  const parts = [Buffer.from('1901', 'hex')];\n  parts.push(hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, version));\n\n  if (sanitizedData.primaryType !== 'EIP712Domain') {\n    parts.push(hashStruct( // TODO: Validate that this is a string, so this type cast can be removed.\n    sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, version));\n  }\n\n  return ethereumjs_util_1.keccak(Buffer.concat(parts));\n}\n/**\n * A collection of utility functions used for signing typed data.\n */\n\n\nexports.TypedDataUtils = {\n  encodeData,\n  encodeType,\n  findTypeDependencies,\n  hashStruct,\n  hashType,\n  sanitizeData,\n  eip712Hash\n};\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The '0x'-prefixed hex encoded hash representing the type of the provided message.\n */\n\nfunction typedSignatureHash(typedData) {\n  const hashBuffer = _typedSignatureHash(typedData);\n\n  return ethereumjs_util_1.bufferToHex(hashBuffer);\n}\n\nexports.typedSignatureHash = typedSignatureHash;\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The hash representing the type of the provided message.\n */\n\nfunction _typedSignatureHash(typedData) {\n  const error = new Error('Expect argument to be non-empty array');\n\n  if (typeof typedData !== 'object' || !('length' in typedData) || !typedData.length) {\n    throw error;\n  }\n\n  const data = typedData.map(function (e) {\n    if (e.type !== 'bytes') {\n      return e.value;\n    }\n\n    return utils_1.legacyToBuffer(e.value);\n  });\n  const types = typedData.map(function (e) {\n    return e.type;\n  });\n  const schema = typedData.map(function (e) {\n    if (!e.name) {\n      throw error;\n    }\n\n    return `${e.type} ${e.name}`;\n  });\n  return ethereumjs_abi_1.soliditySHA3(['bytes32', 'bytes32'], [ethereumjs_abi_1.soliditySHA3(new Array(typedData.length).fill('string'), schema), ethereumjs_abi_1.soliditySHA3(types, data)]);\n}\n/**\n * Sign typed data according to EIP-712. The signing differs based upon the `version`.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), except that arrays and\n * recursive data structures are not supported.\n *\n * V4 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), and includes full support of\n * arrays and recursive data structures.\n *\n * @param options - The signing options.\n * @param options.privateKey - The private key to sign with.\n * @param options.data - The typed data to sign.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex encoded signature.\n */\n\n\nfunction signTypedData(_ref4) {\n  let {\n    privateKey,\n    data,\n    version\n  } = _ref4;\n  validateVersion(version);\n\n  if (utils_1.isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (utils_1.isNullish(privateKey)) {\n    throw new Error('Missing private key parameter');\n  }\n\n  const messageHash = version === SignTypedDataVersion.V1 ? _typedSignatureHash(data) : exports.TypedDataUtils.eip712Hash(data, version);\n  const sig = ethereumjs_util_1.ecsign(messageHash, privateKey);\n  return utils_1.concatSig(ethereumjs_util_1.toBuffer(sig.v), sig.r, sig.s);\n}\n\nexports.signTypedData = signTypedData;\n/**\n * Recover the address of the account that created the given EIP-712\n * signature. The version provided must match the version used to\n * create the signature.\n *\n * @param options - The signature recovery options.\n * @param options.data - The typed data that was signed.\n * @param options.signature - The '0x-prefixed hex encoded message signature.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex address of the signer.\n */\n\nfunction recoverTypedSignature(_ref5) {\n  let {\n    data,\n    signature,\n    version\n  } = _ref5;\n  validateVersion(version);\n\n  if (utils_1.isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (utils_1.isNullish(signature)) {\n    throw new Error('Missing signature parameter');\n  }\n\n  const messageHash = version === SignTypedDataVersion.V1 ? _typedSignatureHash(data) : exports.TypedDataUtils.eip712Hash(data, version);\n  const publicKey = utils_1.recoverPublicKey(messageHash, signature);\n  const sender = ethereumjs_util_1.publicToAddress(publicKey);\n  return ethereumjs_util_1.bufferToHex(sender);\n}\n\nexports.recoverTypedSignature = recoverTypedSignature;","map":{"version":3,"sources":["../src/sign-typed-data.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  bufferToHex,\n  ecsign,\n  keccak,\n  publicToAddress,\n  toBuffer,\n} from 'ethereumjs-util';\nimport { rawEncode, soliditySHA3 } from 'ethereumjs-abi';\n\nimport {\n  concatSig,\n  isNullish,\n  legacyToBuffer,\n  recoverPublicKey,\n} from './utils';\n\n/**\n * This is the message format used for `V1` of `signTypedData`.\n */\nexport type TypedDataV1 = TypedDataV1Field[];\n\n/**\n * This represents a single field in a `V1` `signTypedData` message.\n *\n * @property name - The name of the field.\n * @property type - The type of a field (must be a supported Solidity type).\n * @property value - The value of the field.\n */\nexport interface TypedDataV1Field {\n  name: string;\n  type: string;\n  value: any;\n}\n\n/**\n * Represents the version of `signTypedData` being used.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\n *\n * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\n */\nexport enum SignTypedDataVersion {\n  V1 = 'V1',\n  V3 = 'V3',\n  V4 = 'V4',\n}\n\nexport interface MessageTypeProperty {\n  name: string;\n  type: string;\n}\n\nexport interface MessageTypes {\n  EIP712Domain: MessageTypeProperty[];\n  [additionalProperties: string]: MessageTypeProperty[];\n}\n\n/**\n * This is the message format used for `signTypeData`, for all versions\n * except `V1`.\n *\n * @template T - The custom types used by this message.\n * @property types - The custom types used by this message.\n * @property primaryType - The type of the message.\n * @property domain - Signing domain metadata. The signing domain is the intended context for the\n * signature (e.g. the dapp, protocol, etc. that it's intended for). This data is used to\n * construct the domain seperator of the message.\n * @property domain.name - The name of the signing domain.\n * @property domain.version - The current major version of the signing domain.\n * @property domain.chainId - The chain ID of the signing domain.\n * @property domain.verifyingContract - The address of the contract that can verify the signature.\n * @property domain.salt - A disambiguating salt for the protocol.\n * @property message - The message to be signed.\n */\nexport interface TypedMessage<T extends MessageTypes> {\n  types: T;\n  primaryType: keyof T;\n  domain: {\n    name?: string;\n    version?: string;\n    chainId?: number;\n    verifyingContract?: string;\n    salt?: ArrayBuffer;\n  };\n  message: Record<string, unknown>;\n}\n\nexport const TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: { type: 'string' },\n            type: { type: 'string', enum: getSolidityTypes() },\n          },\n          required: ['name', 'type'],\n        },\n      },\n    },\n    primaryType: { type: 'string' },\n    domain: { type: 'object' },\n    message: { type: 'object' },\n  },\n  required: ['types', 'primaryType', 'domain', 'message'],\n};\n\n/**\n * Get a list of all Solidity types.\n *\n * @returns A list of all Solidity types.\n */\nfunction getSolidityTypes() {\n  const types = ['bool', 'address', 'string', 'bytes'];\n  const ints = Array.from(new Array(32)).map(\n    (_, index) => `int${(index + 1) * 8}`,\n  );\n  const uints = Array.from(new Array(32)).map(\n    (_, index) => `uint${(index + 1) * 8}`,\n  );\n  const bytes = Array.from(new Array(32)).map(\n    (_, index) => `bytes${index + 1}`,\n  );\n\n  return [...types, ...ints, ...uints, ...bytes];\n}\n\n/**\n * Validate that the given value is a valid version string.\n *\n * @param version - The version value to validate.\n * @param allowedVersions - A list of allowed versions. If omitted, all versions are assumed to be\n * allowed.\n */\nfunction validateVersion(\n  version: SignTypedDataVersion,\n  allowedVersions?: SignTypedDataVersion[],\n) {\n  if (!Object.keys(SignTypedDataVersion).includes(version)) {\n    throw new Error(`Invalid version: '${version}'`);\n  } else if (allowedVersions && !allowedVersions.includes(version)) {\n    throw new Error(\n      `SignTypedDataVersion not allowed: '${version}'. Allowed versions are: ${allowedVersions.join(\n        ', ',\n      )}`,\n    );\n  }\n}\n\n/**\n * Encode a single field.\n *\n * @param types - All type definitions.\n * @param name - The name of the field to encode.\n * @param type - The type of the field being encoded.\n * @param value - The value to encode.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns Encoded representation of the field.\n */\nfunction encodeField(\n  types: Record<string, MessageTypeProperty[]>,\n  name: string,\n  type: string,\n  value: any,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): [type: string, value: any] {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  if (types[type] !== undefined) {\n    return [\n      'bytes32',\n      version === SignTypedDataVersion.V4 && value == null // eslint-disable-line no-eq-null\n        ? '0x0000000000000000000000000000000000000000000000000000000000000000'\n        : keccak(encodeData(type, value, types, version)),\n    ];\n  }\n\n  if (value === undefined) {\n    throw new Error(`missing value for field ${name} of type ${type}`);\n  }\n\n  if (type === 'bytes') {\n    return ['bytes32', keccak(value)];\n  }\n\n  if (type === 'string') {\n    // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n    if (typeof value === 'string') {\n      value = Buffer.from(value, 'utf8');\n    }\n    return ['bytes32', keccak(value)];\n  }\n\n  if (type.lastIndexOf(']') === type.length - 1) {\n    if (version === SignTypedDataVersion.V3) {\n      throw new Error(\n        'Arrays are unimplemented in encodeData; use V4 extension',\n      );\n    }\n    const parsedType = type.slice(0, type.lastIndexOf('['));\n    const typeValuePairs = value.map((item) =>\n      encodeField(types, name, parsedType, item, version),\n    );\n    return [\n      'bytes32',\n      keccak(\n        rawEncode(\n          typeValuePairs.map(([t]) => t),\n          typeValuePairs.map(([, v]) => v),\n        ),\n      ),\n    ];\n  }\n\n  return [type, value];\n}\n\n/**\n * Encodes an object by encoding and concatenating each of its members.\n *\n * @param primaryType - The root type.\n * @param data - The object to encode.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns An encoded representation of an object.\n */\nfunction encodeData(\n  primaryType: string,\n  data: Record<string, unknown>,\n  types: Record<string, MessageTypeProperty[]>,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): Buffer {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  const encodedTypes = ['bytes32'];\n  const encodedValues: unknown[] = [hashType(primaryType, types)];\n\n  for (const field of types[primaryType]) {\n    if (version === SignTypedDataVersion.V3 && data[field.name] === undefined) {\n      continue;\n    }\n    const [type, value] = encodeField(\n      types,\n      field.name,\n      field.type,\n      data[field.name],\n      version,\n    );\n    encodedTypes.push(type);\n    encodedValues.push(value);\n  }\n\n  return rawEncode(encodedTypes, encodedValues);\n}\n\n/**\n * Encodes the type of an object by encoding a comma delimited list of its members.\n *\n * @param primaryType - The root type to encode.\n * @param types - Type definitions for all types included in the message.\n * @returns An encoded representation of the primary type.\n */\nfunction encodeType(\n  primaryType: string,\n  types: Record<string, MessageTypeProperty[]>,\n): string {\n  let result = '';\n  const unsortedDeps = findTypeDependencies(primaryType, types);\n  unsortedDeps.delete(primaryType);\n\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()];\n  for (const type of deps) {\n    const children = types[type];\n    if (!children) {\n      throw new Error(`No type definition specified: ${type}`);\n    }\n\n    result += `${type}(${types[type]\n      .map(({ name, type: t }) => `${t} ${name}`)\n      .join(',')})`;\n  }\n\n  return result;\n}\n\n/**\n * Finds all types within a type definition object.\n *\n * @param primaryType - The root type.\n * @param types - Type definitions for all types included in the message.\n * @param results - The current set of accumulated types.\n * @returns The set of all types found in the type definition.\n */\nfunction findTypeDependencies(\n  primaryType: string,\n  types: Record<string, MessageTypeProperty[]>,\n  results: Set<string> = new Set(),\n): Set<string> {\n  [primaryType] = primaryType.match(/^\\w*/u);\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results;\n  }\n\n  results.add(primaryType);\n\n  for (const field of types[primaryType]) {\n    findTypeDependencies(field.type, types, results);\n  }\n  return results;\n}\n\n/**\n * Hashes an object.\n *\n * @param primaryType - The root type.\n * @param data - The object to hash.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the object.\n */\nfunction hashStruct(\n  primaryType: string,\n  data: Record<string, unknown>,\n  types: Record<string, MessageTypeProperty[]>,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): Buffer {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  return keccak(encodeData(primaryType, data, types, version));\n}\n\n/**\n * Hashes the type of an object.\n *\n * @param primaryType - The root type to hash.\n * @param types - Type definitions for all types included in the message.\n * @returns The hash of the object type.\n */\nfunction hashType(\n  primaryType: string,\n  types: Record<string, MessageTypeProperty[]>,\n): Buffer {\n  return keccak(encodeType(primaryType, types));\n}\n\n/**\n * Removes properties from a message object that are not defined per EIP-712.\n *\n * @param data - The typed message object.\n * @returns The typed message object with only allowed fields.\n */\nfunction sanitizeData<T extends MessageTypes>(\n  data: TypedMessage<T>,\n): TypedMessage<T> {\n  const sanitizedData: Partial<TypedMessage<T>> = {};\n  for (const key in TYPED_MESSAGE_SCHEMA.properties) {\n    if (data[key]) {\n      sanitizedData[key] = data[key];\n    }\n  }\n  if ('types' in sanitizedData) {\n    sanitizedData.types = { EIP712Domain: [], ...sanitizedData.types };\n  }\n  return sanitizedData as Required<TypedMessage<T>>;\n}\n\n/**\n * Hash a typed message according to EIP-712. The returned message starts with the EIP-712 prefix,\n * which is \"1901\", followed by the hash of the domain separator, then the data (if any).\n * The result is hashed again and returned.\n *\n * This function does not sign the message. The resulting hash must still be signed to create an\n * EIP-712 signature.\n *\n * @param typedData - The typed message to hash.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the typed message.\n */\nfunction eip712Hash<T extends MessageTypes>(\n  typedData: TypedMessage<T>,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): Buffer {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  const sanitizedData = sanitizeData(typedData);\n  const parts = [Buffer.from('1901', 'hex')];\n  parts.push(\n    hashStruct(\n      'EIP712Domain',\n      sanitizedData.domain,\n      sanitizedData.types,\n      version,\n    ),\n  );\n  if (sanitizedData.primaryType !== 'EIP712Domain') {\n    parts.push(\n      hashStruct(\n        // TODO: Validate that this is a string, so this type cast can be removed.\n        sanitizedData.primaryType as string,\n        sanitizedData.message,\n        sanitizedData.types,\n        version,\n      ),\n    );\n  }\n  return keccak(Buffer.concat(parts));\n}\n\n/**\n * A collection of utility functions used for signing typed data.\n */\nexport const TypedDataUtils = {\n  encodeData,\n  encodeType,\n  findTypeDependencies,\n  hashStruct,\n  hashType,\n  sanitizeData,\n  eip712Hash,\n};\n\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The '0x'-prefixed hex encoded hash representing the type of the provided message.\n */\nexport function typedSignatureHash(typedData: TypedDataV1Field[]): string {\n  const hashBuffer = _typedSignatureHash(typedData);\n  return bufferToHex(hashBuffer);\n}\n\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The hash representing the type of the provided message.\n */\nfunction _typedSignatureHash(typedData: TypedDataV1): Buffer {\n  const error = new Error('Expect argument to be non-empty array');\n  if (\n    typeof typedData !== 'object' ||\n    !('length' in typedData) ||\n    !typedData.length\n  ) {\n    throw error;\n  }\n\n  const data = typedData.map(function (e) {\n    if (e.type !== 'bytes') {\n      return e.value;\n    }\n\n    return legacyToBuffer(e.value);\n  });\n  const types = typedData.map(function (e) {\n    return e.type;\n  });\n  const schema = typedData.map(function (e) {\n    if (!e.name) {\n      throw error;\n    }\n    return `${e.type} ${e.name}`;\n  });\n\n  return soliditySHA3(\n    ['bytes32', 'bytes32'],\n    [\n      soliditySHA3(new Array(typedData.length).fill('string'), schema),\n      soliditySHA3(types, data),\n    ],\n  );\n}\n\n/**\n * Sign typed data according to EIP-712. The signing differs based upon the `version`.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), except that arrays and\n * recursive data structures are not supported.\n *\n * V4 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), and includes full support of\n * arrays and recursive data structures.\n *\n * @param options - The signing options.\n * @param options.privateKey - The private key to sign with.\n * @param options.data - The typed data to sign.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex encoded signature.\n */\nexport function signTypedData<\n  V extends SignTypedDataVersion,\n  T extends MessageTypes,\n>({\n  privateKey,\n  data,\n  version,\n}: {\n  privateKey: Buffer;\n  data: V extends 'V1' ? TypedDataV1 : TypedMessage<T>;\n  version: V;\n}): string {\n  validateVersion(version);\n  if (isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (isNullish(privateKey)) {\n    throw new Error('Missing private key parameter');\n  }\n\n  const messageHash =\n    version === SignTypedDataVersion.V1\n      ? _typedSignatureHash(data as TypedDataV1)\n      : TypedDataUtils.eip712Hash(\n          data as TypedMessage<T>,\n          version as SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n        );\n  const sig = ecsign(messageHash, privateKey);\n  return concatSig(toBuffer(sig.v), sig.r, sig.s);\n}\n\n/**\n * Recover the address of the account that created the given EIP-712\n * signature. The version provided must match the version used to\n * create the signature.\n *\n * @param options - The signature recovery options.\n * @param options.data - The typed data that was signed.\n * @param options.signature - The '0x-prefixed hex encoded message signature.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex address of the signer.\n */\nexport function recoverTypedSignature<\n  V extends SignTypedDataVersion,\n  T extends MessageTypes,\n>({\n  data,\n  signature,\n  version,\n}: {\n  data: V extends 'V1' ? TypedDataV1 : TypedMessage<T>;\n  signature: string;\n  version: V;\n}): string {\n  validateVersion(version);\n  if (isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (isNullish(signature)) {\n    throw new Error('Missing signature parameter');\n  }\n\n  const messageHash =\n    version === SignTypedDataVersion.V1\n      ? _typedSignatureHash(data as TypedDataV1)\n      : TypedDataUtils.eip712Hash(\n          data as TypedMessage<T>,\n          version as SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n        );\n  const publicKey = recoverPublicKey(messageHash, signature);\n  const sender = publicToAddress(publicKey);\n  return bufferToHex(sender);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}