{"ast":null,"code":"import nacl from '@toruslabs/tweetnacl-js';\nconst l = nacl.lowlevel;\n\nfunction getED25519Key(privateKey) {\n  let privKey;\n\n  if (typeof privateKey === \"string\") {\n    privKey = Buffer.from(privateKey, \"hex\");\n  } else {\n    privKey = privateKey;\n  } // Implementation copied from tweetnacl\n\n\n  const d = new Uint8Array(64);\n  const p = [l.gf(), l.gf(), l.gf(), l.gf()];\n  const sk = new Uint8Array([...new Uint8Array(privKey), ...new Uint8Array(32)]);\n  const pk = new Uint8Array(32);\n  l.crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n  l.scalarbase(p, d);\n  l.pack(pk, p);\n\n  for (let i = 0; i < 32; i += 1) sk[i + 32] = pk[i];\n\n  return {\n    sk: Buffer.from(sk),\n    pk: Buffer.from(pk)\n  };\n}\n\nexport { getED25519Key };","map":{"version":3,"sources":["../src/utils.ts"],"names":["l","nacl","getED25519Key","privateKey","privKey","Buffer","d","p","sk","pk","i"],"mappings":";AAQA,MAAMA,CAAC,GAAIC,IAAY,CAAvB,QAAA;;SAEgBC,a,CAAcC,U,EAAAA;AAI5B,MAAA,OAAA;;AACA,MAAI,OAAA,UAAA,KAAJ,QAAA,EAAoC;AAClCC,IAAAA,OAAO,GAAGC,MAAM,CAANA,IAAAA,CAAAA,UAAAA,EAAVD,KAAUC,CAAVD;AADF,GAAA,MAEO;AACLA,IAAAA,OAAO,GAAPA,UAAAA;AACD,GAT2BD,CAS3B;;;AAGD,QAAMG,CAAC,GAAG,IAAA,UAAA,CAAV,EAAU,CAAV;AACA,QAAMC,CAAC,GAAG,CAACP,CAAC,CAAF,EAACA,EAAD,EAASA,CAAC,CAAV,EAASA,EAAT,EAAiBA,CAAC,CAAlB,EAAiBA,EAAjB,EAAyBA,CAAC,CAApC,EAAmCA,EAAzB,CAAV;AACA,QAAMQ,EAAE,GAAG,IAAA,UAAA,CAAe,CAAC,GAAG,IAAA,UAAA,CAAJ,OAAI,CAAJ,EAA6B,GAAG,IAAA,UAAA,CAA1D,EAA0D,CAAhC,CAAf,CAAX;AACA,QAAMC,EAAE,GAAG,IAAA,UAAA,CAAX,EAAW,CAAX;AACAT,EAAAA,CAAC,CAADA,WAAAA,CAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA;AAEAM,EAAAA,CAAC,CAADA,CAAC,CAADA,IAAAA,GAAAA;AAEAA,EAAAA,CAAC,CAADA,EAAC,CAADA,IAAAA,GAAAA;AAEAA,EAAAA,CAAC,CAADA,EAAC,CAADA,IAAAA,EAAAA;AACAN,EAAAA,CAAC,CAADA,UAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AACAA,EAAAA,CAAC,CAADA,IAAAA,CAAAA,EAAAA,EAAAA,CAAAA;;AACA,OAAK,IAAIU,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,EAAA,EAAwBA,CAAC,IAAzB,CAAA,EAAgCF,EAAE,CAACE,CAAC,GAAJF,EAAE,CAAFA,GAAaC,EAAE,CAAfD,CAAe,CAAfA;;AAEhC,SAAO;AAAEA,IAAAA,EAAE,EAAEH,MAAM,CAANA,IAAAA,CAAN,EAAMA,CAAN;AAAuBI,IAAAA,EAAE,EAAEJ,MAAM,CAANA,IAAAA,CAAAA,EAAAA;AAA3B,GAAP;AACD","sourcesContent":["import nacl from '@toruslabs/tweetnacl-js';\n\nconst l = nacl.lowlevel;\nfunction getED25519Key(privateKey) {\n  let privKey;\n\n  if (typeof privateKey === \"string\") {\n    privKey = Buffer.from(privateKey, \"hex\");\n  } else {\n    privKey = privateKey;\n  } // Implementation copied from tweetnacl\n\n\n  const d = new Uint8Array(64);\n  const p = [l.gf(), l.gf(), l.gf(), l.gf()];\n  const sk = new Uint8Array([...new Uint8Array(privKey), ...new Uint8Array(32)]);\n  const pk = new Uint8Array(32);\n  l.crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n  l.scalarbase(p, d);\n  l.pack(pk, p);\n\n  for (let i = 0; i < 32; i += 1) sk[i + 32] = pk[i];\n\n  return {\n    sk: Buffer.from(sk),\n    pk: Buffer.from(pk)\n  };\n}\n\nexport { getED25519Key };\n//# sourceMappingURL=openloginEd25519.esm.js.map\n"]},"metadata":{},"sourceType":"module"}