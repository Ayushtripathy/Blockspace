{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Torus from '@toruslabs/solana-embed';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, getChainConfig, ADAPTER_EVENTS, WalletInitializationError, WalletLoginError } from '@web3auth/base';\nimport { TorusInjectedProvider } from '@web3auth/solana-provider';\nimport log from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass SolanaWalletAdapter extends BaseAdapter {\n  constructor() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.TORUS_SOLANA);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"torusInstance\", null);\n\n    _defineProperty(this, \"torusWalletOptions\", void 0);\n\n    _defineProperty(this, \"initParams\", void 0);\n\n    _defineProperty(this, \"loginSettings\", {});\n\n    _defineProperty(this, \"solanaProvider\", null);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n      var _this$solanaProvider;\n\n      return ((_this$solanaProvider = this.solanaProvider) === null || _this$solanaProvider === void 0 ? void 0 : _this$solanaProvider.provider) || null;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    let network;\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n      const {\n        blockExplorer,\n        displayName,\n        ticker,\n        tickerName,\n        rpcTarget,\n        chainId\n      } = this.chainConfig;\n      network = {\n        chainId,\n        rpcTarget,\n        blockExplorerUrl: blockExplorer,\n        displayName,\n        ticker,\n        tickerName,\n        logo: \"\"\n      };\n    } else {\n      const {\n        chainId,\n        blockExplorer,\n        displayName,\n        rpcTarget,\n        ticker,\n        tickerName\n      } = this.chainConfig;\n      network = {\n        chainId,\n        rpcTarget,\n        blockExplorerUrl: blockExplorer,\n        displayName,\n        tickerName,\n        ticker,\n        logo: \"\"\n      };\n    }\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    await this.torusInstance.init(_objectSpread(_objectSpread({\n      showTorusButton: false\n    }, this.initParams), {}, {\n      network\n    }));\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.TORUS_SOLANA\n    });\n\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      await this.solanaProvider.setupProvider(this.torusInstance.provider);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.TORUS_SOLANA,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  setAdapterSettings(_) {}\n\n}\n\nexport { SolanaWalletAdapter };","map":{"version":3,"sources":["../src/solanaWalletAdapter.ts"],"names":["SolanaWalletAdapter","BaseAdapter","WALLET_ADAPTERS","TORUS_SOLANA","ADAPTER_NAMESPACES","SOLANA","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","constructor","params","provider","init","getChainConfig","chainId","network","blockExplorerUrl","logo","tickerName","showTorusButton","config","chainConfig","ADAPTER_EVENTS","options","log","connect","WalletInitializationError","adapter","reconnected","rehydrated","WalletLoginError","disconnect","cleanup","getUserInfo","userInfo","setAdapterSettings"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Torus from '@toruslabs/solana-embed';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, getChainConfig, ADAPTER_EVENTS, WalletInitializationError, WalletLoginError } from '@web3auth/base';\nimport { TorusInjectedProvider } from '@web3auth/solana-provider';\nimport log from 'loglevel';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass SolanaWalletAdapter extends BaseAdapter {\n  constructor() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.TORUS_SOLANA);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"torusInstance\", null);\n\n    _defineProperty(this, \"torusWalletOptions\", void 0);\n\n    _defineProperty(this, \"initParams\", void 0);\n\n    _defineProperty(this, \"loginSettings\", {});\n\n    _defineProperty(this, \"solanaProvider\", null);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n      var _this$solanaProvider;\n\n      return ((_this$solanaProvider = this.solanaProvider) === null || _this$solanaProvider === void 0 ? void 0 : _this$solanaProvider.provider) || null;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    let network;\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n      const {\n        blockExplorer,\n        displayName,\n        ticker,\n        tickerName,\n        rpcTarget,\n        chainId\n      } = this.chainConfig;\n      network = {\n        chainId,\n        rpcTarget,\n        blockExplorerUrl: blockExplorer,\n        displayName,\n        ticker,\n        tickerName,\n        logo: \"\"\n      };\n    } else {\n      const {\n        chainId,\n        blockExplorer,\n        displayName,\n        rpcTarget,\n        ticker,\n        tickerName\n      } = this.chainConfig;\n      network = {\n        chainId,\n        rpcTarget,\n        blockExplorerUrl: blockExplorer,\n        displayName,\n        tickerName,\n        ticker,\n        logo: \"\"\n      };\n    }\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    await this.torusInstance.init(_objectSpread(_objectSpread({\n      showTorusButton: false\n    }, this.initParams), {}, {\n      network\n    }));\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.TORUS_SOLANA\n    });\n\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      await this.solanaProvider.setupProvider(this.torusInstance.provider);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.TORUS_SOLANA,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  setAdapterSettings(_) {}\n\n}\n\nexport { SolanaWalletAdapter };\n//# sourceMappingURL=torusSolanaAdapter.esm.js.map\n"]},"metadata":{},"sourceType":"module"}