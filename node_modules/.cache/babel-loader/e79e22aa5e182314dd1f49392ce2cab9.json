{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/slicedToArray\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/toConsumableArray\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\n\nvar _map2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _filter2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\"));\n\nvar _keys2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/keys\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _sort = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/sort\"));\n\nvar _splice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/splice\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _entries = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/entries\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseGeoPoint = _interopRequireDefault(require(\"./ParseGeoPoint\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _OfflineQuery = _interopRequireDefault(require(\"./OfflineQuery\"));\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n/*\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Converts a string into a regex that matches it.\n * Surrounding with \\Q .. \\E does this, we just need to escape any \\E's in\n * the text separately.\n *\n * @param s\n * @private\n * @returns {string}\n */\n\n\nfunction quote(s\n/*: string*/\n)\n/*: string*/\n{\n  return \"\\\\Q\".concat(s.replace('\\\\E', '\\\\E\\\\\\\\E\\\\Q'), \"\\\\E\");\n}\n/**\n * Extracts the class name from queries. If not all queries have the same\n * class name an error will be thrown.\n *\n * @param queries\n * @private\n * @returns {string}\n */\n\n\nfunction _getClassNameFromQueries(queries\n/*: Array<ParseQuery>*/\n)\n/*: ?string*/\n{\n  var className = null;\n  (0, _forEach.default)(queries).call(queries, function (q) {\n    if (!className) {\n      // eslint-disable-next-line prefer-destructuring\n      className = q.className;\n    }\n\n    if (className !== q.className) {\n      throw new Error('All queries must be for the same class.');\n    }\n  });\n  return className;\n}\n/*\n * Handles pre-populating the result data of a query with select fields,\n * making sure that the data object contains keys for all objects that have\n * been requested with a select, so that our cached state updates correctly.\n */\n\n\nfunction handleSelectResult(data\n/*: any*/\n, select\n/*: Array<string>*/\n) {\n  var serverDataMask = {};\n  (0, _forEach.default)(select).call(select, function (field) {\n    var hasSubObjectSelect = (0, _indexOf.default)(field).call(field, '.') !== -1;\n\n    if (!hasSubObjectSelect && !data.hasOwnProperty(field)) {\n      // this field was selected, but is missing from the retrieved data\n      data[field] = undefined;\n    } else if (hasSubObjectSelect) {\n      // this field references a sub-object,\n      // so we need to walk down the path components\n      var pathComponents = field.split('.');\n      var _obj = data;\n      var serverMask = serverDataMask;\n      (0, _forEach.default)(pathComponents).call(pathComponents, function (component, index, arr) {\n        // add keys if the expected data is missing\n        if (_obj && !_obj.hasOwnProperty(component)) {\n          _obj[component] = undefined;\n        }\n\n        if (_obj && (0, _typeof2.default)(_obj) === 'object') {\n          _obj = _obj[component];\n        } // add this path component to the server mask so we can fill it in later if needed\n\n\n        if (index < arr.length - 1) {\n          if (!serverMask[component]) {\n            serverMask[component] = {};\n          }\n\n          serverMask = serverMask[component];\n        }\n      });\n    }\n  });\n\n  if ((0, _keys.default)(serverDataMask).length > 0) {\n    // When selecting from sub-objects, we don't want to blow away the missing\n    // information that we may have retrieved before. We've already added any\n    // missing selected keys to sub-objects, but we still need to add in the\n    // data for any previously retrieved sub-objects that were not selected.\n    var serverData = _CoreManager.default.getObjectStateController().getServerData({\n      id: data.objectId,\n      className: data.className\n    });\n\n    copyMissingDataWithMask(serverData, data, serverDataMask, false);\n  }\n}\n\nfunction copyMissingDataWithMask(src, dest, mask, copyThisLevel) {\n  // copy missing elements at this level\n  if (copyThisLevel) {\n    for (var _key in src) {\n      if (src.hasOwnProperty(_key) && !dest.hasOwnProperty(_key)) {\n        dest[_key] = src[_key];\n      }\n    }\n  }\n\n  for (var _key2 in mask) {\n    if (dest[_key2] !== undefined && dest[_key2] !== null && src !== undefined && src !== null) {\n      // traverse into objects as needed\n      copyMissingDataWithMask(src[_key2], dest[_key2], mask[_key2], true);\n    }\n  }\n}\n\nfunction handleOfflineSort(a, b, sorts) {\n  var order = sorts[0];\n  var operator = (0, _slice.default)(order).call(order, 0, 1);\n  var isDescending = operator === '-';\n\n  if (isDescending) {\n    order = order.substring(1);\n  }\n\n  if (order === '_created_at') {\n    order = 'createdAt';\n  }\n\n  if (order === '_updated_at') {\n    order = 'updatedAt';\n  }\n\n  if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(order) || order === 'password') {\n    throw new _ParseError.default(_ParseError.default.INVALID_KEY_NAME, \"Invalid Key: \".concat(order));\n  }\n\n  var field1 = a.get(order);\n  var field2 = b.get(order);\n\n  if (field1 < field2) {\n    return isDescending ? 1 : -1;\n  }\n\n  if (field1 > field2) {\n    return isDescending ? -1 : 1;\n  }\n\n  if (sorts.length > 1) {\n    var remainingSorts = (0, _slice.default)(sorts).call(sorts, 1);\n    return handleOfflineSort(a, b, remainingSorts);\n  }\n\n  return 0;\n}\n/**\n * Creates a new parse Parse.Query for the given Parse.Object subclass.\n *\n * <p>Parse.Query defines a query that is used to fetch Parse.Objects. The\n * most common use case is finding all objects that match a query through the\n * <code>find</code> method. for example, this sample code fetches all objects\n * of class <code>myclass</code>. it calls a different function depending on\n * whether the fetch succeeded or not.\n *\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.find().then((results) => {\n *   // results is an array of parse.object.\n * }).catch((error) =>  {\n *  // error is an instance of parse.error.\n * });</pre></p>\n *\n * <p>a Parse.Query can also be used to retrieve a single object whose id is\n * known, through the get method. for example, this sample code fetches an\n * object of class <code>myclass</code> and id <code>myid</code>. it calls a\n * different function depending on whether the fetch succeeded or not.\n *\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.get(myid).then((object) => {\n *     // object is an instance of parse.object.\n * }).catch((error) =>  {\n *  // error is an instance of parse.error.\n * });</pre></p>\n *\n * <p>a Parse.Query can also be used to count the number of objects that match\n * the query without retrieving all of those objects. for example, this\n * sample code counts the number of objects of the class <code>myclass</code>\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.count().then((number) => {\n *     // there are number instances of myclass.\n * }).catch((error) => {\n *     // error is an instance of Parse.Error.\n * });</pre></p>\n *\n * @alias Parse.Query\n */\n\n\nvar ParseQuery = /*#__PURE__*/function () {\n  /**\n   * @property {string} className\n   */\n\n  /**\n   * @param {(string | Parse.Object)} objectClass An instance of a subclass of Parse.Object, or a Parse className string.\n   */\n  function ParseQuery(objectClass\n  /*: string | ParseObject*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseQuery);\n    (0, _defineProperty2.default)(this, \"className\", void 0);\n    (0, _defineProperty2.default)(this, \"_where\", void 0);\n    (0, _defineProperty2.default)(this, \"_include\", void 0);\n    (0, _defineProperty2.default)(this, \"_exclude\", void 0);\n    (0, _defineProperty2.default)(this, \"_select\", void 0);\n    (0, _defineProperty2.default)(this, \"_limit\", void 0);\n    (0, _defineProperty2.default)(this, \"_skip\", void 0);\n    (0, _defineProperty2.default)(this, \"_count\", void 0);\n    (0, _defineProperty2.default)(this, \"_order\", void 0);\n    (0, _defineProperty2.default)(this, \"_readPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_includeReadPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_subqueryReadPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_queriesLocalDatastore\", void 0);\n    (0, _defineProperty2.default)(this, \"_localDatastorePinName\", void 0);\n    (0, _defineProperty2.default)(this, \"_extraOptions\", void 0);\n    (0, _defineProperty2.default)(this, \"_hint\", void 0);\n    (0, _defineProperty2.default)(this, \"_explain\", void 0);\n    (0, _defineProperty2.default)(this, \"_xhrRequest\", void 0);\n\n    if (typeof objectClass === 'string') {\n      if (objectClass === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        this.className = '_User';\n      } else {\n        this.className = objectClass;\n      }\n    } else if (objectClass instanceof _ParseObject.default) {\n      this.className = objectClass.className;\n    } else if (typeof objectClass === 'function') {\n      if (typeof objectClass.className === 'string') {\n        this.className = objectClass.className;\n      } else {\n        var _obj2 = new objectClass();\n\n        this.className = _obj2.className;\n      }\n    } else {\n      throw new TypeError('A ParseQuery must be constructed with a ParseObject or class name.');\n    }\n\n    this._where = {};\n    this._include = [];\n    this._exclude = [];\n    this._count = false; // negative limit is not sent in the server request\n\n    this._limit = -1;\n    this._skip = 0;\n    this._readPreference = null;\n    this._includeReadPreference = null;\n    this._subqueryReadPreference = null;\n    this._queriesLocalDatastore = false;\n    this._localDatastorePinName = null;\n    this._extraOptions = {};\n    this._xhrRequest = {\n      task: null,\n      onchange: function () {}\n    };\n  }\n  /**\n   * Adds constraint that at least one of the passed in queries matches.\n   *\n   * @param {Array} queries\n   * @returns {Parse.Query} Returns the query, so you can chain this call.\n   */\n\n\n  (0, _createClass2.default)(ParseQuery, [{\n    key: \"_orQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$or = queryJSON;\n      return this;\n    }\n    /**\n     * Adds constraint that all of the passed in queries match.\n     *\n     * @param {Array} queries\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"_andQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$and = queryJSON;\n      return this;\n    }\n    /**\n     * Adds constraint that none of the passed in queries match.\n     *\n     * @param {Array} queries\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"_norQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$nor = queryJSON;\n      return this;\n    }\n    /**\n     * Helper for condition queries\n     *\n     * @param key\n     * @param condition\n     * @param value\n     * @returns {Parse.Query}\n     */\n\n  }, {\n    key: \"_addCondition\",\n    value: function (key\n    /*: string*/\n    , condition\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!this._where[key] || typeof this._where[key] === 'string') {\n        this._where[key] = {};\n      }\n\n      this._where[key][condition] = (0, _encode.default)(value, false, true);\n      return this;\n    }\n    /**\n     * Converts string for regular expression at the beginning\n     *\n     * @param string\n     * @returns {string}\n     */\n\n  }, {\n    key: \"_regexStartWith\",\n    value: function (string\n    /*: string*/\n    )\n    /*: string*/\n    {\n      return \"^\".concat(quote(string));\n    }\n  }, {\n    key: \"_handleOfflineQuery\",\n    value: function () {\n      var _handleOfflineQuery2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(params\n      /*: any*/\n      ) {\n        var _context,\n            _this2 = this;\n\n        var localDatastore, objects, results, keys, alwaysSelectedKeys, sorts, count, limit;\n        return _regenerator.default.wrap(function (_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _OfflineQuery.default.validateQuery(this);\n\n                localDatastore = _CoreManager.default.getLocalDatastore();\n                _context3.next = 4;\n                return localDatastore._serializeObjectsFromPinName(this._localDatastorePinName);\n\n              case 4:\n                objects = _context3.sent;\n                results = (0, _filter2.default)(_context = (0, _map2.default)(objects).call(objects, function (json, index, arr) {\n                  var object = _ParseObject.default.fromJSON(json, false);\n\n                  if (json._localId && !json.objectId) {\n                    object._localId = json._localId;\n                  }\n\n                  if (!_OfflineQuery.default.matchesQuery(_this2.className, object, arr, _this2)) {\n                    return null;\n                  }\n\n                  return object;\n                })).call(_context, function (object) {\n                  return object !== null;\n                });\n\n                if ((0, _keys2.default)(params)) {\n                  keys = (0, _keys2.default)(params).split(',');\n                  alwaysSelectedKeys = ['className', 'objectId', 'createdAt', 'updatedAt', 'ACL'];\n                  keys = (0, _concat.default)(keys).call(keys, alwaysSelectedKeys);\n                  results = (0, _map2.default)(results).call(results, function (object) {\n                    var _context2;\n\n                    var json = object._toFullJSON();\n\n                    (0, _forEach.default)(_context2 = (0, _keys.default)(json)).call(_context2, function (key) {\n                      if (!(0, _includes.default)(keys).call(keys, key)) {\n                        delete json[key];\n                      }\n                    });\n                    return _ParseObject.default.fromJSON(json, false);\n                  });\n                }\n\n                if (params.order) {\n                  sorts = params.order.split(',');\n                  (0, _sort.default)(results).call(results, function (a, b) {\n                    return handleOfflineSort(a, b, sorts);\n                  });\n                } // count total before applying limit/skip\n\n\n                if (params.count) {\n                  // total count from response\n                  count = results.length;\n                }\n\n                if (params.skip) {\n                  if (params.skip >= results.length) {\n                    results = [];\n                  } else {\n                    results = (0, _splice.default)(results).call(results, params.skip, results.length);\n                  }\n                }\n\n                limit = results.length;\n\n                if (params.limit !== 0 && params.limit < results.length) {\n                  // eslint-disable-next-line prefer-destructuring\n                  limit = params.limit;\n                }\n\n                results = (0, _splice.default)(results).call(results, 0, limit);\n\n                if (!(typeof count === 'number')) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  results: results,\n                  count: count\n                });\n\n              case 15:\n                return _context3.abrupt(\"return\", results);\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function () {\n        return _handleOfflineQuery2.apply(this, arguments);\n      };\n    }()\n    /**\n     * Returns a JSON representation of this query.\n     *\n     * @returns {object} The JSON representation of the query.\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: QueryJSON*/\n    {\n      var params\n      /*: QueryJSON*/\n      = {\n        where: this._where\n      };\n\n      if (this._include.length) {\n        params.include = this._include.join(',');\n      }\n\n      if (this._exclude.length) {\n        params.excludeKeys = this._exclude.join(',');\n      }\n\n      if (this._select) {\n        params.keys = this._select.join(',');\n      }\n\n      if (this._count) {\n        params.count = 1;\n      }\n\n      if (this._limit >= 0) {\n        params.limit = this._limit;\n      }\n\n      if (this._skip > 0) {\n        params.skip = this._skip;\n      }\n\n      if (this._order) {\n        params.order = this._order.join(',');\n      }\n\n      if (this._readPreference) {\n        params.readPreference = this._readPreference;\n      }\n\n      if (this._includeReadPreference) {\n        params.includeReadPreference = this._includeReadPreference;\n      }\n\n      if (this._subqueryReadPreference) {\n        params.subqueryReadPreference = this._subqueryReadPreference;\n      }\n\n      if (this._hint) {\n        params.hint = this._hint;\n      }\n\n      if (this._explain) {\n        params.explain = true;\n      }\n\n      for (var _key3 in this._extraOptions) {\n        params[_key3] = this._extraOptions[_key3];\n      }\n\n      return params;\n    }\n    /**\n     * Return a query with conditions from json, can be useful to send query from server side to client\n     * Not static, all query conditions was set before calling this method will be deleted.\n     * For example on the server side we have\n     * var query = new Parse.Query(\"className\");\n     * query.equalTo(key: value);\n     * query.limit(100);\n     * ... (others queries)\n     * Create JSON representation of Query Object\n     * var jsonFromServer = query.fromJSON();\n     *\n     * On client side getting query:\n     * var query = new Parse.Query(\"className\");\n     * query.fromJSON(jsonFromServer);\n     *\n     * and continue to query...\n     * query.skip(100).find().then(...);\n     *\n     * @param {QueryJSON} json from Parse.Query.toJSON() method\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withJSON\",\n    value: function (json\n    /*: QueryJSON*/\n    )\n    /*: ParseQuery*/\n    {\n      if (json.where) {\n        this._where = json.where;\n      }\n\n      if (json.include) {\n        this._include = json.include.split(',');\n      }\n\n      if ((0, _keys2.default)(json)) {\n        this._select = (0, _keys2.default)(json).split(',');\n      }\n\n      if (json.excludeKeys) {\n        this._exclude = json.excludeKeys.split(',');\n      }\n\n      if (json.count) {\n        this._count = json.count === 1;\n      }\n\n      if (json.limit) {\n        this._limit = json.limit;\n      }\n\n      if (json.skip) {\n        this._skip = json.skip;\n      }\n\n      if (json.order) {\n        this._order = json.order.split(',');\n      }\n\n      if (json.readPreference) {\n        this._readPreference = json.readPreference;\n      }\n\n      if (json.includeReadPreference) {\n        this._includeReadPreference = json.includeReadPreference;\n      }\n\n      if (json.subqueryReadPreference) {\n        this._subqueryReadPreference = json.subqueryReadPreference;\n      }\n\n      if (json.hint) {\n        this._hint = json.hint;\n      }\n\n      if (json.explain) {\n        this._explain = !!json.explain;\n      }\n\n      for (var _key4 in json) {\n        if (json.hasOwnProperty(_key4)) {\n          var _context4;\n\n          if ((0, _indexOf.default)(_context4 = ['where', 'include', 'keys', 'count', 'limit', 'skip', 'order', 'readPreference', 'includeReadPreference', 'subqueryReadPreference', 'hint', 'explain']).call(_context4, _key4) === -1) {\n            this._extraOptions[_key4] = json[_key4];\n          }\n        }\n      }\n\n      return this;\n    }\n    /**\n     * Static method to restore Parse.Query by json representation\n     * Internally calling Parse.Query.withJSON\n     *\n     * @param {string} className\n     * @param {QueryJSON} json from Parse.Query.toJSON() method\n     * @returns {Parse.Query} new created query\n     */\n\n  }, {\n    key: \"get\",\n    value:\n    /**\n     * Constructs a Parse.Object whose id is already known by fetching data from\n     * the server. Unlike the <code>first</code> method, it never returns undefined.\n     *\n     * @param {string} objectId The id of the object to be fetched.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n    function (objectId\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseObject>*/\n    {\n      this.equalTo('objectId', objectId);\n      var firstOptions = {};\n\n      if (options && options.hasOwnProperty('useMasterKey')) {\n        firstOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options && options.hasOwnProperty('sessionToken')) {\n        firstOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options && options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        firstOptions.context = options.context;\n      }\n\n      return this.first(firstOptions).then(function (response) {\n        if (response) {\n          return response;\n        }\n\n        var errorObject = new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'Object not found.');\n        return _promise.default.reject(errorObject);\n      });\n    }\n    /**\n     * Retrieves a list of ParseObjects that satisfy this query.\n     *\n     * @param {object} options Valid options\n     * are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the results when\n     * the query completes.\n     */\n\n  }, {\n    key: \"find\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<ParseObject>>*/\n    {\n      var _this3 = this;\n\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var select = this._select;\n\n      if (this._queriesLocalDatastore) {\n        return this._handleOfflineQuery(this.toJSON());\n      }\n\n      return (0, _find.default)(controller).call(controller, this.className, this.toJSON(), findOptions).then(function (response) {\n        var _context5; // Return generic object when explain is used\n\n\n        if (_this3._explain) {\n          return response.results;\n        }\n\n        var results = (0, _map2.default)(_context5 = response.results).call(_context5, function (data) {\n          // In cases of relations, the server may send back a className\n          // on the top level of the payload\n          var override = response.className || _this3.className;\n\n          if (!data.className) {\n            data.className = override;\n          } // Make sure the data object contains keys for all objects that\n          // have been requested with a select, so that our cached state\n          // updates correctly.\n\n\n          if (select) {\n            handleSelectResult(data, select);\n          }\n\n          return _ParseObject.default.fromJSON(data, !select);\n        });\n        var count = response.count;\n\n        if (typeof count === 'number') {\n          return {\n            results: results,\n            count: count\n          };\n        }\n\n        return results;\n      });\n    }\n    /**\n     * Retrieves a complete list of ParseObjects that satisfy this query.\n     * Using `eachBatch` under the hood to fetch all the valid objects.\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>batchSize: How many objects to yield in each batch (default: 100)\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that is resolved with the results when\n     * the query completes.\n     */\n\n  }, {\n    key: \"findAll\",\n    value: function () {\n      var _findAll = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(options\n      /*:: ?: BatchOptions*/\n      ) {\n        var result;\n        return _regenerator.default.wrap(function (_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                result\n                /*: ParseObject[]*/\n                = [];\n                _context7.next = 3;\n                return this.eachBatch(function (objects\n                /*: ParseObject[]*/\n                ) {\n                  var _context6;\n\n                  result = (0, _concat.default)(_context6 = []).call(_context6, (0, _toConsumableArray2.default)(result), (0, _toConsumableArray2.default)(objects));\n                }, options);\n\n              case 3:\n                return _context7.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function () {\n        return _findAll.apply(this, arguments);\n      };\n    }()\n    /**\n     * Counts the number of objects that match this query.\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the count when\n     * the query completes.\n     */\n\n  }, {\n    key: \"count\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<number>*/\n    {\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = this.toJSON();\n      params.limit = 0;\n      params.count = 1;\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (result) {\n        return result.count;\n      });\n    }\n    /**\n     * Executes a distinct query and returns unique values\n     *\n     * @param {string} key A field to find distinct values\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the query completes.\n     */\n\n  }, {\n    key: \"distinct\",\n    value: function (key\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<mixed>>*/\n    {\n      options = options || {};\n      var distinctOptions = {};\n      distinctOptions.useMasterKey = true;\n\n      if (options.hasOwnProperty('sessionToken')) {\n        distinctOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(distinctOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = {\n        distinct: key,\n        where: this._where,\n        hint: this._hint\n      };\n      return controller.aggregate(this.className, params, distinctOptions).then(function (results) {\n        return results.results;\n      });\n    }\n    /**\n     * Executes an aggregate query and returns aggregate results\n     *\n     * @param {(Array|object)} pipeline Array or Object of stages to process query\n     * @param {object} options Valid options are:<ul>\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the query completes.\n     */\n\n  }, {\n    key: \"aggregate\",\n    value: function (pipeline\n    /*: mixed*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<mixed>>*/\n    {\n      options = options || {};\n      var aggregateOptions = {};\n      aggregateOptions.useMasterKey = true;\n\n      if (options.hasOwnProperty('sessionToken')) {\n        aggregateOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(aggregateOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      if (!(0, _isArray.default)(pipeline) && (0, _typeof2.default)(pipeline) !== 'object') {\n        throw new Error('Invalid pipeline must be Array or Object');\n      }\n\n      if ((0, _keys.default)(this._where || {}).length) {\n        if (!(0, _isArray.default)(pipeline)) {\n          pipeline = [pipeline];\n        }\n\n        pipeline.unshift({\n          match: this._where\n        });\n      }\n\n      var params = {\n        pipeline: pipeline,\n        hint: this._hint,\n        explain: this._explain,\n        readPreference: this._readPreference\n      };\n      return controller.aggregate(this.className, params, aggregateOptions).then(function (results) {\n        return results.results;\n      });\n    }\n    /**\n     * Retrieves at most one Parse.Object that satisfies this query.\n     *\n     * Returns the object if there is one, otherwise undefined.\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the object when\n     * the query completes.\n     */\n\n  }, {\n    key: \"first\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseObject | void>*/\n    {\n      var _this4 = this;\n\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = this.toJSON();\n      params.limit = 1;\n      var select = this._select;\n\n      if (this._queriesLocalDatastore) {\n        return this._handleOfflineQuery(params).then(function (objects) {\n          if (!objects[0]) {\n            return undefined;\n          }\n\n          return objects[0];\n        });\n      }\n\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (response) {\n        var objects = response.results;\n\n        if (!objects[0]) {\n          return undefined;\n        }\n\n        if (!objects[0].className) {\n          objects[0].className = _this4.className;\n        } // Make sure the data object contains keys for all objects that\n        // have been requested with a select, so that our cached state\n        // updates correctly.\n\n\n        if (select) {\n          handleSelectResult(objects[0], select);\n        }\n\n        return _ParseObject.default.fromJSON(objects[0], !select);\n      });\n    }\n    /**\n     * Iterates over objects matching a query, calling a callback for each batch.\n     * If the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are processed\n     * in an unspecified order. The query may not have any sort order, and may\n     * not use limit or skip.\n     *\n     * @param {Function} callback Callback that will be called with each result\n     *     of the query.\n     * @param {object} options Valid options are:<ul>\n     *   <li>batchSize: How many objects to yield in each batch (default: 100)\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"eachBatch\",\n    value: function (callback\n    /*: (objs: Array<ParseObject>) => Promise<*>*/\n    , options\n    /*:: ?: BatchOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      var _context8;\n\n      options = options || {};\n\n      if (this._order || this._skip || this._limit >= 0) {\n        return _promise.default.reject('Cannot iterate on a query with sort, skip, or limit.');\n      }\n\n      var query = new ParseQuery(this.className);\n      query._limit = options.batchSize || 100;\n      query._include = (0, _map2.default)(_context8 = this._include).call(_context8, function (i) {\n        return i;\n      });\n\n      if (this._select) {\n        var _context9;\n\n        query._select = (0, _map2.default)(_context9 = this._select).call(_context9, function (s) {\n          return s;\n        });\n      }\n\n      query._hint = this._hint;\n      query._where = {};\n\n      for (var _attr in this._where) {\n        var val = this._where[_attr];\n\n        if ((0, _isArray.default)(val)) {\n          query._where[_attr] = (0, _map2.default)(val).call(val, function (v) {\n            return v;\n          });\n        } else if (val && (0, _typeof2.default)(val) === 'object') {\n          var conditionMap = {};\n          query._where[_attr] = conditionMap;\n\n          for (var cond in val) {\n            conditionMap[cond] = val[cond];\n          }\n        } else {\n          query._where[_attr] = val;\n        }\n      }\n\n      query.ascending('objectId');\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n\n      var finished = false;\n      var previousResults = [];\n      return (0, _promiseUtils.continueWhile)(function () {\n        return !finished;\n      }, /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n        var _yield$Promise$all, _yield$Promise$all2, results;\n\n        return _regenerator.default.wrap(function (_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return _promise.default.all([(0, _find.default)(query).call(query, findOptions), _promise.default.resolve(previousResults.length > 0 && callback(previousResults))]);\n\n              case 2:\n                _yield$Promise$all = _context10.sent;\n                _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 1);\n                results = _yield$Promise$all2[0];\n\n                if (!(results.length >= query._limit)) {\n                  _context10.next = 10;\n                  break;\n                }\n\n                query.greaterThan('objectId', results[results.length - 1].id);\n                previousResults = results;\n                _context10.next = 17;\n                break;\n\n              case 10:\n                if (!(results.length > 0)) {\n                  _context10.next = 16;\n                  break;\n                }\n\n                _context10.next = 13;\n                return _promise.default.resolve(callback(results));\n\n              case 13:\n                finished = true;\n                _context10.next = 17;\n                break;\n\n              case 16:\n                finished = true;\n\n              case 17:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee3);\n      })));\n    }\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback that will be called with each result\n     *     of the query.\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"each\",\n    value: function (callback\n    /*: (obj: ParseObject) => any*/\n    , options\n    /*:: ?: BatchOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      return this.eachBatch(function (results) {\n        var callbacksDone = _promise.default.resolve();\n\n        (0, _forEach.default)(results).call(results, function (result) {\n          callbacksDone = callbacksDone.then(function () {\n            return callback(result);\n          });\n        });\n        return callbacksDone;\n      }, options);\n    }\n    /**\n     * Adds a hint to force index selection. (https://docs.mongodb.com/manual/reference/operator/meta/hint/)\n     *\n     * @param {(string|object)} value String or Object of index that should be used when executing query\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"hint\",\n    value: function (value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof value === 'undefined') {\n        delete this._hint;\n      }\n\n      this._hint = value;\n      return this;\n    }\n    /**\n     * Investigates the query execution plan. Useful for optimizing queries. (https://docs.mongodb.com/manual/reference/operator/meta/explain/)\n     *\n     * @param {boolean} explain Used to toggle the information on the query plan.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"explain\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _explain\n      /*: boolean*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (typeof _explain !== 'boolean') {\n        throw new Error('You can only set explain to a boolean value');\n      }\n\n      this._explain = _explain;\n      return this;\n    }\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback <ul>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     *   <li>query: The query map was called upon.</li>\n     * </ul>\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"map\",\n    value: function () {\n      var _map = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(callback\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => any*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var _this5 = this;\n\n        var array, index;\n        return _regenerator.default.wrap(function (_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                array = [];\n                index = 0;\n                _context11.next = 4;\n                return this.each(function (object) {\n                  return _promise.default.resolve(callback(object, index, _this5)).then(function (result) {\n                    array.push(result);\n                    index += 1;\n                  });\n                }, options);\n\n              case 4:\n                return _context11.abrupt(\"return\", array);\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function () {\n        return _map.apply(this, arguments);\n      };\n    }()\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback <ul>\n     *   <li>accumulator: The accumulator accumulates the callback's return values. It is the accumulated value previously returned in the last invocation of the callback.</li>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     * </ul>\n     * @param {*} initialValue A value to use as the first argument to the first call of the callback. If no initialValue is supplied, the first object in the query will be used and skipped.\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"reduce\",\n    value: function () {\n      var _reduce = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(callback\n      /*: (accumulator: any, currentObject: ParseObject, index: number) => any*/\n      , initialValue\n      /*: any*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var accumulator, index;\n        return _regenerator.default.wrap(function (_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                accumulator = initialValue;\n                index = 0;\n                _context12.next = 4;\n                return this.each(function (object) {\n                  // If no initial value was given, we take the first object from the query\n                  // as the initial value and don't call the callback with it.\n                  if (index === 0 && initialValue === undefined) {\n                    accumulator = object;\n                    index += 1;\n                    return;\n                  }\n\n                  return _promise.default.resolve(callback(accumulator, object, index)).then(function (result) {\n                    accumulator = result;\n                    index += 1;\n                  });\n                }, options);\n\n              case 4:\n                if (!(index === 0 && initialValue === undefined)) {\n                  _context12.next = 6;\n                  break;\n                }\n\n                throw new TypeError('Reducing empty query result set with no initial value');\n\n              case 6:\n                return _context12.abrupt(\"return\", accumulator);\n\n              case 7:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function () {\n        return _reduce.apply(this, arguments);\n      };\n    }()\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback <ul>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     *   <li>query: The query filter was called upon.</li>\n     * </ul>\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"filter\",\n    value: function () {\n      var _filter = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(callback\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => boolean*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var _this6 = this;\n\n        var array, index;\n        return _regenerator.default.wrap(function (_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                array = [];\n                index = 0;\n                _context13.next = 4;\n                return this.each(function (object) {\n                  return _promise.default.resolve(callback(object, index, _this6)).then(function (flag) {\n                    if (flag) {\n                      array.push(object);\n                    }\n\n                    index += 1;\n                  });\n                }, options);\n\n              case 4:\n                return _context13.abrupt(\"return\", array);\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function () {\n        return _filter.apply(this, arguments);\n      };\n    }()\n    /** Query Conditions * */\n\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that the Parse.Object must contain.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"equalTo\",\n    value: function (key\n    /*: string | { [key: string]: any }*/\n    , value\n    /*: ?mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      var _this7 = this;\n\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        var _context14;\n\n        (0, _forEach.default)(_context14 = (0, _entries.default)(key)).call(_context14, function (_ref2) {\n          var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),\n              k = _ref3[0],\n              val = _ref3[1];\n\n          return _this7.equalTo(k, val);\n        });\n        return this;\n      }\n\n      if (typeof value === 'undefined') {\n        return this.doesNotExist(key);\n      }\n\n      this._where[key] = (0, _encode.default)(value, false, true);\n      return this;\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be not equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that must not be equalled.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"notEqualTo\",\n    value: function (key\n    /*: string | { [key: string]: any }*/\n    , value\n    /*: ?mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      var _this8 = this;\n\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        var _context15;\n\n        (0, _forEach.default)(_context15 = (0, _entries.default)(key)).call(_context15, function (_ref4) {\n          var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),\n              k = _ref5[0],\n              val = _ref5[1];\n\n          return _this8.notEqualTo(k, val);\n        });\n        return this;\n      }\n\n      return this._addCondition(key, '$ne', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be less than the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that provides an upper bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"lessThan\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$lt', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be greater than the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that provides an lower bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"greaterThan\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$gt', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be less than or equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that provides an upper bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"lessThanOrEqualTo\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$lte', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be greater than or equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param {*} value The value that provides an lower bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"greaterThanOrEqualTo\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$gte', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be contained in the provided list of values.\n     *\n     * @param {string} key The key to check.\n     * @param {*} value The values that will match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containedIn\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$in', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * not be contained in the provided list of values.\n     *\n     * @param {string} key The key to check.\n     * @param {*} value The values that will not match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"notContainedIn\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$nin', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be contained by the provided list of values. Get objects where all array elements match.\n     *\n     * @param {string} key The key to check.\n     * @param {Array} values The values that will match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containedBy\",\n    value: function (key\n    /*: string*/\n    , values\n    /*: Array<mixed>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$containedBy', values);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * contain each one of the provided list of values.\n     *\n     * @param {string} key The key to check.  This key's value must be an array.\n     * @param {Array} values The values that will match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containsAll\",\n    value: function (key\n    /*: string*/\n    , values\n    /*: Array<mixed>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$all', values);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * contain each one of the provided list of values starting with given strings.\n     *\n     * @param {string} key The key to check.  This key's value must be an array.\n     * @param {Array<string>} values The string values that will match as starting string.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containsAllStartingWith\",\n    value: function (key\n    /*: string*/\n    , values\n    /*: Array<string>*/\n    )\n    /*: ParseQuery*/\n    {\n      var _this = this;\n\n      if (!(0, _isArray.default)(values)) {\n        values = [values];\n      }\n\n      var regexObject = (0, _map2.default)(values).call(values, function (value) {\n        return {\n          $regex: _this._regexStartWith(value)\n        };\n      });\n      return this.containsAll(key, regexObject);\n    }\n    /**\n     * Adds a constraint for finding objects that contain the given key.\n     *\n     * @param {string} key The key that should exist.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"exists\",\n    value: function (key\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$exists', true);\n    }\n    /**\n     * Adds a constraint for finding objects that do not contain a given key.\n     *\n     * @param {string} key The key that should not exist\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotExist\",\n    value: function (key\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$exists', false);\n    }\n    /**\n     * Adds a regular expression constraint for finding string values that match\n     * the provided regular expression.\n     * This may be slow for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {RegExp} regex The regular expression pattern to match.\n     * @param {string} modifiers The regular expression mode.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matches\",\n    value: function (key\n    /*: string*/\n    , regex\n    /*: RegExp*/\n    , modifiers\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      this._addCondition(key, '$regex', regex);\n\n      if (!modifiers) {\n        modifiers = '';\n      }\n\n      if (regex.ignoreCase) {\n        modifiers += 'i';\n      }\n\n      if (regex.multiline) {\n        modifiers += 'm';\n      }\n\n      if (modifiers.length) {\n        this._addCondition(key, '$options', modifiers);\n      }\n\n      return this;\n    }\n    /**\n     * Adds a constraint that requires that a key's value matches a Parse.Query\n     * constraint.\n     *\n     * @param {string} key The key that the contains the object to match the\n     *                     query.\n     * @param {Parse.Query} query The query that should match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matchesQuery\",\n    value: function (key\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$inQuery', queryJSON);\n    }\n    /**\n     * Adds a constraint that requires that a key's value not matches a\n     * Parse.Query constraint.\n     *\n     * @param {string} key The key that the contains the object to match the\n     *                     query.\n     * @param {Parse.Query} query The query that should not match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotMatchQuery\",\n    value: function (key\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$notInQuery', queryJSON);\n    }\n    /**\n     * Adds a constraint that requires that a key's value matches a value in\n     * an object returned by a different Parse.Query.\n     *\n     * @param {string} key The key that contains the value that is being\n     *                     matched.\n     * @param {string} queryKey The key in the objects returned by the query to\n     *                          match against.\n     * @param {Parse.Query} query The query to run.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matchesKeyInQuery\",\n    value: function (key\n    /*: string*/\n    , queryKey\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$select', {\n        key: queryKey,\n        query: queryJSON\n      });\n    }\n    /**\n     * Adds a constraint that requires that a key's value not match a value in\n     * an object returned by a different Parse.Query.\n     *\n     * @param {string} key The key that contains the value that is being\n     *                     excluded.\n     * @param {string} queryKey The key in the objects returned by the query to\n     *                          match against.\n     * @param {Parse.Query} query The query to run.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotMatchKeyInQuery\",\n    value: function (key\n    /*: string*/\n    , queryKey\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$dontSelect', {\n        key: queryKey,\n        query: queryJSON\n      });\n    }\n    /**\n     * Adds a constraint for finding string values that contain a provided\n     * string.  This may be slow for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} substring The substring that the value must contain.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"contains\",\n    value: function (key\n    /*: string*/\n    , substring\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof substring !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this._addCondition(key, '$regex', quote(substring));\n    }\n    /**\n     * Adds a constraint for finding string values that contain a provided\n     * string. This may be slow for large datasets. Requires Parse-Server > 2.5.0\n     *\n     * In order to sort you must use select and ascending ($score is required)\n     *  <pre>\n     *   query.fullText('field', 'term');\n     *   query.ascending('$score');\n     *   query.select('$score');\n     *  </pre>\n     *\n     * To retrieve the weight / rank\n     *  <pre>\n     *   object->get('score');\n     *  </pre>\n     *\n     * You can define optionals by providing an object as a third parameter\n     *  <pre>\n     *   query.fullText('field', 'term', { language: 'es', diacriticSensitive: true });\n     *  </pre>\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} value The string to search\n     * @param {object} options (Optional)\n     * @param {string} options.language The language that determines the list of stop words for the search and the rules for the stemmer and tokenizer.\n     * @param {boolean} options.caseSensitive A boolean flag to enable or disable case sensitive search.\n     * @param {boolean} options.diacriticSensitive A boolean flag to enable or disable diacritic sensitive search.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fullText\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: string*/\n    , options\n    /*: ?Object*/\n    )\n    /*: ParseQuery*/\n    {\n      options = options || {};\n\n      if (!key) {\n        throw new Error('A key is required.');\n      }\n\n      if (!value) {\n        throw new Error('A search term is required');\n      }\n\n      if (typeof value !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      var fullOptions = {};\n      fullOptions.$term = value;\n\n      for (var option in options) {\n        switch (option) {\n          case 'language':\n            fullOptions.$language = options[option];\n            break;\n\n          case 'caseSensitive':\n            fullOptions.$caseSensitive = options[option];\n            break;\n\n          case 'diacriticSensitive':\n            fullOptions.$diacriticSensitive = options[option];\n            break;\n\n          default:\n            throw new Error(\"Unknown option: \".concat(option));\n        }\n      }\n\n      return this._addCondition(key, '$text', {\n        $search: fullOptions\n      });\n    }\n    /**\n     * Method to sort the full text search by text score\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"sortByTextScore\",\n    value: function () {\n      this.ascending('$score');\n      this.select(['$score']);\n      return this;\n    }\n    /**\n     * Adds a constraint for finding string values that start with a provided\n     * string.  This query will use the backend index, so it will be fast even\n     * for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} prefix The substring that the value must start with.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"startsWith\",\n    value: function (key\n    /*: string*/\n    , prefix\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof prefix !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this._addCondition(key, '$regex', this._regexStartWith(prefix));\n    }\n    /**\n     * Adds a constraint for finding string values that end with a provided\n     * string.  This will be slow for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} suffix The substring that the value must end with.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"endsWith\",\n    value: function (key\n    /*: string*/\n    , suffix\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof suffix !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this._addCondition(key, '$regex', \"\".concat(quote(suffix), \"$\"));\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"near\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!(point instanceof _ParseGeoPoint.default)) {\n        // Try to cast it as a GeoPoint\n        point = new _ParseGeoPoint.default(point);\n      }\n\n      return this._addCondition(key, '$nearSphere', point);\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {number} maxDistance Maximum distance (in radians) of results to return.\n     * @param {boolean} sorted A Bool value that is true if results should be\n     * sorted by distance ascending, false is no sorting is required,\n     * defaults to true.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinRadians\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , maxDistance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      if (sorted || sorted === undefined) {\n        this.near(key, point);\n        return this._addCondition(key, '$maxDistance', maxDistance);\n      }\n\n      return this._addCondition(key, '$geoWithin', {\n        $centerSphere: [[point.longitude, point.latitude], maxDistance]\n      });\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     * Radius of earth used is 3958.8 miles.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {number} maxDistance Maximum distance (in miles) of results to return.\n     * @param {boolean} sorted A Bool value that is true if results should be\n     * sorted by distance ascending, false is no sorting is required,\n     * defaults to true.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinMiles\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , maxDistance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      return this.withinRadians(key, point, maxDistance / 3958.8, sorted);\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     * Radius of earth used is 6371.0 kilometers.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {number} maxDistance Maximum distance (in kilometers) of results to return.\n     * @param {boolean} sorted A Bool value that is true if results should be\n     * sorted by distance ascending, false is no sorting is required,\n     * defaults to true.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinKilometers\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , maxDistance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      return this.withinRadians(key, point, maxDistance / 6371.0, sorted);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's\n     * coordinates be contained within a given rectangular geographic bounding\n     * box.\n     *\n     * @param {string} key The key to be constrained.\n     * @param {Parse.GeoPoint} southwest\n     *     The lower-left inclusive corner of the box.\n     * @param {Parse.GeoPoint} northeast\n     *     The upper-right inclusive corner of the box.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinGeoBox\",\n    value: function (key\n    /*: string*/\n    , southwest\n    /*: ParseGeoPoint*/\n    , northeast\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!(southwest instanceof _ParseGeoPoint.default)) {\n        southwest = new _ParseGeoPoint.default(southwest);\n      }\n\n      if (!(northeast instanceof _ParseGeoPoint.default)) {\n        northeast = new _ParseGeoPoint.default(northeast);\n      }\n\n      this._addCondition(key, '$within', {\n        $box: [southwest, northeast]\n      });\n\n      return this;\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's\n     * coordinates be contained within and on the bounds of a given polygon.\n     * Supports closed and open (last point is connected to first) paths\n     *\n     * Polygon must have at least 3 points\n     *\n     * @param {string} key The key to be constrained.\n     * @param {Array} points Array of Coordinates / GeoPoints\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinPolygon\",\n    value: function (key\n    /*: string*/\n    , points\n    /*: Array<Array<number>>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$geoWithin', {\n        $polygon: points\n      });\n    }\n    /**\n     * Add a constraint to the query that requires a particular key's\n     * coordinates that contains a ParseGeoPoint\n     *\n     * @param {string} key The key to be constrained.\n     * @param {Parse.GeoPoint} point\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"polygonContains\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$geoIntersects', {\n        $point: point\n      });\n    }\n    /** Query Orderings * */\n\n    /**\n     * Sorts the results in ascending order by the given key.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"ascending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      this._order = [];\n\n      for (var _len = arguments.length, keys = new Array(_len), _key5 = 0; _key5 < _len; _key5++) {\n        keys[_key5] = arguments[_key5];\n      }\n\n      return this.addAscending.apply(this, keys);\n    }\n    /**\n     * Sorts the results in ascending order by the given key,\n     * but can also add secondary sort descriptors without overwriting _order.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"addAscending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this9 = this;\n\n      if (!this._order) {\n        this._order = [];\n      }\n\n      for (var _len2 = arguments.length, keys = new Array(_len2), _key6 = 0; _key6 < _len2; _key6++) {\n        keys[_key6] = arguments[_key6];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        var _context16;\n\n        if ((0, _isArray.default)(key)) {\n          key = key.join();\n        }\n\n        _this9._order = (0, _concat.default)(_context16 = _this9._order).call(_context16, key.replace(/\\s/g, '').split(','));\n      });\n      return this;\n    }\n    /**\n     * Sorts the results in descending order by the given key.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"descending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      this._order = [];\n\n      for (var _len3 = arguments.length, keys = new Array(_len3), _key7 = 0; _key7 < _len3; _key7++) {\n        keys[_key7] = arguments[_key7];\n      }\n\n      return this.addDescending.apply(this, keys);\n    }\n    /**\n     * Sorts the results in descending order by the given key,\n     * but can also add secondary sort descriptors without overwriting _order.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"addDescending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this10 = this;\n\n      if (!this._order) {\n        this._order = [];\n      }\n\n      for (var _len4 = arguments.length, keys = new Array(_len4), _key8 = 0; _key8 < _len4; _key8++) {\n        keys[_key8] = arguments[_key8];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        var _context17, _context18;\n\n        if ((0, _isArray.default)(key)) {\n          key = key.join();\n        }\n\n        _this10._order = (0, _concat.default)(_context17 = _this10._order).call(_context17, (0, _map2.default)(_context18 = key.replace(/\\s/g, '').split(',')).call(_context18, function (k) {\n          return \"-\".concat(k);\n        }));\n      });\n      return this;\n    }\n    /** Query Options * */\n\n    /**\n     * Sets the number of results to skip before returning any results.\n     * This is useful for pagination.\n     * Default is to skip zero results.\n     *\n     * @param {number} n the number of results to skip.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"skip\",\n    value: function (n\n    /*: number*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof n !== 'number' || n < 0) {\n        throw new Error('You can only skip by a positive number');\n      }\n\n      this._skip = n;\n      return this;\n    }\n    /**\n     * Sets the limit of the number of results to return. The default limit is 100.\n     *\n     * @param {number} n the number of results to limit to.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"limit\",\n    value: function (n\n    /*: number*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof n !== 'number') {\n        throw new Error('You can only set the limit to a numeric value');\n      }\n\n      this._limit = n;\n      return this;\n    }\n    /**\n     * Sets the flag to include with response the total number of objects satisfying this query,\n     * despite limits/skip. Might be useful for pagination.\n     * Note that result of this query will be wrapped as an object with\n     * `results`: holding {ParseObject} array and `count`: integer holding total number\n     *\n     * @param {boolean} includeCount false - disable, true - enable.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withCount\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var includeCount\n      /*: boolean*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (typeof includeCount !== 'boolean') {\n        throw new Error('You can only set withCount to a boolean value');\n      }\n\n      this._count = includeCount;\n      return this;\n    }\n    /**\n     * Includes nested Parse.Objects for the provided key.  You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * You can include all nested Parse.Objects by passing in '*'.\n     * Requires Parse Server 3.0.0+\n     * <pre>query.include('*');</pre>\n     *\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to include.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"include\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this11 = this;\n\n      for (var _len5 = arguments.length, keys = new Array(_len5), _key9 = 0; _key9 < _len5; _key9++) {\n        keys[_key9] = arguments[_key9];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context19;\n\n          _this11._include = (0, _concat.default)(_context19 = _this11._include).call(_context19, key);\n        } else {\n          _this11._include.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Includes all nested Parse.Objects.\n     *\n     * Requires Parse Server 3.0.0+\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"includeAll\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.include('*');\n    }\n    /**\n     * Restricts the fields of the returned Parse.Objects to include only the\n     * provided keys.  If this is called multiple times, then all of the keys\n     * specified in each of the calls will be included.\n     *\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to include.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"select\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this12 = this;\n\n      if (!this._select) {\n        this._select = [];\n      }\n\n      for (var _len6 = arguments.length, keys = new Array(_len6), _key10 = 0; _key10 < _len6; _key10++) {\n        keys[_key10] = arguments[_key10];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context20;\n\n          _this12._select = (0, _concat.default)(_context20 = _this12._select).call(_context20, key);\n        } else {\n          _this12._select.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Restricts the fields of the returned Parse.Objects to all keys except the\n     * provided keys. Exclude takes precedence over select and include.\n     *\n     * Requires Parse Server 3.6.0+\n     *\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to exclude.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"exclude\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this13 = this;\n\n      for (var _len7 = arguments.length, keys = new Array(_len7), _key11 = 0; _key11 < _len7; _key11++) {\n        keys[_key11] = arguments[_key11];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context21;\n\n          _this13._exclude = (0, _concat.default)(_context21 = _this13._exclude).call(_context21, key);\n        } else {\n          _this13._exclude.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Changes the read preference that the backend will use when performing the query to the database.\n     *\n     * @param {string} readPreference The read preference for the main query.\n     * @param {string} includeReadPreference The read preference for the queries to include pointers.\n     * @param {string} subqueryReadPreference The read preference for the sub queries.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"readPreference\",\n    value: function (_readPreference\n    /*: string*/\n    , includeReadPreference\n    /*:: ?: string*/\n    , subqueryReadPreference\n    /*:: ?: string*/\n    )\n    /*: ParseQuery*/\n    {\n      this._readPreference = _readPreference;\n      this._includeReadPreference = includeReadPreference;\n      this._subqueryReadPreference = subqueryReadPreference;\n      return this;\n    }\n  }, {\n    key: \"onChange\",\n    value: function (onUpdate\n    /*: any*/\n    , onError\n    /*:: ?: any*/\n\n    /*:: ?: string*/\n    )\n    /*: Promise<LiveQuerySubscription>*/\n    {\n      var sub = null;\n      this.subscribe().then(function (subscription) {\n        sub = subscription;\n        subscription.on('create', function (object) {\n          onUpdate(object);\n        });\n        subscription.on('update', function (object) {\n          onUpdate(object);\n        });\n        subscription.on('error', function (err) {\n          if (onError) {\n            onError(err);\n          } else {\n            // eslint-disable-next-line no-console\n            console.warn('Subscription error', err);\n          }\n        });\n      }).catch(function (err) {\n        if (onError) {\n          onError(err);\n        } else {\n          // eslint-disable-next-line no-console\n          console.warn('Subscription connection error', err);\n        }\n      });\n      return function () {\n        if (sub) {\n          sub.unsubscribe();\n        }\n      };\n    }\n    /**\n     * Subscribe this query to get liveQuery updates\n     *\n     * @param {string} sessionToken (optional) Defaults to the currentUser\n     * @returns {Promise<LiveQuerySubscription>} Returns the liveQuerySubscription, it's an event emitter\n     * which can be used to get liveQuery updates.\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(sessionToken\n      /*:: ?: string*/\n      ) {\n        var currentUser, liveQueryClient, subscription;\n        return _regenerator.default.wrap(function (_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return _CoreManager.default.getUserController().currentUserAsync();\n\n              case 2:\n                currentUser = _context22.sent;\n\n                if (!sessionToken) {\n                  sessionToken = currentUser ? currentUser.getSessionToken() : undefined;\n                }\n\n                _context22.next = 6;\n                return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();\n\n              case 6:\n                liveQueryClient = _context22.sent;\n\n                if (liveQueryClient.shouldOpen()) {\n                  liveQueryClient.open();\n                }\n\n                subscription = liveQueryClient.subscribe(this, sessionToken);\n                return _context22.abrupt(\"return\", subscription.subscribePromise.then(function () {\n                  return subscription;\n                }));\n\n              case 10:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function () {\n        return _subscribe.apply(this, arguments);\n      };\n    }()\n    /**\n     * Constructs a Parse.Query that is the OR of the passed in queries.  For\n     * example:\n     * <pre>var compoundQuery = Parse.Query.or(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is an or of the query1, query2, and\n     * query3.\n     *\n     * @param {...Parse.Query} queries The list of queries to OR.\n     * @static\n     * @returns {Parse.Query} The query that is the OR of the passed in queries.\n     */\n\n  }, {\n    key: \"fromNetwork\",\n    value:\n    /**\n     * Change the source of this query to the server.\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n    function ()\n    /*: ParseQuery*/\n    {\n      this._queriesLocalDatastore = false;\n      this._localDatastorePinName = null;\n      return this;\n    }\n    /**\n     * Changes the source of this query to all pinned objects.\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromLocalDatastore\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.fromPinWithName(null);\n    }\n    /**\n     * Changes the source of this query to the default group of pinned objects.\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromPin\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.fromPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n    /**\n     * Changes the source of this query to a specific group of pinned objects.\n     *\n     * @param {string} name The name of query source.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromPinWithName\",\n    value: function (name\n    /*:: ?: string*/\n    )\n    /*: ParseQuery*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (localDatastore.checkIfEnabled()) {\n        this._queriesLocalDatastore = true;\n        this._localDatastorePinName = name;\n      }\n\n      return this;\n    }\n    /**\n     * Cancels the current network request (if any is running).\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this14 = this;\n\n      if (this._xhrRequest.task && typeof this._xhrRequest.task.abort === 'function') {\n        this._xhrRequest.task._aborted = true;\n\n        this._xhrRequest.task.abort();\n\n        this._xhrRequest.task = null;\n\n        this._xhrRequest.onchange = function () {};\n\n        return this;\n      }\n\n      return this._xhrRequest.onchange = function () {\n        return _this14.cancel();\n      };\n    }\n  }, {\n    key: \"_setRequestTask\",\n    value: function (options) {\n      var _this15 = this;\n\n      options.requestTask = function (task) {\n        _this15._xhrRequest.task = task;\n\n        _this15._xhrRequest.onchange();\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function (className\n    /*: string*/\n    , json\n    /*: QueryJSON*/\n    )\n    /*: ParseQuery*/\n    {\n      var query = new ParseQuery(className);\n      return query.withJSON(json);\n    }\n  }, {\n    key: \"or\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len8 = arguments.length, queries = new Array(_len8), _key12 = 0; _key12 < _len8; _key12++) {\n        queries[_key12] = arguments[_key12];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._orQuery(queries);\n\n      return query;\n    }\n    /**\n     * Constructs a Parse.Query that is the AND of the passed in queries.  For\n     * example:\n     * <pre>var compoundQuery = Parse.Query.and(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is an and of the query1, query2, and\n     * query3.\n     *\n     * @param {...Parse.Query} queries The list of queries to AND.\n     * @static\n     * @returns {Parse.Query} The query that is the AND of the passed in queries.\n     */\n\n  }, {\n    key: \"and\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len9 = arguments.length, queries = new Array(_len9), _key13 = 0; _key13 < _len9; _key13++) {\n        queries[_key13] = arguments[_key13];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._andQuery(queries);\n\n      return query;\n    }\n    /**\n     * Constructs a Parse.Query that is the NOR of the passed in queries.  For\n     * example:\n     * <pre>const compoundQuery = Parse.Query.nor(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is a nor of the query1, query2, and\n     * query3.\n     *\n     * @param {...Parse.Query} queries The list of queries to NOR.\n     * @static\n     * @returns {Parse.Query} The query that is the NOR of the passed in queries.\n     */\n\n  }, {\n    key: \"nor\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len10 = arguments.length, queries = new Array(_len10), _key14 = 0; _key14 < _len10; _key14++) {\n        queries[_key14] = arguments[_key14];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._norQuery(queries);\n\n      return query;\n    }\n  }]);\n  return ParseQuery;\n}();\n\nvar DefaultController = {\n  find: function (className\n  /*: string*/\n  , params\n  /*: QueryJSON*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<ParseObject>>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', \"classes/\".concat(className), params, options);\n  },\n  aggregate: function (className\n  /*: string*/\n  , params\n  /*: any*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<mixed>>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', \"aggregate/\".concat(className), params, options);\n  }\n};\n\n_CoreManager.default.setQueryController(DefaultController);\n\nvar _default = ParseQuery;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/Twitter-Start/node_modules/moralis/lib/browser/ParseQuery.js"],"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","default","_regenerator","_slicedToArray2","_toConsumableArray2","_asyncToGenerator2","_classCallCheck2","_createClass2","_defineProperty2","_typeof2","_forEach","_indexOf","_keys","_slice","_map2","_filter2","_keys2","_concat","_includes","_sort","_splice","_promise","_find","_isArray","_entries","_CoreManager","_encode","_promiseUtils","_ParseError","_ParseGeoPoint","_ParseObject","_OfflineQuery","_LocalDatastoreUtils","quote","s","concat","replace","_getClassNameFromQueries","queries","className","call","q","Error","handleSelectResult","data","select","serverDataMask","field","hasSubObjectSelect","hasOwnProperty","undefined","pathComponents","split","_obj","serverMask","component","index","arr","length","serverData","getObjectStateController","getServerData","id","objectId","copyMissingDataWithMask","src","dest","mask","copyThisLevel","_key","_key2","handleOfflineSort","a","b","sorts","order","operator","isDescending","substring","test","INVALID_KEY_NAME","field1","get","field2","remainingSorts","ParseQuery","objectClass","_obj2","TypeError","_where","_include","_exclude","_count","_limit","_skip","_readPreference","_includeReadPreference","_subqueryReadPreference","_queriesLocalDatastore","_localDatastorePinName","_extraOptions","_xhrRequest","task","onchange","key","queryJSON","toJSON","where","$or","$and","$nor","condition","string","_handleOfflineQuery2","mark","_callee","params","_context","_this2","localDatastore","objects","results","keys","alwaysSelectedKeys","count","limit","wrap","_context3","prev","next","validateQuery","getLocalDatastore","_serializeObjectsFromPinName","sent","json","object","fromJSON","_localId","matchesQuery","_context2","_toFullJSON","skip","abrupt","stop","apply","arguments","include","join","excludeKeys","_select","_order","readPreference","includeReadPreference","subqueryReadPreference","_hint","hint","_explain","explain","_key3","_key4","_context4","options","equalTo","firstOptions","useMasterKey","sessionToken","context","first","then","response","errorObject","OBJECT_NOT_FOUND","reject","_this3","findOptions","_setRequestTask","controller","getQueryController","_handleOfflineQuery","_context5","override","_findAll","_callee2","result","_context7","eachBatch","_context6","distinctOptions","distinct","aggregate","pipeline","aggregateOptions","unshift","match","_this4","callback","_context8","query","batchSize","i","_context9","_attr","val","v","conditionMap","cond","ascending","finished","previousResults","continueWhile","_callee3","_yield$Promise$all","_yield$Promise$all2","_context10","all","resolve","greaterThan","callbacksDone","_map","_callee4","_this5","array","_context11","each","push","_reduce","_callee5","initialValue","accumulator","_context12","_filter","_callee6","_this6","_context13","flag","_this7","_context14","_ref2","_ref3","k","doesNotExist","_this8","_context15","_ref4","_ref5","notEqualTo","_addCondition","values","_this","regexObject","$regex","_regexStartWith","containsAll","regex","modifiers","ignoreCase","multiline","queryKey","fullOptions","$term","option","$language","$caseSensitive","$diacriticSensitive","$search","prefix","suffix","point","maxDistance","sorted","near","$centerSphere","longitude","latitude","withinRadians","southwest","northeast","$box","points","$polygon","$point","_len","Array","_key5","addAscending","_this9","_len2","_key6","_context16","_len3","_key7","addDescending","_this10","_len4","_key8","_context17","_context18","n","includeCount","_this11","_len5","_key9","_context19","_this12","_len6","_key10","_context20","_this13","_len7","_key11","_context21","onUpdate","onError","sub","subscribe","subscription","on","err","console","warn","catch","unsubscribe","_subscribe","_callee7","currentUser","liveQueryClient","_context22","getUserController","currentUserAsync","getSessionToken","getLiveQueryController","getDefaultLiveQueryClient","shouldOpen","open","subscribePromise","fromPinWithName","DEFAULT_PIN","name","checkIfEnabled","_this14","abort","_aborted","cancel","_this15","requestTask","withJSON","_len8","_key12","_orQuery","_len9","_key13","_andQuery","_len10","_key14","_norQuery","DefaultController","find","RESTController","getRESTController","request","setQueryController","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/slicedToArray\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/toConsumableArray\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _slice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\"));\n\nvar _map2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _filter2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\"));\n\nvar _keys2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/keys\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _sort = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/sort\"));\n\nvar _splice = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/splice\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _entries = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/entries\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseGeoPoint = _interopRequireDefault(require(\"./ParseGeoPoint\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _OfflineQuery = _interopRequireDefault(require(\"./OfflineQuery\"));\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n/*\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Converts a string into a regex that matches it.\n * Surrounding with \\Q .. \\E does this, we just need to escape any \\E's in\n * the text separately.\n *\n * @param s\n * @private\n * @returns {string}\n */\n\n\nfunction quote(s\n/*: string*/\n)\n/*: string*/\n{\n  return \"\\\\Q\".concat(s.replace('\\\\E', '\\\\E\\\\\\\\E\\\\Q'), \"\\\\E\");\n}\n/**\n * Extracts the class name from queries. If not all queries have the same\n * class name an error will be thrown.\n *\n * @param queries\n * @private\n * @returns {string}\n */\n\n\nfunction _getClassNameFromQueries(queries\n/*: Array<ParseQuery>*/\n)\n/*: ?string*/\n{\n  var className = null;\n  (0, _forEach.default)(queries).call(queries, function (q) {\n    if (!className) {\n      // eslint-disable-next-line prefer-destructuring\n      className = q.className;\n    }\n\n    if (className !== q.className) {\n      throw new Error('All queries must be for the same class.');\n    }\n  });\n  return className;\n}\n/*\n * Handles pre-populating the result data of a query with select fields,\n * making sure that the data object contains keys for all objects that have\n * been requested with a select, so that our cached state updates correctly.\n */\n\n\nfunction handleSelectResult(data\n/*: any*/\n, select\n/*: Array<string>*/\n) {\n  var serverDataMask = {};\n  (0, _forEach.default)(select).call(select, function (field) {\n    var hasSubObjectSelect = (0, _indexOf.default)(field).call(field, '.') !== -1;\n\n    if (!hasSubObjectSelect && !data.hasOwnProperty(field)) {\n      // this field was selected, but is missing from the retrieved data\n      data[field] = undefined;\n    } else if (hasSubObjectSelect) {\n      // this field references a sub-object,\n      // so we need to walk down the path components\n      var pathComponents = field.split('.');\n      var _obj = data;\n      var serverMask = serverDataMask;\n      (0, _forEach.default)(pathComponents).call(pathComponents, function (component, index, arr) {\n        // add keys if the expected data is missing\n        if (_obj && !_obj.hasOwnProperty(component)) {\n          _obj[component] = undefined;\n        }\n\n        if (_obj && (0, _typeof2.default)(_obj) === 'object') {\n          _obj = _obj[component];\n        } // add this path component to the server mask so we can fill it in later if needed\n\n\n        if (index < arr.length - 1) {\n          if (!serverMask[component]) {\n            serverMask[component] = {};\n          }\n\n          serverMask = serverMask[component];\n        }\n      });\n    }\n  });\n\n  if ((0, _keys.default)(serverDataMask).length > 0) {\n    // When selecting from sub-objects, we don't want to blow away the missing\n    // information that we may have retrieved before. We've already added any\n    // missing selected keys to sub-objects, but we still need to add in the\n    // data for any previously retrieved sub-objects that were not selected.\n    var serverData = _CoreManager.default.getObjectStateController().getServerData({\n      id: data.objectId,\n      className: data.className\n    });\n\n    copyMissingDataWithMask(serverData, data, serverDataMask, false);\n  }\n}\n\nfunction copyMissingDataWithMask(src, dest, mask, copyThisLevel) {\n  // copy missing elements at this level\n  if (copyThisLevel) {\n    for (var _key in src) {\n      if (src.hasOwnProperty(_key) && !dest.hasOwnProperty(_key)) {\n        dest[_key] = src[_key];\n      }\n    }\n  }\n\n  for (var _key2 in mask) {\n    if (dest[_key2] !== undefined && dest[_key2] !== null && src !== undefined && src !== null) {\n      // traverse into objects as needed\n      copyMissingDataWithMask(src[_key2], dest[_key2], mask[_key2], true);\n    }\n  }\n}\n\nfunction handleOfflineSort(a, b, sorts) {\n  var order = sorts[0];\n  var operator = (0, _slice.default)(order).call(order, 0, 1);\n  var isDescending = operator === '-';\n\n  if (isDescending) {\n    order = order.substring(1);\n  }\n\n  if (order === '_created_at') {\n    order = 'createdAt';\n  }\n\n  if (order === '_updated_at') {\n    order = 'updatedAt';\n  }\n\n  if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(order) || order === 'password') {\n    throw new _ParseError.default(_ParseError.default.INVALID_KEY_NAME, \"Invalid Key: \".concat(order));\n  }\n\n  var field1 = a.get(order);\n  var field2 = b.get(order);\n\n  if (field1 < field2) {\n    return isDescending ? 1 : -1;\n  }\n\n  if (field1 > field2) {\n    return isDescending ? -1 : 1;\n  }\n\n  if (sorts.length > 1) {\n    var remainingSorts = (0, _slice.default)(sorts).call(sorts, 1);\n    return handleOfflineSort(a, b, remainingSorts);\n  }\n\n  return 0;\n}\n/**\n * Creates a new parse Parse.Query for the given Parse.Object subclass.\n *\n * <p>Parse.Query defines a query that is used to fetch Parse.Objects. The\n * most common use case is finding all objects that match a query through the\n * <code>find</code> method. for example, this sample code fetches all objects\n * of class <code>myclass</code>. it calls a different function depending on\n * whether the fetch succeeded or not.\n *\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.find().then((results) => {\n *   // results is an array of parse.object.\n * }).catch((error) =>  {\n *  // error is an instance of parse.error.\n * });</pre></p>\n *\n * <p>a Parse.Query can also be used to retrieve a single object whose id is\n * known, through the get method. for example, this sample code fetches an\n * object of class <code>myclass</code> and id <code>myid</code>. it calls a\n * different function depending on whether the fetch succeeded or not.\n *\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.get(myid).then((object) => {\n *     // object is an instance of parse.object.\n * }).catch((error) =>  {\n *  // error is an instance of parse.error.\n * });</pre></p>\n *\n * <p>a Parse.Query can also be used to count the number of objects that match\n * the query without retrieving all of those objects. for example, this\n * sample code counts the number of objects of the class <code>myclass</code>\n * <pre>\n * var query = new Parse.Query(myclass);\n * query.count().then((number) => {\n *     // there are number instances of myclass.\n * }).catch((error) => {\n *     // error is an instance of Parse.Error.\n * });</pre></p>\n *\n * @alias Parse.Query\n */\n\n\nvar ParseQuery = /*#__PURE__*/function () {\n  /**\n   * @property {string} className\n   */\n\n  /**\n   * @param {(string | Parse.Object)} objectClass An instance of a subclass of Parse.Object, or a Parse className string.\n   */\n  function ParseQuery(objectClass\n  /*: string | ParseObject*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseQuery);\n    (0, _defineProperty2.default)(this, \"className\", void 0);\n    (0, _defineProperty2.default)(this, \"_where\", void 0);\n    (0, _defineProperty2.default)(this, \"_include\", void 0);\n    (0, _defineProperty2.default)(this, \"_exclude\", void 0);\n    (0, _defineProperty2.default)(this, \"_select\", void 0);\n    (0, _defineProperty2.default)(this, \"_limit\", void 0);\n    (0, _defineProperty2.default)(this, \"_skip\", void 0);\n    (0, _defineProperty2.default)(this, \"_count\", void 0);\n    (0, _defineProperty2.default)(this, \"_order\", void 0);\n    (0, _defineProperty2.default)(this, \"_readPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_includeReadPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_subqueryReadPreference\", void 0);\n    (0, _defineProperty2.default)(this, \"_queriesLocalDatastore\", void 0);\n    (0, _defineProperty2.default)(this, \"_localDatastorePinName\", void 0);\n    (0, _defineProperty2.default)(this, \"_extraOptions\", void 0);\n    (0, _defineProperty2.default)(this, \"_hint\", void 0);\n    (0, _defineProperty2.default)(this, \"_explain\", void 0);\n    (0, _defineProperty2.default)(this, \"_xhrRequest\", void 0);\n\n    if (typeof objectClass === 'string') {\n      if (objectClass === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        this.className = '_User';\n      } else {\n        this.className = objectClass;\n      }\n    } else if (objectClass instanceof _ParseObject.default) {\n      this.className = objectClass.className;\n    } else if (typeof objectClass === 'function') {\n      if (typeof objectClass.className === 'string') {\n        this.className = objectClass.className;\n      } else {\n        var _obj2 = new objectClass();\n\n        this.className = _obj2.className;\n      }\n    } else {\n      throw new TypeError('A ParseQuery must be constructed with a ParseObject or class name.');\n    }\n\n    this._where = {};\n    this._include = [];\n    this._exclude = [];\n    this._count = false; // negative limit is not sent in the server request\n\n    this._limit = -1;\n    this._skip = 0;\n    this._readPreference = null;\n    this._includeReadPreference = null;\n    this._subqueryReadPreference = null;\n    this._queriesLocalDatastore = false;\n    this._localDatastorePinName = null;\n    this._extraOptions = {};\n    this._xhrRequest = {\n      task: null,\n      onchange: function () {}\n    };\n  }\n  /**\n   * Adds constraint that at least one of the passed in queries matches.\n   *\n   * @param {Array} queries\n   * @returns {Parse.Query} Returns the query, so you can chain this call.\n   */\n\n\n  (0, _createClass2.default)(ParseQuery, [{\n    key: \"_orQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$or = queryJSON;\n      return this;\n    }\n    /**\n     * Adds constraint that all of the passed in queries match.\n     *\n     * @param {Array} queries\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"_andQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$and = queryJSON;\n      return this;\n    }\n    /**\n     * Adds constraint that none of the passed in queries match.\n     *\n     * @param {Array} queries\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"_norQuery\",\n    value: function (queries\n    /*: Array<ParseQuery>*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = (0, _map2.default)(queries).call(queries, function (q) {\n        return q.toJSON().where;\n      });\n      this._where.$nor = queryJSON;\n      return this;\n    }\n    /**\n     * Helper for condition queries\n     *\n     * @param key\n     * @param condition\n     * @param value\n     * @returns {Parse.Query}\n     */\n\n  }, {\n    key: \"_addCondition\",\n    value: function (key\n    /*: string*/\n    , condition\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!this._where[key] || typeof this._where[key] === 'string') {\n        this._where[key] = {};\n      }\n\n      this._where[key][condition] = (0, _encode.default)(value, false, true);\n      return this;\n    }\n    /**\n     * Converts string for regular expression at the beginning\n     *\n     * @param string\n     * @returns {string}\n     */\n\n  }, {\n    key: \"_regexStartWith\",\n    value: function (string\n    /*: string*/\n    )\n    /*: string*/\n    {\n      return \"^\".concat(quote(string));\n    }\n  }, {\n    key: \"_handleOfflineQuery\",\n    value: function () {\n      var _handleOfflineQuery2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(params\n      /*: any*/\n      ) {\n        var _context,\n            _this2 = this;\n\n        var localDatastore, objects, results, keys, alwaysSelectedKeys, sorts, count, limit;\n        return _regenerator.default.wrap(function (_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _OfflineQuery.default.validateQuery(this);\n\n                localDatastore = _CoreManager.default.getLocalDatastore();\n                _context3.next = 4;\n                return localDatastore._serializeObjectsFromPinName(this._localDatastorePinName);\n\n              case 4:\n                objects = _context3.sent;\n                results = (0, _filter2.default)(_context = (0, _map2.default)(objects).call(objects, function (json, index, arr) {\n                  var object = _ParseObject.default.fromJSON(json, false);\n\n                  if (json._localId && !json.objectId) {\n                    object._localId = json._localId;\n                  }\n\n                  if (!_OfflineQuery.default.matchesQuery(_this2.className, object, arr, _this2)) {\n                    return null;\n                  }\n\n                  return object;\n                })).call(_context, function (object) {\n                  return object !== null;\n                });\n\n                if ((0, _keys2.default)(params)) {\n                  keys = (0, _keys2.default)(params).split(',');\n                  alwaysSelectedKeys = ['className', 'objectId', 'createdAt', 'updatedAt', 'ACL'];\n                  keys = (0, _concat.default)(keys).call(keys, alwaysSelectedKeys);\n                  results = (0, _map2.default)(results).call(results, function (object) {\n                    var _context2;\n\n                    var json = object._toFullJSON();\n\n                    (0, _forEach.default)(_context2 = (0, _keys.default)(json)).call(_context2, function (key) {\n                      if (!(0, _includes.default)(keys).call(keys, key)) {\n                        delete json[key];\n                      }\n                    });\n                    return _ParseObject.default.fromJSON(json, false);\n                  });\n                }\n\n                if (params.order) {\n                  sorts = params.order.split(',');\n                  (0, _sort.default)(results).call(results, function (a, b) {\n                    return handleOfflineSort(a, b, sorts);\n                  });\n                } // count total before applying limit/skip\n\n\n                if (params.count) {\n                  // total count from response\n                  count = results.length;\n                }\n\n                if (params.skip) {\n                  if (params.skip >= results.length) {\n                    results = [];\n                  } else {\n                    results = (0, _splice.default)(results).call(results, params.skip, results.length);\n                  }\n                }\n\n                limit = results.length;\n\n                if (params.limit !== 0 && params.limit < results.length) {\n                  // eslint-disable-next-line prefer-destructuring\n                  limit = params.limit;\n                }\n\n                results = (0, _splice.default)(results).call(results, 0, limit);\n\n                if (!(typeof count === 'number')) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  results: results,\n                  count: count\n                });\n\n              case 15:\n                return _context3.abrupt(\"return\", results);\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function () {\n        return _handleOfflineQuery2.apply(this, arguments);\n      };\n    }()\n    /**\n     * Returns a JSON representation of this query.\n     *\n     * @returns {object} The JSON representation of the query.\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: QueryJSON*/\n    {\n      var params\n      /*: QueryJSON*/\n      = {\n        where: this._where\n      };\n\n      if (this._include.length) {\n        params.include = this._include.join(',');\n      }\n\n      if (this._exclude.length) {\n        params.excludeKeys = this._exclude.join(',');\n      }\n\n      if (this._select) {\n        params.keys = this._select.join(',');\n      }\n\n      if (this._count) {\n        params.count = 1;\n      }\n\n      if (this._limit >= 0) {\n        params.limit = this._limit;\n      }\n\n      if (this._skip > 0) {\n        params.skip = this._skip;\n      }\n\n      if (this._order) {\n        params.order = this._order.join(',');\n      }\n\n      if (this._readPreference) {\n        params.readPreference = this._readPreference;\n      }\n\n      if (this._includeReadPreference) {\n        params.includeReadPreference = this._includeReadPreference;\n      }\n\n      if (this._subqueryReadPreference) {\n        params.subqueryReadPreference = this._subqueryReadPreference;\n      }\n\n      if (this._hint) {\n        params.hint = this._hint;\n      }\n\n      if (this._explain) {\n        params.explain = true;\n      }\n\n      for (var _key3 in this._extraOptions) {\n        params[_key3] = this._extraOptions[_key3];\n      }\n\n      return params;\n    }\n    /**\n     * Return a query with conditions from json, can be useful to send query from server side to client\n     * Not static, all query conditions was set before calling this method will be deleted.\n     * For example on the server side we have\n     * var query = new Parse.Query(\"className\");\n     * query.equalTo(key: value);\n     * query.limit(100);\n     * ... (others queries)\n     * Create JSON representation of Query Object\n     * var jsonFromServer = query.fromJSON();\n     *\n     * On client side getting query:\n     * var query = new Parse.Query(\"className\");\n     * query.fromJSON(jsonFromServer);\n     *\n     * and continue to query...\n     * query.skip(100).find().then(...);\n     *\n     * @param {QueryJSON} json from Parse.Query.toJSON() method\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withJSON\",\n    value: function (json\n    /*: QueryJSON*/\n    )\n    /*: ParseQuery*/\n    {\n      if (json.where) {\n        this._where = json.where;\n      }\n\n      if (json.include) {\n        this._include = json.include.split(',');\n      }\n\n      if ((0, _keys2.default)(json)) {\n        this._select = (0, _keys2.default)(json).split(',');\n      }\n\n      if (json.excludeKeys) {\n        this._exclude = json.excludeKeys.split(',');\n      }\n\n      if (json.count) {\n        this._count = json.count === 1;\n      }\n\n      if (json.limit) {\n        this._limit = json.limit;\n      }\n\n      if (json.skip) {\n        this._skip = json.skip;\n      }\n\n      if (json.order) {\n        this._order = json.order.split(',');\n      }\n\n      if (json.readPreference) {\n        this._readPreference = json.readPreference;\n      }\n\n      if (json.includeReadPreference) {\n        this._includeReadPreference = json.includeReadPreference;\n      }\n\n      if (json.subqueryReadPreference) {\n        this._subqueryReadPreference = json.subqueryReadPreference;\n      }\n\n      if (json.hint) {\n        this._hint = json.hint;\n      }\n\n      if (json.explain) {\n        this._explain = !!json.explain;\n      }\n\n      for (var _key4 in json) {\n        if (json.hasOwnProperty(_key4)) {\n          var _context4;\n\n          if ((0, _indexOf.default)(_context4 = ['where', 'include', 'keys', 'count', 'limit', 'skip', 'order', 'readPreference', 'includeReadPreference', 'subqueryReadPreference', 'hint', 'explain']).call(_context4, _key4) === -1) {\n            this._extraOptions[_key4] = json[_key4];\n          }\n        }\n      }\n\n      return this;\n    }\n    /**\n     * Static method to restore Parse.Query by json representation\n     * Internally calling Parse.Query.withJSON\n     *\n     * @param {string} className\n     * @param {QueryJSON} json from Parse.Query.toJSON() method\n     * @returns {Parse.Query} new created query\n     */\n\n  }, {\n    key: \"get\",\n    value:\n    /**\n     * Constructs a Parse.Object whose id is already known by fetching data from\n     * the server. Unlike the <code>first</code> method, it never returns undefined.\n     *\n     * @param {string} objectId The id of the object to be fetched.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the result when\n     * the query completes.\n     */\n    function (objectId\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseObject>*/\n    {\n      this.equalTo('objectId', objectId);\n      var firstOptions = {};\n\n      if (options && options.hasOwnProperty('useMasterKey')) {\n        firstOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options && options.hasOwnProperty('sessionToken')) {\n        firstOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options && options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        firstOptions.context = options.context;\n      }\n\n      return this.first(firstOptions).then(function (response) {\n        if (response) {\n          return response;\n        }\n\n        var errorObject = new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'Object not found.');\n        return _promise.default.reject(errorObject);\n      });\n    }\n    /**\n     * Retrieves a list of ParseObjects that satisfy this query.\n     *\n     * @param {object} options Valid options\n     * are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the results when\n     * the query completes.\n     */\n\n  }, {\n    key: \"find\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<ParseObject>>*/\n    {\n      var _this3 = this;\n\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var select = this._select;\n\n      if (this._queriesLocalDatastore) {\n        return this._handleOfflineQuery(this.toJSON());\n      }\n\n      return (0, _find.default)(controller).call(controller, this.className, this.toJSON(), findOptions).then(function (response) {\n        var _context5; // Return generic object when explain is used\n\n\n        if (_this3._explain) {\n          return response.results;\n        }\n\n        var results = (0, _map2.default)(_context5 = response.results).call(_context5, function (data) {\n          // In cases of relations, the server may send back a className\n          // on the top level of the payload\n          var override = response.className || _this3.className;\n\n          if (!data.className) {\n            data.className = override;\n          } // Make sure the data object contains keys for all objects that\n          // have been requested with a select, so that our cached state\n          // updates correctly.\n\n\n          if (select) {\n            handleSelectResult(data, select);\n          }\n\n          return _ParseObject.default.fromJSON(data, !select);\n        });\n        var count = response.count;\n\n        if (typeof count === 'number') {\n          return {\n            results: results,\n            count: count\n          };\n        }\n\n        return results;\n      });\n    }\n    /**\n     * Retrieves a complete list of ParseObjects that satisfy this query.\n     * Using `eachBatch` under the hood to fetch all the valid objects.\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>batchSize: How many objects to yield in each batch (default: 100)\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that is resolved with the results when\n     * the query completes.\n     */\n\n  }, {\n    key: \"findAll\",\n    value: function () {\n      var _findAll = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(options\n      /*:: ?: BatchOptions*/\n      ) {\n        var result;\n        return _regenerator.default.wrap(function (_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                result\n                /*: ParseObject[]*/\n                = [];\n                _context7.next = 3;\n                return this.eachBatch(function (objects\n                /*: ParseObject[]*/\n                ) {\n                  var _context6;\n\n                  result = (0, _concat.default)(_context6 = []).call(_context6, (0, _toConsumableArray2.default)(result), (0, _toConsumableArray2.default)(objects));\n                }, options);\n\n              case 3:\n                return _context7.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function () {\n        return _findAll.apply(this, arguments);\n      };\n    }()\n    /**\n     * Counts the number of objects that match this query.\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the count when\n     * the query completes.\n     */\n\n  }, {\n    key: \"count\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<number>*/\n    {\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = this.toJSON();\n      params.limit = 0;\n      params.count = 1;\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (result) {\n        return result.count;\n      });\n    }\n    /**\n     * Executes a distinct query and returns unique values\n     *\n     * @param {string} key A field to find distinct values\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the query completes.\n     */\n\n  }, {\n    key: \"distinct\",\n    value: function (key\n    /*: string*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<mixed>>*/\n    {\n      options = options || {};\n      var distinctOptions = {};\n      distinctOptions.useMasterKey = true;\n\n      if (options.hasOwnProperty('sessionToken')) {\n        distinctOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(distinctOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = {\n        distinct: key,\n        where: this._where,\n        hint: this._hint\n      };\n      return controller.aggregate(this.className, params, distinctOptions).then(function (results) {\n        return results.results;\n      });\n    }\n    /**\n     * Executes an aggregate query and returns aggregate results\n     *\n     * @param {(Array|object)} pipeline Array or Object of stages to process query\n     * @param {object} options Valid options are:<ul>\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the query completes.\n     */\n\n  }, {\n    key: \"aggregate\",\n    value: function (pipeline\n    /*: mixed*/\n    , options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<Array<mixed>>*/\n    {\n      options = options || {};\n      var aggregateOptions = {};\n      aggregateOptions.useMasterKey = true;\n\n      if (options.hasOwnProperty('sessionToken')) {\n        aggregateOptions.sessionToken = options.sessionToken;\n      }\n\n      this._setRequestTask(aggregateOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      if (!(0, _isArray.default)(pipeline) && (0, _typeof2.default)(pipeline) !== 'object') {\n        throw new Error('Invalid pipeline must be Array or Object');\n      }\n\n      if ((0, _keys.default)(this._where || {}).length) {\n        if (!(0, _isArray.default)(pipeline)) {\n          pipeline = [pipeline];\n        }\n\n        pipeline.unshift({\n          match: this._where\n        });\n      }\n\n      var params = {\n        pipeline: pipeline,\n        hint: this._hint,\n        explain: this._explain,\n        readPreference: this._readPreference\n      };\n      return controller.aggregate(this.className, params, aggregateOptions).then(function (results) {\n        return results.results;\n      });\n    }\n    /**\n     * Retrieves at most one Parse.Object that satisfies this query.\n     *\n     * Returns the object if there is one, otherwise undefined.\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     *\n     * @returns {Promise} A promise that is resolved with the object when\n     * the query completes.\n     */\n\n  }, {\n    key: \"first\",\n    value: function (options\n    /*:: ?: FullOptions*/\n    )\n    /*: Promise<ParseObject | void>*/\n    {\n      var _this4 = this;\n\n      options = options || {};\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n\n      this._setRequestTask(findOptions);\n\n      var controller = _CoreManager.default.getQueryController();\n\n      var params = this.toJSON();\n      params.limit = 1;\n      var select = this._select;\n\n      if (this._queriesLocalDatastore) {\n        return this._handleOfflineQuery(params).then(function (objects) {\n          if (!objects[0]) {\n            return undefined;\n          }\n\n          return objects[0];\n        });\n      }\n\n      return (0, _find.default)(controller).call(controller, this.className, params, findOptions).then(function (response) {\n        var objects = response.results;\n\n        if (!objects[0]) {\n          return undefined;\n        }\n\n        if (!objects[0].className) {\n          objects[0].className = _this4.className;\n        } // Make sure the data object contains keys for all objects that\n        // have been requested with a select, so that our cached state\n        // updates correctly.\n\n\n        if (select) {\n          handleSelectResult(objects[0], select);\n        }\n\n        return _ParseObject.default.fromJSON(objects[0], !select);\n      });\n    }\n    /**\n     * Iterates over objects matching a query, calling a callback for each batch.\n     * If the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are processed\n     * in an unspecified order. The query may not have any sort order, and may\n     * not use limit or skip.\n     *\n     * @param {Function} callback Callback that will be called with each result\n     *     of the query.\n     * @param {object} options Valid options are:<ul>\n     *   <li>batchSize: How many objects to yield in each batch (default: 100)\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"eachBatch\",\n    value: function (callback\n    /*: (objs: Array<ParseObject>) => Promise<*>*/\n    , options\n    /*:: ?: BatchOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      var _context8;\n\n      options = options || {};\n\n      if (this._order || this._skip || this._limit >= 0) {\n        return _promise.default.reject('Cannot iterate on a query with sort, skip, or limit.');\n      }\n\n      var query = new ParseQuery(this.className);\n      query._limit = options.batchSize || 100;\n      query._include = (0, _map2.default)(_context8 = this._include).call(_context8, function (i) {\n        return i;\n      });\n\n      if (this._select) {\n        var _context9;\n\n        query._select = (0, _map2.default)(_context9 = this._select).call(_context9, function (s) {\n          return s;\n        });\n      }\n\n      query._hint = this._hint;\n      query._where = {};\n\n      for (var _attr in this._where) {\n        var val = this._where[_attr];\n\n        if ((0, _isArray.default)(val)) {\n          query._where[_attr] = (0, _map2.default)(val).call(val, function (v) {\n            return v;\n          });\n        } else if (val && (0, _typeof2.default)(val) === 'object') {\n          var conditionMap = {};\n          query._where[_attr] = conditionMap;\n\n          for (var cond in val) {\n            conditionMap[cond] = val[cond];\n          }\n        } else {\n          query._where[_attr] = val;\n        }\n      }\n\n      query.ascending('objectId');\n      var findOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        findOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        findOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        findOptions.context = options.context;\n      }\n\n      var finished = false;\n      var previousResults = [];\n      return (0, _promiseUtils.continueWhile)(function () {\n        return !finished;\n      }, /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n        var _yield$Promise$all, _yield$Promise$all2, results;\n\n        return _regenerator.default.wrap(function (_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return _promise.default.all([(0, _find.default)(query).call(query, findOptions), _promise.default.resolve(previousResults.length > 0 && callback(previousResults))]);\n\n              case 2:\n                _yield$Promise$all = _context10.sent;\n                _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 1);\n                results = _yield$Promise$all2[0];\n\n                if (!(results.length >= query._limit)) {\n                  _context10.next = 10;\n                  break;\n                }\n\n                query.greaterThan('objectId', results[results.length - 1].id);\n                previousResults = results;\n                _context10.next = 17;\n                break;\n\n              case 10:\n                if (!(results.length > 0)) {\n                  _context10.next = 16;\n                  break;\n                }\n\n                _context10.next = 13;\n                return _promise.default.resolve(callback(results));\n\n              case 13:\n                finished = true;\n                _context10.next = 17;\n                break;\n\n              case 16:\n                finished = true;\n\n              case 17:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee3);\n      })));\n    }\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback that will be called with each result\n     *     of the query.\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"each\",\n    value: function (callback\n    /*: (obj: ParseObject) => any*/\n    , options\n    /*:: ?: BatchOptions*/\n    )\n    /*: Promise<void>*/\n    {\n      return this.eachBatch(function (results) {\n        var callbacksDone = _promise.default.resolve();\n\n        (0, _forEach.default)(results).call(results, function (result) {\n          callbacksDone = callbacksDone.then(function () {\n            return callback(result);\n          });\n        });\n        return callbacksDone;\n      }, options);\n    }\n    /**\n     * Adds a hint to force index selection. (https://docs.mongodb.com/manual/reference/operator/meta/hint/)\n     *\n     * @param {(string|object)} value String or Object of index that should be used when executing query\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"hint\",\n    value: function (value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof value === 'undefined') {\n        delete this._hint;\n      }\n\n      this._hint = value;\n      return this;\n    }\n    /**\n     * Investigates the query execution plan. Useful for optimizing queries. (https://docs.mongodb.com/manual/reference/operator/meta/explain/)\n     *\n     * @param {boolean} explain Used to toggle the information on the query plan.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"explain\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _explain\n      /*: boolean*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (typeof _explain !== 'boolean') {\n        throw new Error('You can only set explain to a boolean value');\n      }\n\n      this._explain = _explain;\n      return this;\n    }\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback <ul>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     *   <li>query: The query map was called upon.</li>\n     * </ul>\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"map\",\n    value: function () {\n      var _map = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(callback\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => any*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var _this5 = this;\n\n        var array, index;\n        return _regenerator.default.wrap(function (_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                array = [];\n                index = 0;\n                _context11.next = 4;\n                return this.each(function (object) {\n                  return _promise.default.resolve(callback(object, index, _this5)).then(function (result) {\n                    array.push(result);\n                    index += 1;\n                  });\n                }, options);\n\n              case 4:\n                return _context11.abrupt(\"return\", array);\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function () {\n        return _map.apply(this, arguments);\n      };\n    }()\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback <ul>\n     *   <li>accumulator: The accumulator accumulates the callback's return values. It is the accumulated value previously returned in the last invocation of the callback.</li>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     * </ul>\n     * @param {*} initialValue A value to use as the first argument to the first call of the callback. If no initialValue is supplied, the first object in the query will be used and skipped.\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"reduce\",\n    value: function () {\n      var _reduce = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(callback\n      /*: (accumulator: any, currentObject: ParseObject, index: number) => any*/\n      , initialValue\n      /*: any*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var accumulator, index;\n        return _regenerator.default.wrap(function (_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                accumulator = initialValue;\n                index = 0;\n                _context12.next = 4;\n                return this.each(function (object) {\n                  // If no initial value was given, we take the first object from the query\n                  // as the initial value and don't call the callback with it.\n                  if (index === 0 && initialValue === undefined) {\n                    accumulator = object;\n                    index += 1;\n                    return;\n                  }\n\n                  return _promise.default.resolve(callback(accumulator, object, index)).then(function (result) {\n                    accumulator = result;\n                    index += 1;\n                  });\n                }, options);\n\n              case 4:\n                if (!(index === 0 && initialValue === undefined)) {\n                  _context12.next = 6;\n                  break;\n                }\n\n                throw new TypeError('Reducing empty query result set with no initial value');\n\n              case 6:\n                return _context12.abrupt(\"return\", accumulator);\n\n              case 7:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function () {\n        return _reduce.apply(this, arguments);\n      };\n    }()\n    /**\n     * Iterates over each result of a query, calling a callback for each one. If\n     * the callback returns a promise, the iteration will not continue until\n     * that promise has been fulfilled. If the callback returns a rejected\n     * promise, then iteration will stop with that error. The items are\n     * processed in an unspecified order. The query may not have any sort order,\n     * and may not use limit or skip.\n     *\n     * @param {Function} callback Callback <ul>\n     *   <li>currentObject: The current Parse.Object being processed in the array.</li>\n     *   <li>index: The index of the current Parse.Object being processed in the array.</li>\n     *   <li>query: The query filter was called upon.</li>\n     * </ul>\n     *\n     * @param {object} options Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that will be fulfilled once the\n     *     iteration has completed.\n     */\n\n  }, {\n    key: \"filter\",\n    value: function () {\n      var _filter = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(callback\n      /*: (currentObject: ParseObject, index: number, query: ParseQuery) => boolean*/\n      , options\n      /*:: ?: BatchOptions*/\n      ) {\n        var _this6 = this;\n\n        var array, index;\n        return _regenerator.default.wrap(function (_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                array = [];\n                index = 0;\n                _context13.next = 4;\n                return this.each(function (object) {\n                  return _promise.default.resolve(callback(object, index, _this6)).then(function (flag) {\n                    if (flag) {\n                      array.push(object);\n                    }\n\n                    index += 1;\n                  });\n                }, options);\n\n              case 4:\n                return _context13.abrupt(\"return\", array);\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function () {\n        return _filter.apply(this, arguments);\n      };\n    }()\n    /** Query Conditions * */\n\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that the Parse.Object must contain.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"equalTo\",\n    value: function (key\n    /*: string | { [key: string]: any }*/\n    , value\n    /*: ?mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      var _this7 = this;\n\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        var _context14;\n\n        (0, _forEach.default)(_context14 = (0, _entries.default)(key)).call(_context14, function (_ref2) {\n          var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),\n              k = _ref3[0],\n              val = _ref3[1];\n\n          return _this7.equalTo(k, val);\n        });\n        return this;\n      }\n\n      if (typeof value === 'undefined') {\n        return this.doesNotExist(key);\n      }\n\n      this._where[key] = (0, _encode.default)(value, false, true);\n      return this;\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be not equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that must not be equalled.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"notEqualTo\",\n    value: function (key\n    /*: string | { [key: string]: any }*/\n    , value\n    /*: ?mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      var _this8 = this;\n\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        var _context15;\n\n        (0, _forEach.default)(_context15 = (0, _entries.default)(key)).call(_context15, function (_ref4) {\n          var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),\n              k = _ref5[0],\n              val = _ref5[1];\n\n          return _this8.notEqualTo(k, val);\n        });\n        return this;\n      }\n\n      return this._addCondition(key, '$ne', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be less than the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that provides an upper bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"lessThan\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$lt', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be greater than the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that provides an lower bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"greaterThan\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$gt', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be less than or equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param value The value that provides an upper bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"lessThanOrEqualTo\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$lte', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be greater than or equal to the provided value.\n     *\n     * @param {string} key The key to check.\n     * @param {*} value The value that provides an lower bound.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"greaterThanOrEqualTo\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$gte', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be contained in the provided list of values.\n     *\n     * @param {string} key The key to check.\n     * @param {*} value The values that will match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containedIn\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$in', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * not be contained in the provided list of values.\n     *\n     * @param {string} key The key to check.\n     * @param {*} value The values that will not match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"notContainedIn\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: mixed*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$nin', value);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * be contained by the provided list of values. Get objects where all array elements match.\n     *\n     * @param {string} key The key to check.\n     * @param {Array} values The values that will match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containedBy\",\n    value: function (key\n    /*: string*/\n    , values\n    /*: Array<mixed>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$containedBy', values);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * contain each one of the provided list of values.\n     *\n     * @param {string} key The key to check.  This key's value must be an array.\n     * @param {Array} values The values that will match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containsAll\",\n    value: function (key\n    /*: string*/\n    , values\n    /*: Array<mixed>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$all', values);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's value to\n     * contain each one of the provided list of values starting with given strings.\n     *\n     * @param {string} key The key to check.  This key's value must be an array.\n     * @param {Array<string>} values The string values that will match as starting string.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"containsAllStartingWith\",\n    value: function (key\n    /*: string*/\n    , values\n    /*: Array<string>*/\n    )\n    /*: ParseQuery*/\n    {\n      var _this = this;\n\n      if (!(0, _isArray.default)(values)) {\n        values = [values];\n      }\n\n      var regexObject = (0, _map2.default)(values).call(values, function (value) {\n        return {\n          $regex: _this._regexStartWith(value)\n        };\n      });\n      return this.containsAll(key, regexObject);\n    }\n    /**\n     * Adds a constraint for finding objects that contain the given key.\n     *\n     * @param {string} key The key that should exist.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"exists\",\n    value: function (key\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$exists', true);\n    }\n    /**\n     * Adds a constraint for finding objects that do not contain a given key.\n     *\n     * @param {string} key The key that should not exist\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotExist\",\n    value: function (key\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$exists', false);\n    }\n    /**\n     * Adds a regular expression constraint for finding string values that match\n     * the provided regular expression.\n     * This may be slow for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {RegExp} regex The regular expression pattern to match.\n     * @param {string} modifiers The regular expression mode.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matches\",\n    value: function (key\n    /*: string*/\n    , regex\n    /*: RegExp*/\n    , modifiers\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      this._addCondition(key, '$regex', regex);\n\n      if (!modifiers) {\n        modifiers = '';\n      }\n\n      if (regex.ignoreCase) {\n        modifiers += 'i';\n      }\n\n      if (regex.multiline) {\n        modifiers += 'm';\n      }\n\n      if (modifiers.length) {\n        this._addCondition(key, '$options', modifiers);\n      }\n\n      return this;\n    }\n    /**\n     * Adds a constraint that requires that a key's value matches a Parse.Query\n     * constraint.\n     *\n     * @param {string} key The key that the contains the object to match the\n     *                     query.\n     * @param {Parse.Query} query The query that should match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matchesQuery\",\n    value: function (key\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$inQuery', queryJSON);\n    }\n    /**\n     * Adds a constraint that requires that a key's value not matches a\n     * Parse.Query constraint.\n     *\n     * @param {string} key The key that the contains the object to match the\n     *                     query.\n     * @param {Parse.Query} query The query that should not match.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotMatchQuery\",\n    value: function (key\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$notInQuery', queryJSON);\n    }\n    /**\n     * Adds a constraint that requires that a key's value matches a value in\n     * an object returned by a different Parse.Query.\n     *\n     * @param {string} key The key that contains the value that is being\n     *                     matched.\n     * @param {string} queryKey The key in the objects returned by the query to\n     *                          match against.\n     * @param {Parse.Query} query The query to run.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"matchesKeyInQuery\",\n    value: function (key\n    /*: string*/\n    , queryKey\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$select', {\n        key: queryKey,\n        query: queryJSON\n      });\n    }\n    /**\n     * Adds a constraint that requires that a key's value not match a value in\n     * an object returned by a different Parse.Query.\n     *\n     * @param {string} key The key that contains the value that is being\n     *                     excluded.\n     * @param {string} queryKey The key in the objects returned by the query to\n     *                          match against.\n     * @param {Parse.Query} query The query to run.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"doesNotMatchKeyInQuery\",\n    value: function (key\n    /*: string*/\n    , queryKey\n    /*: string*/\n    , query\n    /*: ParseQuery*/\n    )\n    /*: ParseQuery*/\n    {\n      var queryJSON = query.toJSON();\n      queryJSON.className = query.className;\n      return this._addCondition(key, '$dontSelect', {\n        key: queryKey,\n        query: queryJSON\n      });\n    }\n    /**\n     * Adds a constraint for finding string values that contain a provided\n     * string.  This may be slow for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} substring The substring that the value must contain.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"contains\",\n    value: function (key\n    /*: string*/\n    , substring\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof substring !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this._addCondition(key, '$regex', quote(substring));\n    }\n    /**\n     * Adds a constraint for finding string values that contain a provided\n     * string. This may be slow for large datasets. Requires Parse-Server > 2.5.0\n     *\n     * In order to sort you must use select and ascending ($score is required)\n     *  <pre>\n     *   query.fullText('field', 'term');\n     *   query.ascending('$score');\n     *   query.select('$score');\n     *  </pre>\n     *\n     * To retrieve the weight / rank\n     *  <pre>\n     *   object->get('score');\n     *  </pre>\n     *\n     * You can define optionals by providing an object as a third parameter\n     *  <pre>\n     *   query.fullText('field', 'term', { language: 'es', diacriticSensitive: true });\n     *  </pre>\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} value The string to search\n     * @param {object} options (Optional)\n     * @param {string} options.language The language that determines the list of stop words for the search and the rules for the stemmer and tokenizer.\n     * @param {boolean} options.caseSensitive A boolean flag to enable or disable case sensitive search.\n     * @param {boolean} options.diacriticSensitive A boolean flag to enable or disable diacritic sensitive search.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fullText\",\n    value: function (key\n    /*: string*/\n    , value\n    /*: string*/\n    , options\n    /*: ?Object*/\n    )\n    /*: ParseQuery*/\n    {\n      options = options || {};\n\n      if (!key) {\n        throw new Error('A key is required.');\n      }\n\n      if (!value) {\n        throw new Error('A search term is required');\n      }\n\n      if (typeof value !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      var fullOptions = {};\n      fullOptions.$term = value;\n\n      for (var option in options) {\n        switch (option) {\n          case 'language':\n            fullOptions.$language = options[option];\n            break;\n\n          case 'caseSensitive':\n            fullOptions.$caseSensitive = options[option];\n            break;\n\n          case 'diacriticSensitive':\n            fullOptions.$diacriticSensitive = options[option];\n            break;\n\n          default:\n            throw new Error(\"Unknown option: \".concat(option));\n        }\n      }\n\n      return this._addCondition(key, '$text', {\n        $search: fullOptions\n      });\n    }\n    /**\n     * Method to sort the full text search by text score\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"sortByTextScore\",\n    value: function () {\n      this.ascending('$score');\n      this.select(['$score']);\n      return this;\n    }\n    /**\n     * Adds a constraint for finding string values that start with a provided\n     * string.  This query will use the backend index, so it will be fast even\n     * for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} prefix The substring that the value must start with.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"startsWith\",\n    value: function (key\n    /*: string*/\n    , prefix\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof prefix !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this._addCondition(key, '$regex', this._regexStartWith(prefix));\n    }\n    /**\n     * Adds a constraint for finding string values that end with a provided\n     * string.  This will be slow for large datasets.\n     *\n     * @param {string} key The key that the string to match is stored in.\n     * @param {string} suffix The substring that the value must end with.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"endsWith\",\n    value: function (key\n    /*: string*/\n    , suffix\n    /*: string*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof suffix !== 'string') {\n        throw new Error('The value being searched for must be a string.');\n      }\n\n      return this._addCondition(key, '$regex', \"\".concat(quote(suffix), \"$\"));\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"near\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!(point instanceof _ParseGeoPoint.default)) {\n        // Try to cast it as a GeoPoint\n        point = new _ParseGeoPoint.default(point);\n      }\n\n      return this._addCondition(key, '$nearSphere', point);\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {number} maxDistance Maximum distance (in radians) of results to return.\n     * @param {boolean} sorted A Bool value that is true if results should be\n     * sorted by distance ascending, false is no sorting is required,\n     * defaults to true.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinRadians\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , maxDistance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      if (sorted || sorted === undefined) {\n        this.near(key, point);\n        return this._addCondition(key, '$maxDistance', maxDistance);\n      }\n\n      return this._addCondition(key, '$geoWithin', {\n        $centerSphere: [[point.longitude, point.latitude], maxDistance]\n      });\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     * Radius of earth used is 3958.8 miles.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {number} maxDistance Maximum distance (in miles) of results to return.\n     * @param {boolean} sorted A Bool value that is true if results should be\n     * sorted by distance ascending, false is no sorting is required,\n     * defaults to true.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinMiles\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , maxDistance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      return this.withinRadians(key, point, maxDistance / 3958.8, sorted);\n    }\n    /**\n     * Adds a proximity based constraint for finding objects with key point\n     * values near the point given and within the maximum distance given.\n     * Radius of earth used is 6371.0 kilometers.\n     *\n     * @param {string} key The key that the Parse.GeoPoint is stored in.\n     * @param {Parse.GeoPoint} point The reference Parse.GeoPoint that is used.\n     * @param {number} maxDistance Maximum distance (in kilometers) of results to return.\n     * @param {boolean} sorted A Bool value that is true if results should be\n     * sorted by distance ascending, false is no sorting is required,\n     * defaults to true.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinKilometers\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    , maxDistance\n    /*: number*/\n    , sorted\n    /*: boolean*/\n    )\n    /*: ParseQuery*/\n    {\n      return this.withinRadians(key, point, maxDistance / 6371.0, sorted);\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's\n     * coordinates be contained within a given rectangular geographic bounding\n     * box.\n     *\n     * @param {string} key The key to be constrained.\n     * @param {Parse.GeoPoint} southwest\n     *     The lower-left inclusive corner of the box.\n     * @param {Parse.GeoPoint} northeast\n     *     The upper-right inclusive corner of the box.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinGeoBox\",\n    value: function (key\n    /*: string*/\n    , southwest\n    /*: ParseGeoPoint*/\n    , northeast\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      if (!(southwest instanceof _ParseGeoPoint.default)) {\n        southwest = new _ParseGeoPoint.default(southwest);\n      }\n\n      if (!(northeast instanceof _ParseGeoPoint.default)) {\n        northeast = new _ParseGeoPoint.default(northeast);\n      }\n\n      this._addCondition(key, '$within', {\n        $box: [southwest, northeast]\n      });\n\n      return this;\n    }\n    /**\n     * Adds a constraint to the query that requires a particular key's\n     * coordinates be contained within and on the bounds of a given polygon.\n     * Supports closed and open (last point is connected to first) paths\n     *\n     * Polygon must have at least 3 points\n     *\n     * @param {string} key The key to be constrained.\n     * @param {Array} points Array of Coordinates / GeoPoints\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withinPolygon\",\n    value: function (key\n    /*: string*/\n    , points\n    /*: Array<Array<number>>*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$geoWithin', {\n        $polygon: points\n      });\n    }\n    /**\n     * Add a constraint to the query that requires a particular key's\n     * coordinates that contains a ParseGeoPoint\n     *\n     * @param {string} key The key to be constrained.\n     * @param {Parse.GeoPoint} point\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"polygonContains\",\n    value: function (key\n    /*: string*/\n    , point\n    /*: ParseGeoPoint*/\n    )\n    /*: ParseQuery*/\n    {\n      return this._addCondition(key, '$geoIntersects', {\n        $point: point\n      });\n    }\n    /** Query Orderings * */\n\n    /**\n     * Sorts the results in ascending order by the given key.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"ascending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      this._order = [];\n\n      for (var _len = arguments.length, keys = new Array(_len), _key5 = 0; _key5 < _len; _key5++) {\n        keys[_key5] = arguments[_key5];\n      }\n\n      return this.addAscending.apply(this, keys);\n    }\n    /**\n     * Sorts the results in ascending order by the given key,\n     * but can also add secondary sort descriptors without overwriting _order.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"addAscending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this9 = this;\n\n      if (!this._order) {\n        this._order = [];\n      }\n\n      for (var _len2 = arguments.length, keys = new Array(_len2), _key6 = 0; _key6 < _len2; _key6++) {\n        keys[_key6] = arguments[_key6];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        var _context16;\n\n        if ((0, _isArray.default)(key)) {\n          key = key.join();\n        }\n\n        _this9._order = (0, _concat.default)(_context16 = _this9._order).call(_context16, key.replace(/\\s/g, '').split(','));\n      });\n      return this;\n    }\n    /**\n     * Sorts the results in descending order by the given key.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"descending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      this._order = [];\n\n      for (var _len3 = arguments.length, keys = new Array(_len3), _key7 = 0; _key7 < _len3; _key7++) {\n        keys[_key7] = arguments[_key7];\n      }\n\n      return this.addDescending.apply(this, keys);\n    }\n    /**\n     * Sorts the results in descending order by the given key,\n     * but can also add secondary sort descriptors without overwriting _order.\n     *\n     * @param {(string|string[])} keys The key to order by, which is a\n     * string of comma separated values, or an Array of keys, or multiple keys.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"addDescending\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this10 = this;\n\n      if (!this._order) {\n        this._order = [];\n      }\n\n      for (var _len4 = arguments.length, keys = new Array(_len4), _key8 = 0; _key8 < _len4; _key8++) {\n        keys[_key8] = arguments[_key8];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        var _context17, _context18;\n\n        if ((0, _isArray.default)(key)) {\n          key = key.join();\n        }\n\n        _this10._order = (0, _concat.default)(_context17 = _this10._order).call(_context17, (0, _map2.default)(_context18 = key.replace(/\\s/g, '').split(',')).call(_context18, function (k) {\n          return \"-\".concat(k);\n        }));\n      });\n      return this;\n    }\n    /** Query Options * */\n\n    /**\n     * Sets the number of results to skip before returning any results.\n     * This is useful for pagination.\n     * Default is to skip zero results.\n     *\n     * @param {number} n the number of results to skip.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"skip\",\n    value: function (n\n    /*: number*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof n !== 'number' || n < 0) {\n        throw new Error('You can only skip by a positive number');\n      }\n\n      this._skip = n;\n      return this;\n    }\n    /**\n     * Sets the limit of the number of results to return. The default limit is 100.\n     *\n     * @param {number} n the number of results to limit to.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"limit\",\n    value: function (n\n    /*: number*/\n    )\n    /*: ParseQuery*/\n    {\n      if (typeof n !== 'number') {\n        throw new Error('You can only set the limit to a numeric value');\n      }\n\n      this._limit = n;\n      return this;\n    }\n    /**\n     * Sets the flag to include with response the total number of objects satisfying this query,\n     * despite limits/skip. Might be useful for pagination.\n     * Note that result of this query will be wrapped as an object with\n     * `results`: holding {ParseObject} array and `count`: integer holding total number\n     *\n     * @param {boolean} includeCount false - disable, true - enable.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"withCount\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var includeCount\n      /*: boolean*/\n      = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (typeof includeCount !== 'boolean') {\n        throw new Error('You can only set withCount to a boolean value');\n      }\n\n      this._count = includeCount;\n      return this;\n    }\n    /**\n     * Includes nested Parse.Objects for the provided key.  You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * You can include all nested Parse.Objects by passing in '*'.\n     * Requires Parse Server 3.0.0+\n     * <pre>query.include('*');</pre>\n     *\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to include.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"include\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this11 = this;\n\n      for (var _len5 = arguments.length, keys = new Array(_len5), _key9 = 0; _key9 < _len5; _key9++) {\n        keys[_key9] = arguments[_key9];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context19;\n\n          _this11._include = (0, _concat.default)(_context19 = _this11._include).call(_context19, key);\n        } else {\n          _this11._include.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Includes all nested Parse.Objects.\n     *\n     * Requires Parse Server 3.0.0+\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"includeAll\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.include('*');\n    }\n    /**\n     * Restricts the fields of the returned Parse.Objects to include only the\n     * provided keys.  If this is called multiple times, then all of the keys\n     * specified in each of the calls will be included.\n     *\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to include.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"select\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this12 = this;\n\n      if (!this._select) {\n        this._select = [];\n      }\n\n      for (var _len6 = arguments.length, keys = new Array(_len6), _key10 = 0; _key10 < _len6; _key10++) {\n        keys[_key10] = arguments[_key10];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context20;\n\n          _this12._select = (0, _concat.default)(_context20 = _this12._select).call(_context20, key);\n        } else {\n          _this12._select.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Restricts the fields of the returned Parse.Objects to all keys except the\n     * provided keys. Exclude takes precedence over select and include.\n     *\n     * Requires Parse Server 3.6.0+\n     *\n     * @param {...string|Array<string>} keys The name(s) of the key(s) to exclude.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"exclude\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this13 = this;\n\n      for (var _len7 = arguments.length, keys = new Array(_len7), _key11 = 0; _key11 < _len7; _key11++) {\n        keys[_key11] = arguments[_key11];\n      }\n\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        if ((0, _isArray.default)(key)) {\n          var _context21;\n\n          _this13._exclude = (0, _concat.default)(_context21 = _this13._exclude).call(_context21, key);\n        } else {\n          _this13._exclude.push(key);\n        }\n      });\n      return this;\n    }\n    /**\n     * Changes the read preference that the backend will use when performing the query to the database.\n     *\n     * @param {string} readPreference The read preference for the main query.\n     * @param {string} includeReadPreference The read preference for the queries to include pointers.\n     * @param {string} subqueryReadPreference The read preference for the sub queries.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"readPreference\",\n    value: function (_readPreference\n    /*: string*/\n    , includeReadPreference\n    /*:: ?: string*/\n    , subqueryReadPreference\n    /*:: ?: string*/\n    )\n    /*: ParseQuery*/\n    {\n      this._readPreference = _readPreference;\n      this._includeReadPreference = includeReadPreference;\n      this._subqueryReadPreference = subqueryReadPreference;\n      return this;\n    }\n  }, {\n    key: \"onChange\",\n    value: function (onUpdate\n    /*: any*/\n    , onError\n    /*:: ?: any*/\n\n    /*:: ?: string*/\n    )\n    /*: Promise<LiveQuerySubscription>*/\n    {\n      var sub = null;\n      this.subscribe().then(function (subscription) {\n        sub = subscription;\n        subscription.on('create', function (object) {\n          onUpdate(object);\n        });\n        subscription.on('update', function (object) {\n          onUpdate(object);\n        });\n        subscription.on('error', function (err) {\n          if (onError) {\n            onError(err);\n          } else {\n            // eslint-disable-next-line no-console\n            console.warn('Subscription error', err);\n          }\n        });\n      }).catch(function (err) {\n        if (onError) {\n          onError(err);\n        } else {\n          // eslint-disable-next-line no-console\n          console.warn('Subscription connection error', err);\n        }\n      });\n      return function () {\n        if (sub) {\n          sub.unsubscribe();\n        }\n      };\n    }\n    /**\n     * Subscribe this query to get liveQuery updates\n     *\n     * @param {string} sessionToken (optional) Defaults to the currentUser\n     * @returns {Promise<LiveQuerySubscription>} Returns the liveQuerySubscription, it's an event emitter\n     * which can be used to get liveQuery updates.\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(sessionToken\n      /*:: ?: string*/\n      ) {\n        var currentUser, liveQueryClient, subscription;\n        return _regenerator.default.wrap(function (_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return _CoreManager.default.getUserController().currentUserAsync();\n\n              case 2:\n                currentUser = _context22.sent;\n\n                if (!sessionToken) {\n                  sessionToken = currentUser ? currentUser.getSessionToken() : undefined;\n                }\n\n                _context22.next = 6;\n                return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();\n\n              case 6:\n                liveQueryClient = _context22.sent;\n\n                if (liveQueryClient.shouldOpen()) {\n                  liveQueryClient.open();\n                }\n\n                subscription = liveQueryClient.subscribe(this, sessionToken);\n                return _context22.abrupt(\"return\", subscription.subscribePromise.then(function () {\n                  return subscription;\n                }));\n\n              case 10:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function () {\n        return _subscribe.apply(this, arguments);\n      };\n    }()\n    /**\n     * Constructs a Parse.Query that is the OR of the passed in queries.  For\n     * example:\n     * <pre>var compoundQuery = Parse.Query.or(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is an or of the query1, query2, and\n     * query3.\n     *\n     * @param {...Parse.Query} queries The list of queries to OR.\n     * @static\n     * @returns {Parse.Query} The query that is the OR of the passed in queries.\n     */\n\n  }, {\n    key: \"fromNetwork\",\n    value:\n    /**\n     * Change the source of this query to the server.\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n    function ()\n    /*: ParseQuery*/\n    {\n      this._queriesLocalDatastore = false;\n      this._localDatastorePinName = null;\n      return this;\n    }\n    /**\n     * Changes the source of this query to all pinned objects.\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromLocalDatastore\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.fromPinWithName(null);\n    }\n    /**\n     * Changes the source of this query to the default group of pinned objects.\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromPin\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      return this.fromPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n    /**\n     * Changes the source of this query to a specific group of pinned objects.\n     *\n     * @param {string} name The name of query source.\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"fromPinWithName\",\n    value: function (name\n    /*:: ?: string*/\n    )\n    /*: ParseQuery*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (localDatastore.checkIfEnabled()) {\n        this._queriesLocalDatastore = true;\n        this._localDatastorePinName = name;\n      }\n\n      return this;\n    }\n    /**\n     * Cancels the current network request (if any is running).\n     *\n     * @returns {Parse.Query} Returns the query, so you can chain this call.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      var _this14 = this;\n\n      if (this._xhrRequest.task && typeof this._xhrRequest.task.abort === 'function') {\n        this._xhrRequest.task._aborted = true;\n\n        this._xhrRequest.task.abort();\n\n        this._xhrRequest.task = null;\n\n        this._xhrRequest.onchange = function () {};\n\n        return this;\n      }\n\n      return this._xhrRequest.onchange = function () {\n        return _this14.cancel();\n      };\n    }\n  }, {\n    key: \"_setRequestTask\",\n    value: function (options) {\n      var _this15 = this;\n\n      options.requestTask = function (task) {\n        _this15._xhrRequest.task = task;\n\n        _this15._xhrRequest.onchange();\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function (className\n    /*: string*/\n    , json\n    /*: QueryJSON*/\n    )\n    /*: ParseQuery*/\n    {\n      var query = new ParseQuery(className);\n      return query.withJSON(json);\n    }\n  }, {\n    key: \"or\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len8 = arguments.length, queries = new Array(_len8), _key12 = 0; _key12 < _len8; _key12++) {\n        queries[_key12] = arguments[_key12];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._orQuery(queries);\n\n      return query;\n    }\n    /**\n     * Constructs a Parse.Query that is the AND of the passed in queries.  For\n     * example:\n     * <pre>var compoundQuery = Parse.Query.and(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is an and of the query1, query2, and\n     * query3.\n     *\n     * @param {...Parse.Query} queries The list of queries to AND.\n     * @static\n     * @returns {Parse.Query} The query that is the AND of the passed in queries.\n     */\n\n  }, {\n    key: \"and\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len9 = arguments.length, queries = new Array(_len9), _key13 = 0; _key13 < _len9; _key13++) {\n        queries[_key13] = arguments[_key13];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._andQuery(queries);\n\n      return query;\n    }\n    /**\n     * Constructs a Parse.Query that is the NOR of the passed in queries.  For\n     * example:\n     * <pre>const compoundQuery = Parse.Query.nor(query1, query2, query3);</pre>\n     *\n     * will create a compoundQuery that is a nor of the query1, query2, and\n     * query3.\n     *\n     * @param {...Parse.Query} queries The list of queries to NOR.\n     * @static\n     * @returns {Parse.Query} The query that is the NOR of the passed in queries.\n     */\n\n  }, {\n    key: \"nor\",\n    value: function ()\n    /*: ParseQuery*/\n    {\n      for (var _len10 = arguments.length, queries = new Array(_len10), _key14 = 0; _key14 < _len10; _key14++) {\n        queries[_key14] = arguments[_key14];\n      }\n\n      var className = _getClassNameFromQueries(queries);\n\n      var query = new ParseQuery(className);\n\n      query._norQuery(queries);\n\n      return query;\n    }\n  }]);\n  return ParseQuery;\n}();\n\nvar DefaultController = {\n  find: function (className\n  /*: string*/\n  , params\n  /*: QueryJSON*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<ParseObject>>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', \"classes/\".concat(className), params, options);\n  },\n  aggregate: function (className\n  /*: string*/\n  , params\n  /*: any*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<mixed>>*/\n  {\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('GET', \"aggregate/\".concat(className), params, options);\n  }\n};\n\n_CoreManager.default.setQueryController(DefaultController);\n\nvar _default = ParseQuery;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}