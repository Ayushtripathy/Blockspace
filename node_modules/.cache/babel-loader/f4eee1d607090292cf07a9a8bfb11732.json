{"ast":null,"code":"import { LOGIN_PROVIDER } from '@toruslabs/openlogin';\nimport { CHAIN_NAMESPACES, SOLANA_ADAPTERS, EVM_ADAPTERS, getChainConfig, WALLET_ADAPTERS, ADAPTER_CATEGORY, ADAPTER_STATUS, ADAPTER_EVENTS } from '@web3auth/base';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Web3AuthCore } from '@web3auth/core';\nimport LoginModal, { LOGIN_MODAL_EVENTS } from '@web3auth/ui';\nimport log from 'loglevel';\nconst defaultSolanaDappModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  adapters: {\n    [SOLANA_ADAPTERS.TORUS_SOLANA]: {\n      label: \"Torus Solana Wallet\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [SOLANA_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [SOLANA_ADAPTERS.PHANTOM]: {\n      label: \"Phantom\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultEvmDappModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  adapters: {\n    [EVM_ADAPTERS.TORUS_EVM]: {\n      label: \"Torus Wallet\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [EVM_ADAPTERS.METAMASK]: {\n      label: \"MetaMask\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [EVM_ADAPTERS.WALLET_CONNECT_V1]: {\n      label: \"Wallet Connect\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultSolanaWalletModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  adapters: {\n    [SOLANA_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultEvmWalletModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  adapters: {\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst OPENLOGIN_PROVIDERS = [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.FACEBOOK, LOGIN_PROVIDER.TWITTER, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD, LOGIN_PROVIDER.TWITCH, LOGIN_PROVIDER.APPLE, LOGIN_PROVIDER.LINE, LOGIN_PROVIDER.GITHUB, LOGIN_PROVIDER.KAKAO, LOGIN_PROVIDER.LINKEDIN, LOGIN_PROVIDER.WEIBO, LOGIN_PROVIDER.WECHAT, LOGIN_PROVIDER.EMAIL_PASSWORDLESS];\n\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nconst getDefaultAdapterModule = async params => {\n  const {\n    name,\n    customChainConfig,\n    clientId\n  } = params;\n  if (!Object.values(CHAIN_NAMESPACES).includes(customChainConfig.chainNamespace)) throw new Error(\"Invalid chainNamespace: \".concat(customChainConfig.chainNamespace));\n\n  const finalChainConfig = _objectSpread$2(_objectSpread$2({}, getChainConfig(customChainConfig.chainNamespace, customChainConfig === null || customChainConfig === void 0 ? void 0 : customChainConfig.chainId)), customChainConfig || {});\n\n  if (name === WALLET_ADAPTERS.TORUS_EVM) {\n    const {\n      TorusWalletAdapter\n    } = await import('@web3auth/torus-evm-adapter');\n    const adapter = new TorusWalletAdapter({\n      chainConfig: finalChainConfig\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.TORUS_SOLANA) {\n    const {\n      SolanaWalletAdapter\n    } = await import('@web3auth/torus-solana-adapter');\n    const adapter = new SolanaWalletAdapter({\n      chainConfig: finalChainConfig\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.METAMASK) {\n    const {\n      MetamaskAdapter\n    } = await import('@web3auth/metamask-adapter');\n    const adapter = new MetamaskAdapter({\n      chainConfig: finalChainConfig\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.PHANTOM) {\n    const {\n      PhantomAdapter\n    } = await import('@web3auth/phantom-adapter');\n    const adapter = new PhantomAdapter({\n      chainConfig: finalChainConfig\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.WALLET_CONNECT_V1) {\n    const {\n      WalletConnectV1Adapter\n    } = await import('@web3auth/wallet-connect-v1-adapter');\n    const adapter = new WalletConnectV1Adapter({\n      chainConfig: finalChainConfig\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.OPENLOGIN) {\n    const {\n      OpenloginAdapter,\n      getOpenloginDefaultOptions\n    } = await import('@web3auth/openlogin-adapter');\n    const defaultOptions = getOpenloginDefaultOptions(customChainConfig.chainNamespace, customChainConfig === null || customChainConfig === void 0 ? void 0 : customChainConfig.chainId);\n    const adapter = new OpenloginAdapter(_objectSpread$2(_objectSpread$2({}, defaultOptions), {}, {\n      chainConfig: _objectSpread$2(_objectSpread$2({}, defaultOptions.chainConfig || {}), finalChainConfig),\n      adapterSettings: _objectSpread$2(_objectSpread$2({}, defaultOptions.adapterSettings), {}, {\n        clientId\n      })\n    }));\n    return adapter;\n  }\n\n  throw new Error(\"Invalid wallet adapter name\");\n};\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nconst getAdapterSocialLogins = function (adapterName, adapter) {\n  let loginMethodsConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const finalLoginMethodsConfig = {};\n\n  if (adapterName === WALLET_ADAPTERS.OPENLOGIN) {\n    OPENLOGIN_PROVIDERS.forEach(loginMethod => {\n      const currentLoginMethodConfig = loginMethodsConfig[loginMethod] || {\n        name: loginMethod,\n        showOnMobile: true,\n        showOnModal: true,\n        showOnDesktop: true\n      };\n      finalLoginMethodsConfig[loginMethod] = _objectSpread$1({}, currentLoginMethodConfig);\n      log.debug(\"OpenLogin login method ui config\", finalLoginMethodsConfig);\n    });\n  } else {\n    throw new Error(\"\".concat(adapterName, \" is not a valid adapter\"));\n  }\n\n  return finalLoginMethodsConfig;\n};\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nlog.enableAll();\nlog.setLevel(\"debug\");\n\nclass Web3Auth extends Web3AuthCore {\n  constructor(options) {\n    var _this$options$uiConfi, _this$options$uiConfi2;\n\n    super(options);\n\n    _defineProperty(this, \"loginModal\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"modalConfig\", defaultEvmDappModalConfig);\n\n    this.options = _objectSpread({}, options);\n    const providedChainConfig = this.options.chainConfig;\n\n    if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      if (options.authMode === \"WALLET\") {\n        // default config for solana wallet modal\n        this.modalConfig = defaultSolanaWalletModalConfig;\n      } else {\n        // default config for solana dapp modal\n        this.modalConfig = defaultSolanaDappModalConfig;\n      }\n    } else if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.EIP155) {\n      if (options.authMode === \"WALLET\") {\n        // default config for evm wallet modal\n        this.modalConfig = defaultEvmWalletModalConfig;\n      } else {\n        // default config for evm dapp modal\n        this.modalConfig = defaultEvmDappModalConfig;\n      }\n    } else {\n      throw new Error(\"Invalid chainNamespace provided: \".concat(providedChainConfig.chainNamespace));\n    }\n\n    this.loginModal = new LoginModal({\n      theme: (_this$options$uiConfi = this.options.uiConfig) === null || _this$options$uiConfi === void 0 ? void 0 : _this$options$uiConfi.theme,\n      appLogo: ((_this$options$uiConfi2 = this.options.uiConfig) === null || _this$options$uiConfi2 === void 0 ? void 0 : _this$options$uiConfi2.appLogo) || \"\",\n      version: \"\",\n      adapterListener: this\n    });\n    this.subscribeToLoginModalEvents();\n  }\n\n  async initModal(params) {\n    super.checkInitRequirements();\n    await this.loginModal.initModal();\n    const providedChainConfig = this.options.chainConfig; // merge default adapters with the custom configured adapters.\n\n    const allAdapters = [...new Set([...Object.keys(this.modalConfig.adapters || {}), ...Object.keys(this.walletAdapters)])];\n    const adapterConfigurationPromises = allAdapters.map(async adapterName => {\n      var _this$modalConfig$ada, _params$modalConfig, _this$modalConfig$ada2, _this$modalConfig$ada3; // start with the default config of adapter.\n\n\n      let adapterConfig = ((_this$modalConfig$ada = this.modalConfig.adapters) === null || _this$modalConfig$ada === void 0 ? void 0 : _this$modalConfig$ada[adapterName]) || {\n        label: adapterName,\n        showOnModal: true,\n        showOnMobile: true,\n        showOnDesktop: true\n      }; // override the default config of adapter if some config is being provided by the user.\n\n      if (params !== null && params !== void 0 && (_params$modalConfig = params.modalConfig) !== null && _params$modalConfig !== void 0 && _params$modalConfig[adapterName]) {\n        adapterConfig = _objectSpread(_objectSpread({}, adapterConfig), params.modalConfig[adapterName]);\n      }\n\n      this.modalConfig.adapters[adapterName] = adapterConfig; // check if adapter is configured/added by user and exist in walletAdapters map.\n\n      const adapter = this.walletAdapters[adapterName];\n      log.debug(\"adapter config\", adapterName, (_this$modalConfig$ada2 = this.modalConfig.adapters) === null || _this$modalConfig$ada2 === void 0 ? void 0 : _this$modalConfig$ada2[adapterName].showOnModal); // if adapter is not custom configured then check if it is available in default adapters.\n      // and if adapter is not hidden by user\n\n      if (!adapter && (_this$modalConfig$ada3 = this.modalConfig.adapters) !== null && _this$modalConfig$ada3 !== void 0 && _this$modalConfig$ada3[adapterName].showOnModal) {\n        // if adapter is not configured and some default configuration is available, use it.\n        const ad = await getDefaultAdapterModule({\n          name: adapterName,\n          customChainConfig: this.options.chainConfig,\n          clientId: this.options.clientId\n        });\n        this.walletAdapters[adapterName] = ad;\n        return adapterName;\n      } else if ((adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.IN_APP || (adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.EXTERNAL || adapterName === this.cachedAdapter) {\n        var _this$modalConfig$ada4;\n\n        if (!((_this$modalConfig$ada4 = this.modalConfig.adapters) !== null && _this$modalConfig$ada4 !== void 0 && _this$modalConfig$ada4[adapterName].showOnModal)) return; // add client id to openlogin adapter, same web3auth client id can be used in openlogin.\n        // this id is being overridden if user is also passing client id in openlogin's adapter constructor.\n\n        if (adapterName === WALLET_ADAPTERS.OPENLOGIN) {\n          this.walletAdapters[adapterName].setAdapterSettings({\n            clientId: this.options.clientId\n          });\n        } // if adapter doesn't have any chainConfig then we will set the chainConfig based of passed chainNamespace\n        // and chainNamespace.\n\n\n        if (!adapter.chainConfigProxy) {\n          var _this$coreOptions$cha;\n\n          const chainConfig = _objectSpread(_objectSpread({}, getChainConfig(providedChainConfig.chainNamespace, (_this$coreOptions$cha = this.coreOptions.chainConfig) === null || _this$coreOptions$cha === void 0 ? void 0 : _this$coreOptions$cha.chainId)), this.coreOptions.chainConfig);\n\n          this.walletAdapters[adapterName].setChainConfig(chainConfig);\n        }\n\n        return adapterName;\n      }\n    });\n    const adapterNames = await Promise.all(adapterConfigurationPromises);\n    const hasInAppWallets = Object.values(this.walletAdapters).some(adapter => {\n      if (adapter.type !== ADAPTER_CATEGORY.IN_APP) return false;\n      if (this.modalConfig.adapters[adapter.name].showOnModal !== true) return false;\n      if (!this.modalConfig.adapters[adapter.name].loginMethods) return true;\n      if (Object.values(this.modalConfig.adapters[adapter.name].loginMethods).some(method => method.showOnModal)) return true;\n      return false;\n    });\n    log.debug(hasInAppWallets, this.walletAdapters, \"hasInAppWallets\"); // Now, initialize the adapters.\n\n    const initPromises = adapterNames.map(async adapterName => {\n      if (!adapterName) return;\n\n      try {\n        const adapter = this.walletAdapters[adapterName]; // only initialize a external adapter here if it is a cached adapter.\n\n        if (this.cachedAdapter !== adapterName && adapter.type === ADAPTER_CATEGORY.EXTERNAL) {\n          return;\n        } // in-app wallets or cached wallet (being connected or already connected) are initialized first.\n        // if adapter is configured thn only initialize in app or cached adapter.\n        // external wallets are initialized on INIT_EXTERNAL_WALLET event.\n\n\n        this.subscribeToAdapterEvents(adapter);\n        if (adapter.status === ADAPTER_STATUS.NOT_READY) await adapter.init({\n          autoConnect: this.cachedAdapter === adapterName\n        }); // note: not adding cachedWallet to modal if it is external wallet.\n        // adding it later if no in-app wallets are available.\n\n        if (adapter.type === ADAPTER_CATEGORY.IN_APP) {\n          this.initializeInAppWallet(adapterName);\n        }\n      } catch (error) {\n        log.error(error, \"error while initializing adapter\");\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    await Promise.all(initPromises);\n    const hasExternalWallets = allAdapters.some(adapterName => {\n      var _this$walletAdapters$, _this$modalConfig$ada5;\n\n      return ((_this$walletAdapters$ = this.walletAdapters[adapterName]) === null || _this$walletAdapters$ === void 0 ? void 0 : _this$walletAdapters$.type) === ADAPTER_CATEGORY.EXTERNAL && ((_this$modalConfig$ada5 = this.modalConfig.adapters) === null || _this$modalConfig$ada5 === void 0 ? void 0 : _this$modalConfig$ada5[adapterName].showOnModal);\n    });\n\n    if (hasExternalWallets) {\n      this.loginModal.initExternalWalletContainer();\n    } // variable to check if we have any in app wallets\n    // currently all default in app and external wallets can be hidden or shown based on config.\n\n\n    if (!hasInAppWallets && hasExternalWallets) {\n      // if no in app wallet is available then initialize external wallets in modal\n      await this.initExternalWalletAdapters(false, {\n        showExternalWalletsOnly: true\n      });\n    }\n  }\n\n  async connect() {\n    // if (!this.loginModal.initialized) throw new Error(\"Login modal is not initialized\");\n    // if already connected return provider\n    if (this.provider) return this.provider;\n    this.loginModal.open();\n    return new Promise((resolve, reject) => {\n      this.once(ADAPTER_EVENTS.CONNECTED, () => {\n        return resolve(this.provider);\n      });\n      this.once(ADAPTER_EVENTS.ERRORED, err => {\n        return reject(err);\n      });\n    });\n  }\n\n  async initExternalWalletAdapters(externalWalletsInitialized, options) {\n    if (externalWalletsInitialized) return;\n    const adaptersConfig = {};\n    const adaptersData = {};\n    const adapterPromises = Object.keys(this.walletAdapters).map(async adapterName => {\n      try {\n        const adapter = this.walletAdapters[adapterName];\n\n        if ((adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.EXTERNAL) {\n          log.debug(\"init external wallet\", this.cachedAdapter, adapterName);\n          this.subscribeToAdapterEvents(adapter); // we are not initializing cached adapter here as it is already being initialized in initModal before.\n\n          if (this.cachedAdapter === adapterName) {\n            return;\n          }\n\n          if (adapter.status === ADAPTER_STATUS.NOT_READY) await adapter.init({\n            autoConnect: this.cachedAdapter === adapterName\n          });\n          adaptersConfig[adapterName] = this.modalConfig.adapters[adapterName];\n          adaptersData[adapterName] = adapter.adapterData || {};\n          return adapterName;\n        }\n      } catch (error) {\n        log.error(error, \"error while initializing adapter\");\n      }\n    });\n    const adapterInitResults = await Promise.all(adapterPromises);\n    const finalAdaptersConfig = {};\n    adapterInitResults.forEach(result => {\n      if (result) {\n        finalAdaptersConfig[result] = adaptersConfig[result];\n      }\n    });\n    this.loginModal.addWalletLogins(finalAdaptersConfig, {\n      showExternalWalletsOnly: !!(options !== null && options !== void 0 && options.showExternalWalletsOnly)\n    });\n  }\n\n  initializeInAppWallet(adapterName) {\n    log.info(\"adapterInitResults\", adapterName);\n\n    if (this.walletAdapters[adapterName].type === ADAPTER_CATEGORY.IN_APP) {\n      var _this$modalConfig$ada6, _this$options$uiConfi3;\n\n      this.loginModal.addSocialLogins(adapterName, getAdapterSocialLogins(adapterName, this.walletAdapters[adapterName], (_this$modalConfig$ada6 = this.modalConfig.adapters[adapterName]) === null || _this$modalConfig$ada6 === void 0 ? void 0 : _this$modalConfig$ada6.loginMethods), ((_this$options$uiConfi3 = this.options.uiConfig) === null || _this$options$uiConfi3 === void 0 ? void 0 : _this$options$uiConfi3.loginMethodsOrder) || OPENLOGIN_PROVIDERS);\n    }\n  }\n\n  subscribeToLoginModalEvents() {\n    this.loginModal.on(LOGIN_MODAL_EVENTS.LOGIN, async params => {\n      try {\n        await this.connectTo(params.adapter, params.loginParams);\n      } catch (error) {\n        log.error(\"Error while connecting to adapter: \".concat(params.adapter), error);\n      }\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.INIT_EXTERNAL_WALLETS, async params => {\n      await this.initExternalWalletAdapters(params.externalWalletsInitialized);\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.DISCONNECT, async () => {\n      try {\n        await this.logout();\n      } catch (error) {\n        log.error(\"Error while disconnecting\", error);\n      }\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, async visibility => {\n      var _this$walletAdapters$2;\n\n      log.debug(\"is login modal visible\", visibility);\n      this.emit(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, visibility);\n      const walletConnectStatus = (_this$walletAdapters$2 = this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1]) === null || _this$walletAdapters$2 === void 0 ? void 0 : _this$walletAdapters$2.status;\n\n      if (visibility && walletConnectStatus === ADAPTER_STATUS.READY) {\n        // refreshing session for wallet connect whenever modal is opened.\n        try {\n          this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1].connect();\n        } catch (error) {\n          log.error(\"Error while disconnecting to wallet connect in core\", error);\n        }\n      }\n    });\n  }\n\n}\n\nexport { OPENLOGIN_PROVIDERS, Web3Auth, defaultEvmDappModalConfig, defaultEvmWalletModalConfig, defaultSolanaDappModalConfig, defaultSolanaWalletModalConfig };","map":{"version":3,"sources":["../src/config.ts","../src/default.ts","../src/utils.ts","../src/modalManager.ts"],"names":["defaultSolanaDappModalConfig","chainNamespace","CHAIN_NAMESPACES","adapters","SOLANA_ADAPTERS","label","showOnModal","showOnMobile","showOnDesktop","defaultEvmDappModalConfig","EVM_ADAPTERS","defaultSolanaWalletModalConfig","defaultEvmWalletModalConfig","OPENLOGIN_PROVIDERS","LOGIN_PROVIDER","getDefaultAdapterModule","clientId","Object","customChainConfig","finalChainConfig","getChainConfig","name","WALLET_ADAPTERS","TorusWalletAdapter","adapter","chainConfig","SolanaWalletAdapter","MetamaskAdapter","PhantomAdapter","WalletConnectV1Adapter","getOpenloginDefaultOptions","defaultOptions","adapterSettings","getAdapterSocialLogins","loginMethodsConfig","finalLoginMethodsConfig","adapterName","loginMethod","currentLoginMethodConfig","log","Web3Auth","Web3AuthCore","constructor","options","providedChainConfig","theme","appLogo","version","adapterListener","initModal","allAdapters","adapterConfigurationPromises","adapterConfig","params","ad","ADAPTER_CATEGORY","adapterNames","Promise","hasInAppWallets","method","initPromises","ADAPTER_STATUS","autoConnect","hasExternalWallets","showExternalWalletsOnly","connect","ADAPTER_EVENTS","resolve","err","reject","initExternalWalletAdapters","adaptersConfig","adaptersData","adapterPromises","adapterInitResults","finalAdaptersConfig","result","initializeInAppWallet","subscribeToLoginModalEvents","LOGIN_MODAL_EVENTS","walletConnectStatus","visibility"],"mappings":"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","sourcesContent":["import { LOGIN_PROVIDER } from '@toruslabs/openlogin';\nimport { CHAIN_NAMESPACES, SOLANA_ADAPTERS, EVM_ADAPTERS, getChainConfig, WALLET_ADAPTERS, ADAPTER_CATEGORY, ADAPTER_STATUS, ADAPTER_EVENTS } from '@web3auth/base';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Web3AuthCore } from '@web3auth/core';\nimport LoginModal, { LOGIN_MODAL_EVENTS } from '@web3auth/ui';\nimport log from 'loglevel';\n\nconst defaultSolanaDappModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  adapters: {\n    [SOLANA_ADAPTERS.TORUS_SOLANA]: {\n      label: \"Torus Solana Wallet\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [SOLANA_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [SOLANA_ADAPTERS.PHANTOM]: {\n      label: \"Phantom\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultEvmDappModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  adapters: {\n    [EVM_ADAPTERS.TORUS_EVM]: {\n      label: \"Torus Wallet\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [EVM_ADAPTERS.METAMASK]: {\n      label: \"MetaMask\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [EVM_ADAPTERS.WALLET_CONNECT_V1]: {\n      label: \"Wallet Connect\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultSolanaWalletModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  adapters: {\n    [SOLANA_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultEvmWalletModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  adapters: {\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst OPENLOGIN_PROVIDERS = [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.FACEBOOK, LOGIN_PROVIDER.TWITTER, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD, LOGIN_PROVIDER.TWITCH, LOGIN_PROVIDER.APPLE, LOGIN_PROVIDER.LINE, LOGIN_PROVIDER.GITHUB, LOGIN_PROVIDER.KAKAO, LOGIN_PROVIDER.LINKEDIN, LOGIN_PROVIDER.WEIBO, LOGIN_PROVIDER.WECHAT, LOGIN_PROVIDER.EMAIL_PASSWORDLESS];\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst getDefaultAdapterModule = async params => {\n  const {\n    name,\n    customChainConfig,\n    clientId\n  } = params;\n  if (!Object.values(CHAIN_NAMESPACES).includes(customChainConfig.chainNamespace)) throw new Error(\"Invalid chainNamespace: \".concat(customChainConfig.chainNamespace));\n\n  const finalChainConfig = _objectSpread$2(_objectSpread$2({}, getChainConfig(customChainConfig.chainNamespace, customChainConfig === null || customChainConfig === void 0 ? void 0 : customChainConfig.chainId)), customChainConfig || {});\n\n  if (name === WALLET_ADAPTERS.TORUS_EVM) {\n    const {\n      TorusWalletAdapter\n    } = await import('@web3auth/torus-evm-adapter');\n    const adapter = new TorusWalletAdapter({\n      chainConfig: finalChainConfig\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.TORUS_SOLANA) {\n    const {\n      SolanaWalletAdapter\n    } = await import('@web3auth/torus-solana-adapter');\n    const adapter = new SolanaWalletAdapter({\n      chainConfig: finalChainConfig\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.METAMASK) {\n    const {\n      MetamaskAdapter\n    } = await import('@web3auth/metamask-adapter');\n    const adapter = new MetamaskAdapter({\n      chainConfig: finalChainConfig\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.PHANTOM) {\n    const {\n      PhantomAdapter\n    } = await import('@web3auth/phantom-adapter');\n    const adapter = new PhantomAdapter({\n      chainConfig: finalChainConfig\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.WALLET_CONNECT_V1) {\n    const {\n      WalletConnectV1Adapter\n    } = await import('@web3auth/wallet-connect-v1-adapter');\n    const adapter = new WalletConnectV1Adapter({\n      chainConfig: finalChainConfig\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.OPENLOGIN) {\n    const {\n      OpenloginAdapter,\n      getOpenloginDefaultOptions\n    } = await import('@web3auth/openlogin-adapter');\n    const defaultOptions = getOpenloginDefaultOptions(customChainConfig.chainNamespace, customChainConfig === null || customChainConfig === void 0 ? void 0 : customChainConfig.chainId);\n    const adapter = new OpenloginAdapter(_objectSpread$2(_objectSpread$2({}, defaultOptions), {}, {\n      chainConfig: _objectSpread$2(_objectSpread$2({}, defaultOptions.chainConfig || {}), finalChainConfig),\n      adapterSettings: _objectSpread$2(_objectSpread$2({}, defaultOptions.adapterSettings), {}, {\n        clientId\n      })\n    }));\n    return adapter;\n  }\n\n  throw new Error(\"Invalid wallet adapter name\");\n};\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst getAdapterSocialLogins = function (adapterName, adapter) {\n  let loginMethodsConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const finalLoginMethodsConfig = {};\n\n  if (adapterName === WALLET_ADAPTERS.OPENLOGIN) {\n    OPENLOGIN_PROVIDERS.forEach(loginMethod => {\n      const currentLoginMethodConfig = loginMethodsConfig[loginMethod] || {\n        name: loginMethod,\n        showOnMobile: true,\n        showOnModal: true,\n        showOnDesktop: true\n      };\n      finalLoginMethodsConfig[loginMethod] = _objectSpread$1({}, currentLoginMethodConfig);\n      log.debug(\"OpenLogin login method ui config\", finalLoginMethodsConfig);\n    });\n  } else {\n    throw new Error(\"\".concat(adapterName, \" is not a valid adapter\"));\n  }\n\n  return finalLoginMethodsConfig;\n};\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nlog.enableAll();\nlog.setLevel(\"debug\");\nclass Web3Auth extends Web3AuthCore {\n  constructor(options) {\n    var _this$options$uiConfi, _this$options$uiConfi2;\n\n    super(options);\n\n    _defineProperty(this, \"loginModal\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"modalConfig\", defaultEvmDappModalConfig);\n\n    this.options = _objectSpread({}, options);\n    const providedChainConfig = this.options.chainConfig;\n\n    if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      if (options.authMode === \"WALLET\") {\n        // default config for solana wallet modal\n        this.modalConfig = defaultSolanaWalletModalConfig;\n      } else {\n        // default config for solana dapp modal\n        this.modalConfig = defaultSolanaDappModalConfig;\n      }\n    } else if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.EIP155) {\n      if (options.authMode === \"WALLET\") {\n        // default config for evm wallet modal\n        this.modalConfig = defaultEvmWalletModalConfig;\n      } else {\n        // default config for evm dapp modal\n        this.modalConfig = defaultEvmDappModalConfig;\n      }\n    } else {\n      throw new Error(\"Invalid chainNamespace provided: \".concat(providedChainConfig.chainNamespace));\n    }\n\n    this.loginModal = new LoginModal({\n      theme: (_this$options$uiConfi = this.options.uiConfig) === null || _this$options$uiConfi === void 0 ? void 0 : _this$options$uiConfi.theme,\n      appLogo: ((_this$options$uiConfi2 = this.options.uiConfig) === null || _this$options$uiConfi2 === void 0 ? void 0 : _this$options$uiConfi2.appLogo) || \"\",\n      version: \"\",\n      adapterListener: this\n    });\n    this.subscribeToLoginModalEvents();\n  }\n\n  async initModal(params) {\n    super.checkInitRequirements();\n    await this.loginModal.initModal();\n    const providedChainConfig = this.options.chainConfig; // merge default adapters with the custom configured adapters.\n\n    const allAdapters = [...new Set([...Object.keys(this.modalConfig.adapters || {}), ...Object.keys(this.walletAdapters)])];\n    const adapterConfigurationPromises = allAdapters.map(async adapterName => {\n      var _this$modalConfig$ada, _params$modalConfig, _this$modalConfig$ada2, _this$modalConfig$ada3;\n\n      // start with the default config of adapter.\n      let adapterConfig = ((_this$modalConfig$ada = this.modalConfig.adapters) === null || _this$modalConfig$ada === void 0 ? void 0 : _this$modalConfig$ada[adapterName]) || {\n        label: adapterName,\n        showOnModal: true,\n        showOnMobile: true,\n        showOnDesktop: true\n      }; // override the default config of adapter if some config is being provided by the user.\n\n      if (params !== null && params !== void 0 && (_params$modalConfig = params.modalConfig) !== null && _params$modalConfig !== void 0 && _params$modalConfig[adapterName]) {\n        adapterConfig = _objectSpread(_objectSpread({}, adapterConfig), params.modalConfig[adapterName]);\n      }\n\n      this.modalConfig.adapters[adapterName] = adapterConfig; // check if adapter is configured/added by user and exist in walletAdapters map.\n\n      const adapter = this.walletAdapters[adapterName];\n      log.debug(\"adapter config\", adapterName, (_this$modalConfig$ada2 = this.modalConfig.adapters) === null || _this$modalConfig$ada2 === void 0 ? void 0 : _this$modalConfig$ada2[adapterName].showOnModal); // if adapter is not custom configured then check if it is available in default adapters.\n      // and if adapter is not hidden by user\n\n      if (!adapter && (_this$modalConfig$ada3 = this.modalConfig.adapters) !== null && _this$modalConfig$ada3 !== void 0 && _this$modalConfig$ada3[adapterName].showOnModal) {\n        // if adapter is not configured and some default configuration is available, use it.\n        const ad = await getDefaultAdapterModule({\n          name: adapterName,\n          customChainConfig: this.options.chainConfig,\n          clientId: this.options.clientId\n        });\n        this.walletAdapters[adapterName] = ad;\n        return adapterName;\n      } else if ((adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.IN_APP || (adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.EXTERNAL || adapterName === this.cachedAdapter) {\n        var _this$modalConfig$ada4;\n\n        if (!((_this$modalConfig$ada4 = this.modalConfig.adapters) !== null && _this$modalConfig$ada4 !== void 0 && _this$modalConfig$ada4[adapterName].showOnModal)) return; // add client id to openlogin adapter, same web3auth client id can be used in openlogin.\n        // this id is being overridden if user is also passing client id in openlogin's adapter constructor.\n\n        if (adapterName === WALLET_ADAPTERS.OPENLOGIN) {\n          this.walletAdapters[adapterName].setAdapterSettings({\n            clientId: this.options.clientId\n          });\n        } // if adapter doesn't have any chainConfig then we will set the chainConfig based of passed chainNamespace\n        // and chainNamespace.\n\n\n        if (!adapter.chainConfigProxy) {\n          var _this$coreOptions$cha;\n\n          const chainConfig = _objectSpread(_objectSpread({}, getChainConfig(providedChainConfig.chainNamespace, (_this$coreOptions$cha = this.coreOptions.chainConfig) === null || _this$coreOptions$cha === void 0 ? void 0 : _this$coreOptions$cha.chainId)), this.coreOptions.chainConfig);\n\n          this.walletAdapters[adapterName].setChainConfig(chainConfig);\n        }\n\n        return adapterName;\n      }\n    });\n    const adapterNames = await Promise.all(adapterConfigurationPromises);\n    const hasInAppWallets = Object.values(this.walletAdapters).some(adapter => {\n      if (adapter.type !== ADAPTER_CATEGORY.IN_APP) return false;\n      if (this.modalConfig.adapters[adapter.name].showOnModal !== true) return false;\n      if (!this.modalConfig.adapters[adapter.name].loginMethods) return true;\n      if (Object.values(this.modalConfig.adapters[adapter.name].loginMethods).some(method => method.showOnModal)) return true;\n      return false;\n    });\n    log.debug(hasInAppWallets, this.walletAdapters, \"hasInAppWallets\"); // Now, initialize the adapters.\n\n    const initPromises = adapterNames.map(async adapterName => {\n      if (!adapterName) return;\n\n      try {\n        const adapter = this.walletAdapters[adapterName]; // only initialize a external adapter here if it is a cached adapter.\n\n        if (this.cachedAdapter !== adapterName && adapter.type === ADAPTER_CATEGORY.EXTERNAL) {\n          return;\n        } // in-app wallets or cached wallet (being connected or already connected) are initialized first.\n        // if adapter is configured thn only initialize in app or cached adapter.\n        // external wallets are initialized on INIT_EXTERNAL_WALLET event.\n\n\n        this.subscribeToAdapterEvents(adapter);\n        if (adapter.status === ADAPTER_STATUS.NOT_READY) await adapter.init({\n          autoConnect: this.cachedAdapter === adapterName\n        }); // note: not adding cachedWallet to modal if it is external wallet.\n        // adding it later if no in-app wallets are available.\n\n        if (adapter.type === ADAPTER_CATEGORY.IN_APP) {\n          this.initializeInAppWallet(adapterName);\n        }\n      } catch (error) {\n        log.error(error, \"error while initializing adapter\");\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    await Promise.all(initPromises);\n    const hasExternalWallets = allAdapters.some(adapterName => {\n      var _this$walletAdapters$, _this$modalConfig$ada5;\n\n      return ((_this$walletAdapters$ = this.walletAdapters[adapterName]) === null || _this$walletAdapters$ === void 0 ? void 0 : _this$walletAdapters$.type) === ADAPTER_CATEGORY.EXTERNAL && ((_this$modalConfig$ada5 = this.modalConfig.adapters) === null || _this$modalConfig$ada5 === void 0 ? void 0 : _this$modalConfig$ada5[adapterName].showOnModal);\n    });\n\n    if (hasExternalWallets) {\n      this.loginModal.initExternalWalletContainer();\n    } // variable to check if we have any in app wallets\n    // currently all default in app and external wallets can be hidden or shown based on config.\n\n\n    if (!hasInAppWallets && hasExternalWallets) {\n      // if no in app wallet is available then initialize external wallets in modal\n      await this.initExternalWalletAdapters(false, {\n        showExternalWalletsOnly: true\n      });\n    }\n  }\n\n  async connect() {\n    // if (!this.loginModal.initialized) throw new Error(\"Login modal is not initialized\");\n    // if already connected return provider\n    if (this.provider) return this.provider;\n    this.loginModal.open();\n    return new Promise((resolve, reject) => {\n      this.once(ADAPTER_EVENTS.CONNECTED, () => {\n        return resolve(this.provider);\n      });\n      this.once(ADAPTER_EVENTS.ERRORED, err => {\n        return reject(err);\n      });\n    });\n  }\n\n  async initExternalWalletAdapters(externalWalletsInitialized, options) {\n    if (externalWalletsInitialized) return;\n    const adaptersConfig = {};\n    const adaptersData = {};\n    const adapterPromises = Object.keys(this.walletAdapters).map(async adapterName => {\n      try {\n        const adapter = this.walletAdapters[adapterName];\n\n        if ((adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.EXTERNAL) {\n          log.debug(\"init external wallet\", this.cachedAdapter, adapterName);\n          this.subscribeToAdapterEvents(adapter); // we are not initializing cached adapter here as it is already being initialized in initModal before.\n\n          if (this.cachedAdapter === adapterName) {\n            return;\n          }\n\n          if (adapter.status === ADAPTER_STATUS.NOT_READY) await adapter.init({\n            autoConnect: this.cachedAdapter === adapterName\n          });\n          adaptersConfig[adapterName] = this.modalConfig.adapters[adapterName];\n          adaptersData[adapterName] = adapter.adapterData || {};\n          return adapterName;\n        }\n      } catch (error) {\n        log.error(error, \"error while initializing adapter\");\n      }\n    });\n    const adapterInitResults = await Promise.all(adapterPromises);\n    const finalAdaptersConfig = {};\n    adapterInitResults.forEach(result => {\n      if (result) {\n        finalAdaptersConfig[result] = adaptersConfig[result];\n      }\n    });\n    this.loginModal.addWalletLogins(finalAdaptersConfig, {\n      showExternalWalletsOnly: !!(options !== null && options !== void 0 && options.showExternalWalletsOnly)\n    });\n  }\n\n  initializeInAppWallet(adapterName) {\n    log.info(\"adapterInitResults\", adapterName);\n\n    if (this.walletAdapters[adapterName].type === ADAPTER_CATEGORY.IN_APP) {\n      var _this$modalConfig$ada6, _this$options$uiConfi3;\n\n      this.loginModal.addSocialLogins(adapterName, getAdapterSocialLogins(adapterName, this.walletAdapters[adapterName], (_this$modalConfig$ada6 = this.modalConfig.adapters[adapterName]) === null || _this$modalConfig$ada6 === void 0 ? void 0 : _this$modalConfig$ada6.loginMethods), ((_this$options$uiConfi3 = this.options.uiConfig) === null || _this$options$uiConfi3 === void 0 ? void 0 : _this$options$uiConfi3.loginMethodsOrder) || OPENLOGIN_PROVIDERS);\n    }\n  }\n\n  subscribeToLoginModalEvents() {\n    this.loginModal.on(LOGIN_MODAL_EVENTS.LOGIN, async params => {\n      try {\n        await this.connectTo(params.adapter, params.loginParams);\n      } catch (error) {\n        log.error(\"Error while connecting to adapter: \".concat(params.adapter), error);\n      }\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.INIT_EXTERNAL_WALLETS, async params => {\n      await this.initExternalWalletAdapters(params.externalWalletsInitialized);\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.DISCONNECT, async () => {\n      try {\n        await this.logout();\n      } catch (error) {\n        log.error(\"Error while disconnecting\", error);\n      }\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, async visibility => {\n      var _this$walletAdapters$2;\n\n      log.debug(\"is login modal visible\", visibility);\n      this.emit(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, visibility);\n      const walletConnectStatus = (_this$walletAdapters$2 = this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1]) === null || _this$walletAdapters$2 === void 0 ? void 0 : _this$walletAdapters$2.status;\n\n      if (visibility && walletConnectStatus === ADAPTER_STATUS.READY) {\n        // refreshing session for wallet connect whenever modal is opened.\n        try {\n          this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1].connect();\n        } catch (error) {\n          log.error(\"Error while disconnecting to wallet connect in core\", error);\n        }\n      }\n    });\n  }\n\n}\n\nexport { OPENLOGIN_PROVIDERS, Web3Auth, defaultEvmDappModalConfig, defaultEvmWalletModalConfig, defaultSolanaDappModalConfig, defaultSolanaWalletModalConfig };\n//# sourceMappingURL=web3auth.esm.js.map\n"]},"metadata":{},"sourceType":"module"}