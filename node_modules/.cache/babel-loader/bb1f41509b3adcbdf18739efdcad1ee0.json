{"ast":null,"code":"var arraySlice = require('../internals/array-slice-simple');\n\nvar floor = Math.floor;\n\nvar mergeSort = function (array, comparefn) {\n  var length = array.length;\n  var middle = floor(length / 2);\n  return length < 8 ? insertionSort(array, comparefn) : merge(array, mergeSort(arraySlice(array, 0, middle), comparefn), mergeSort(arraySlice(array, middle), comparefn), comparefn);\n};\n\nvar insertionSort = function (array, comparefn) {\n  var length = array.length;\n  var i = 1;\n  var element, j;\n\n  while (i < length) {\n    j = i;\n    element = array[i];\n\n    while (j && comparefn(array[j - 1], element) > 0) {\n      array[j] = array[--j];\n    }\n\n    if (j !== i++) array[j] = element;\n  }\n\n  return array;\n};\n\nvar merge = function (array, left, right, comparefn) {\n  var llength = left.length;\n  var rlength = right.length;\n  var lindex = 0;\n  var rindex = 0;\n\n  while (lindex < llength || rindex < rlength) {\n    array[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++] : lindex < llength ? left[lindex++] : right[rindex++];\n  }\n\n  return array;\n};\n\nmodule.exports = mergeSort;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/Twitter-Start/node_modules/core-js-pure/internals/array-sort.js"],"names":["arraySlice","require","floor","Math","mergeSort","array","comparefn","length","middle","insertionSort","merge","i","element","j","left","right","llength","rlength","lindex","rindex","module","exports"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,iCAAD,CAAxB;;AAEA,IAAIC,KAAK,GAAGC,IAAI,CAACD,KAAjB;;AAEA,IAAIE,SAAS,GAAG,UAAUC,KAAV,EAAiBC,SAAjB,EAA4B;AAC1C,MAAIC,MAAM,GAAGF,KAAK,CAACE,MAAnB;AACA,MAAIC,MAAM,GAAGN,KAAK,CAACK,MAAM,GAAG,CAAV,CAAlB;AACA,SAAOA,MAAM,GAAG,CAAT,GAAaE,aAAa,CAACJ,KAAD,EAAQC,SAAR,CAA1B,GAA+CI,KAAK,CACzDL,KADyD,EAEzDD,SAAS,CAACJ,UAAU,CAACK,KAAD,EAAQ,CAAR,EAAWG,MAAX,CAAX,EAA+BF,SAA/B,CAFgD,EAGzDF,SAAS,CAACJ,UAAU,CAACK,KAAD,EAAQG,MAAR,CAAX,EAA4BF,SAA5B,CAHgD,EAIzDA,SAJyD,CAA3D;AAMD,CATD;;AAWA,IAAIG,aAAa,GAAG,UAAUJ,KAAV,EAAiBC,SAAjB,EAA4B;AAC9C,MAAIC,MAAM,GAAGF,KAAK,CAACE,MAAnB;AACA,MAAII,CAAC,GAAG,CAAR;AACA,MAAIC,OAAJ,EAAaC,CAAb;;AAEA,SAAOF,CAAC,GAAGJ,MAAX,EAAmB;AACjBM,IAAAA,CAAC,GAAGF,CAAJ;AACAC,IAAAA,OAAO,GAAGP,KAAK,CAACM,CAAD,CAAf;;AACA,WAAOE,CAAC,IAAIP,SAAS,CAACD,KAAK,CAACQ,CAAC,GAAG,CAAL,CAAN,EAAeD,OAAf,CAAT,GAAmC,CAA/C,EAAkD;AAChDP,MAAAA,KAAK,CAACQ,CAAD,CAAL,GAAWR,KAAK,CAAC,EAAEQ,CAAH,CAAhB;AACD;;AACD,QAAIA,CAAC,KAAKF,CAAC,EAAX,EAAeN,KAAK,CAACQ,CAAD,CAAL,GAAWD,OAAX;AAChB;;AAAC,SAAOP,KAAP;AACH,CAbD;;AAeA,IAAIK,KAAK,GAAG,UAAUL,KAAV,EAAiBS,IAAjB,EAAuBC,KAAvB,EAA8BT,SAA9B,EAAyC;AACnD,MAAIU,OAAO,GAAGF,IAAI,CAACP,MAAnB;AACA,MAAIU,OAAO,GAAGF,KAAK,CAACR,MAApB;AACA,MAAIW,MAAM,GAAG,CAAb;AACA,MAAIC,MAAM,GAAG,CAAb;;AAEA,SAAOD,MAAM,GAAGF,OAAT,IAAoBG,MAAM,GAAGF,OAApC,EAA6C;AAC3CZ,IAAAA,KAAK,CAACa,MAAM,GAAGC,MAAV,CAAL,GAA0BD,MAAM,GAAGF,OAAT,IAAoBG,MAAM,GAAGF,OAA9B,GACrBX,SAAS,CAACQ,IAAI,CAACI,MAAD,CAAL,EAAeH,KAAK,CAACI,MAAD,CAApB,CAAT,IAA0C,CAA1C,GAA8CL,IAAI,CAACI,MAAM,EAAP,CAAlD,GAA+DH,KAAK,CAACI,MAAM,EAAP,CAD/C,GAErBD,MAAM,GAAGF,OAAT,GAAmBF,IAAI,CAACI,MAAM,EAAP,CAAvB,GAAoCH,KAAK,CAACI,MAAM,EAAP,CAF7C;AAGD;;AAAC,SAAOd,KAAP;AACH,CAXD;;AAaAe,MAAM,CAACC,OAAP,GAAiBjB,SAAjB","sourcesContent":["var arraySlice = require('../internals/array-slice-simple');\n\nvar floor = Math.floor;\n\nvar mergeSort = function (array, comparefn) {\n  var length = array.length;\n  var middle = floor(length / 2);\n  return length < 8 ? insertionSort(array, comparefn) : merge(\n    array,\n    mergeSort(arraySlice(array, 0, middle), comparefn),\n    mergeSort(arraySlice(array, middle), comparefn),\n    comparefn\n  );\n};\n\nvar insertionSort = function (array, comparefn) {\n  var length = array.length;\n  var i = 1;\n  var element, j;\n\n  while (i < length) {\n    j = i;\n    element = array[i];\n    while (j && comparefn(array[j - 1], element) > 0) {\n      array[j] = array[--j];\n    }\n    if (j !== i++) array[j] = element;\n  } return array;\n};\n\nvar merge = function (array, left, right, comparefn) {\n  var llength = left.length;\n  var rlength = right.length;\n  var lindex = 0;\n  var rindex = 0;\n\n  while (lindex < llength || rindex < rlength) {\n    array[lindex + rindex] = (lindex < llength && rindex < rlength)\n      ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]\n      : lindex < llength ? left[lindex++] : right[rindex++];\n  } return array;\n};\n\nmodule.exports = mergeSort;\n"]},"metadata":{},"sourceType":"script"}