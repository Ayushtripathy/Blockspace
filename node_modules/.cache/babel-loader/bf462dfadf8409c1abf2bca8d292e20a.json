{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Duplex } from 'readable-stream';\nimport { randomId } from '@toruslabs/openlogin-utils';\nimport { EventEmitter } from 'events';\nimport stringify from 'fast-safe-stringify';\nimport eos from 'end-of-stream';\nimport once from 'once';\nimport pump from 'pump';\n\nfunction noop() {\n  return undefined;\n}\n\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\n\nclass BasePostMessageStream extends Duplex {\n  constructor(_ref) {\n    let {\n      name,\n      target,\n      targetWindow = window,\n      targetOrigin = \"*\"\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    _defineProperty(this, \"_init\", void 0);\n\n    _defineProperty(this, \"_haveSyn\", void 0);\n\n    _defineProperty(this, \"_name\", void 0);\n\n    _defineProperty(this, \"_target\", void 0);\n\n    _defineProperty(this, \"_targetWindow\", void 0);\n\n    _defineProperty(this, \"_targetOrigin\", void 0);\n\n    _defineProperty(this, \"_onMessage\", void 0);\n\n    _defineProperty(this, \"_synIntervalId\", void 0);\n\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n    window.addEventListener(\"message\", this._onMessage, false);\n\n    this._handShake();\n  }\n\n  _break() {\n    this.cork();\n\n    this._write(BRK, null, noop);\n\n    this._haveSyn = false;\n    this._init = false;\n  }\n\n  _handShake() {\n    this._write(SYN, null, noop);\n\n    this.cork();\n  }\n\n  _onData(data) {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n\n  _postMessage(data) {\n    const originConstraint = this._targetOrigin;\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n  onMessage(event) {\n    const message = event.data; // validate message\n\n    if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(data, _, cb) {\n    this._postMessage(data);\n\n    cb();\n  }\n\n  _destroy() {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n\n}\n\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\n\nfunction arrayClone(arr) {\n  const n = arr.length;\n  const copy = new Array(n);\n\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n\n  return copy;\n}\n\nclass SafeEventEmitter extends EventEmitter {\n  emit(type) {\n    let doError = type === \"error\";\n    const events = this._events;\n\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    } // If there is no 'error' event listener then throw.\n\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (doError) {\n      let er;\n\n      if (args.length > 0) {\n        [er] = args;\n      }\n\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      } // At least give some kind of context to the user\n\n\n      const err = new Error(\"Unhandled error.\".concat(er ? \" (\".concat(er.message, \")\") : \"\"));\n      err.context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n\n    if (handler === undefined) {\n      return false;\n    }\n\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n\n    return true;\n  }\n\n}\n\nclass SerializableError extends Error {\n  constructor(_ref) {\n    let {\n      code,\n      message,\n      data\n    } = _ref;\n\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n\n    super(message);\n\n    _defineProperty(this, \"code\", void 0);\n\n    _defineProperty(this, \"data\", void 0);\n\n    this.code = code;\n\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n\n  toString() {\n    return stringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack\n    });\n  }\n\n}\n\nfunction serializeError(error) {\n  return error.toString();\n}\n\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n};\n\nfunction createErrorMiddleware(log) {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({\n          code: -32603,\n          message: \"invalid method\"\n        });\n        end();\n        return;\n      }\n\n      next(done => {\n        const {\n          error\n        } = res;\n\n        if (!error) {\n          return done();\n        }\n\n        log.error(\"OpenLogin - RPC Error: \".concat(error.message), error);\n        return done();\n      });\n    } catch (error) {\n      log.error(\"OpenLogin - RPC Error thrown: \".concat(error.message), error);\n      res.error = new SerializableError({\n        code: -32603,\n        message: error.message\n      });\n      end();\n    }\n  };\n}\n\nfunction createStreamMiddleware() {\n  const idMap = {};\n\n  function readNoop() {\n    return false;\n  }\n\n  const events = new SafeEventEmitter();\n\n  function processResponse(res) {\n    const context = idMap[res.id];\n\n    if (!context) {\n      throw new Error(\"StreamMiddleware - Unknown response id \\\"\".concat(res.id, \"\\\"\"));\n    }\n\n    delete idMap[res.id]; // copy whole res onto original res\n\n    Object.assign(context.res, res); // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n\n    setTimeout(context.end);\n  }\n\n  function processNotification(res) {\n    events.emit(\"notification\", res);\n  }\n\n  function processMessage(res, _encoding, cb) {\n    let err;\n\n    try {\n      const isNotification = !res.id;\n\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    } // continue processing stream\n\n\n    cb(err);\n  }\n\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n\n  const middleware = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req); // register request on id map\n\n    idMap[req.id] = {\n      req,\n      res,\n      next,\n      end\n    };\n  };\n\n  return {\n    events,\n    middleware,\n    stream\n  };\n}\n\nfunction createScaffoldMiddleware(handlers) {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method]; // if no handler, return\n\n    if (handler === undefined) {\n      return next();\n    } // if handler is fn, call as middleware\n\n\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    } // if handler is some other value, use as result\n\n\n    res.result = handler;\n    return end();\n  };\n}\n\nfunction createIdRemapMiddleware() {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = randomId();\n    req.id = newId;\n    res.id = newId;\n    next(done => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\n\nfunction createLoggerMiddleware(logger) {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\n\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise;\n    const nextPromise = new Promise(resolve => {\n      resolveNextPromise = resolve;\n    });\n    let returnHandlerCallback = null;\n    let nextWasCalled = false; // This will be called by the consumer's async middleware.\n\n    const asyncNext = async () => {\n      nextWasCalled = true; // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next(runReturnHandlersCallback => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n\n        returnHandlerCallback(null);\n      } else {\n        end(null);\n      }\n    } catch (error) {\n      if (returnHandlerCallback) {\n        returnHandlerCallback(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\n\n\nclass JRPCEngine extends SafeEventEmitter {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"_middleware\", void 0);\n\n    this._middleware = [];\n  }\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n\n\n  static async _runAllMiddleware(req, res, middlewareStack) {\n    const returnHandlers = [];\n    let error = null;\n    let isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n\n      if (isComplete) {\n        break;\n      }\n    }\n\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n\n\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n\n        if (error) {\n          res.error = serializeError(error);\n        } // True indicates that the request should end\n\n\n        resolve([error, true]);\n      };\n\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({\n                code: -32603,\n                message: \"JRPCEngine: 'next' return handlers must be functions\"\n              }));\n            }\n\n            returnHandlers.push(returnHandler);\n          } // False indicates that the request should not end\n\n\n          resolve([null, false]);\n        }\n      };\n\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n\n\n  static async _runReturnHandlers(handlers) {\n    for (const handler of handlers) {\n      await new Promise((resolve, reject) => {\n        handler(err => err ? reject(err) : resolve());\n      });\n    }\n  }\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n\n\n  static _checkForCompletion(req, res, isComplete) {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Response has no error or result for request\"\n      });\n    }\n\n    if (!isComplete) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Nothing ended request\"\n      });\n    }\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n\n\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n\n  handle(req, cb) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n\n      return this._handleBatch(req);\n    }\n\n    if (cb) {\n      return this._handle(req, cb);\n    }\n\n    return this._promiseHandle(req);\n  }\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n\n\n  asMiddleware() {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError);\n        }\n\n        return next(async handlerCallback => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n\n  async _handleBatch(reqs, cb) {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all( // 1. Begin executing each request in the order received\n      reqs.map(this._promiseHandle.bind(this))); // 3. Return batch response\n\n      if (cb) {\n        return cb(null, responses);\n      }\n\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * A promise-wrapped _handle.\n   */\n\n\n  _promiseHandle(req) {\n    return new Promise(resolve => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n\n\n  async _handle(callerReq, cb) {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"request must be plain object\"\n      });\n      return cb(error, {\n        id: undefined,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"method must be string\"\n      });\n      return cb(error, {\n        id: callerReq.id,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n\n    const req = _objectSpread$1({}, callerReq);\n\n    const res = {\n      id: req.id,\n      jsonrpc: req.jsonrpc\n    };\n    let error = null;\n\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n\n      if (!res.error) {\n        res.error = serializeError(error);\n      }\n    }\n\n    return cb(error, res);\n  }\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n\n\n  async _processRequest(req, res) {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware); // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n\n    JRPCEngine._checkForCompletion(req, res, isComplete); // The return handlers should run even if an error was encountered during\n    // middleware processing.\n\n\n    await JRPCEngine._runReturnHandlers(returnHandlers); // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n\n    if (error) {\n      throw error;\n    }\n  }\n\n}\n\nfunction mergeMiddleware(middlewareStack) {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach(middleware => engine.push(middleware));\n  return engine.asMiddleware();\n}\n\nfunction createEngineStream(opts) {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n\n  const {\n    engine\n  } = opts; // eslint-disable-next-line prefer-const\n\n  let stream;\n\n  function read() {\n    return undefined;\n  }\n\n  function write(req, _encoding, cb) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n\n  stream = new Duplex({\n    objectMode: true,\n    read,\n    write\n  }); // forward notifications\n\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      stream.push(message);\n    });\n  }\n\n  return stream;\n}\n\nclass Substream extends Duplex {\n  constructor(_ref) {\n    let {\n      parent,\n      name\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    _defineProperty(this, \"_parent\", void 0);\n\n    _defineProperty(this, \"_name\", void 0);\n\n    this._parent = parent;\n    this._name = name;\n  }\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n\n\n  _read() {\n    return undefined;\n  }\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n\n\n  _write(chunk, _encoding, callback) {\n    this._parent.push({\n      name: this._name,\n      data: chunk\n    });\n\n    callback();\n  }\n\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\n\nclass ObjectMultiplex extends Duplex {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(_objectSpread(_objectSpread({}, opts), {}, {\n      objectMode: true\n    }));\n\n    _defineProperty(this, \"_substreams\", void 0);\n\n    _defineProperty(this, \"getStream\", void 0);\n\n    this._substreams = {};\n  }\n\n  createStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // create substream\n\n\n    const substream = new Substream({\n      parent: this,\n      name\n    });\n    this._substreams[name] = substream; // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    anyStreamEnd(this, _error => substream.destroy(_error || undefined));\n    return substream;\n  } // ignore streams (dont display orphaned data warning)\n\n\n  ignoreStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // set\n\n\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(chunk, _encoding, callback) {\n    const {\n      name,\n      data\n    } = chunk;\n\n    if (!name) {\n      window.console.warn(\"ObjectMultiplex - malformed chunk without name \\\"\".concat(chunk, \"\\\"\"));\n      return callback();\n    } // get corresponding substream\n\n\n    const substream = this._substreams[name];\n\n    if (!substream) {\n      window.console.warn(\"ObjectMultiplex - orphaned data for stream \\\"\".concat(name, \"\\\"\"));\n      return callback();\n    } // push data into substream\n\n\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n\n    return callback();\n  }\n\n} // util\n\n\nfunction anyStreamEnd(stream, _cb) {\n  const cb = once(_cb);\n  eos(stream, {\n    readable: false\n  }, cb);\n  eos(stream, {\n    writable: false\n  }, cb);\n}\n\nfunction setupMultiplex(stream) {\n  const mux = new ObjectMultiplex();\n\n  mux.getStream = function streamHelper(name) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n\n    return this.createStream(name);\n  };\n\n  pump(stream, mux, stream, err => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n\nclass PostMessageStream extends BasePostMessageStream {\n  _postMessage(data) {\n    let originConstraint = this._targetOrigin;\n\n    if (typeof data === \"object\") {\n      const dataObj = data;\n\n      if (typeof dataObj.data === \"object\") {\n        const dataObjData = dataObj.data;\n\n        if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n          const dataObjDataParam = dataObjData.params[0];\n\n          if (dataObjDataParam._origin) {\n            originConstraint = dataObjDataParam._origin;\n          } // add a constraint for the response\n\n\n          dataObjDataParam._origin = window.location.origin;\n        }\n      }\n    }\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n}\n\nexport { BasePostMessageStream, IGNORE_SUBSTREAM, JRPCEngine, ObjectMultiplex, PostMessageStream, SafeEventEmitter, SerializableError, Substream, createAsyncMiddleware, createEngineStream, createErrorMiddleware, createIdRemapMiddleware, createLoggerMiddleware, createScaffoldMiddleware, createStreamMiddleware, getRpcPromiseCallback, mergeMiddleware, serializeError, setupMultiplex };","map":{"version":3,"sources":["../src/basePostMessageStream.ts","../src/safeEventEmitter.ts","../src/serializableError.ts","../src/jrpc.ts","../src/jrpcEngine.ts","../src/substream.ts","../src/mux.ts","../src/postMessageStream.ts"],"names":["SYN","ACK","BRK","BasePostMessageStream","Duplex","constructor","targetWindow","targetOrigin","objectMode","window","_break","_handShake","_onData","data","_postMessage","originConstraint","target","onMessage","message","event","_read","_write","cb","_destroy","Reflect","setTimeout","n","arr","copy","i","SafeEventEmitter","EventEmitter","emit","args","doError","type","events","er","err","handler","safeApply","len","listeners","arrayClone","SerializableError","Error","Number","toString","stringify","code","stack","serializeError","error","getRpcPromiseCallback","unwrapResult","response","reject","Array","resolve","createErrorMiddleware","log","req","res","end","next","done","createStreamMiddleware","idMap","context","Object","isNotification","processNotification","processResponse","stream","read","write","processMessage","middleware","createScaffoldMiddleware","handlers","createIdRemapMiddleware","originalId","newId","randomId","createLoggerMiddleware","logger","createAsyncMiddleware","asyncMiddleware","nextPromise","resolveNextPromise","returnHandlerCallback","nextWasCalled","asyncNext","runReturnHandlersCallback","JRPCEngine","_runAllMiddleware","returnHandlers","isComplete","_runMiddleware","returnHandler","_runReturnHandlers","_checkForCompletion","push","handle","asMiddleware","handlerCallback","_handleBatch","responses","Promise","reqs","_promiseHandle","_handle","id","jsonrpc","callerReq","_processRequest","mergeMiddleware","middlewareStack","engine","createEngineStream","opts","Substream","name","chunk","callback","IGNORE_SUBSTREAM","Symbol","ObjectMultiplex","createStream","substream","parent","anyStreamEnd","_error","ignoreStream","once","eos","readable","writable","setupMultiplex","mux","pump","PostMessageStream","dataObj","dataObjData","dataObjDataParam"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Duplex } from 'readable-stream';\nimport { randomId } from '@toruslabs/openlogin-utils';\nimport { EventEmitter } from 'events';\nimport stringify from 'fast-safe-stringify';\nimport eos from 'end-of-stream';\nimport once from 'once';\nimport pump from 'pump';\n\nfunction noop() {\n  return undefined;\n}\n\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\nclass BasePostMessageStream extends Duplex {\n  constructor(_ref) {\n    let {\n      name,\n      target,\n      targetWindow = window,\n      targetOrigin = \"*\"\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    _defineProperty(this, \"_init\", void 0);\n\n    _defineProperty(this, \"_haveSyn\", void 0);\n\n    _defineProperty(this, \"_name\", void 0);\n\n    _defineProperty(this, \"_target\", void 0);\n\n    _defineProperty(this, \"_targetWindow\", void 0);\n\n    _defineProperty(this, \"_targetOrigin\", void 0);\n\n    _defineProperty(this, \"_onMessage\", void 0);\n\n    _defineProperty(this, \"_synIntervalId\", void 0);\n\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n    window.addEventListener(\"message\", this._onMessage, false);\n\n    this._handShake();\n  }\n\n  _break() {\n    this.cork();\n\n    this._write(BRK, null, noop);\n\n    this._haveSyn = false;\n    this._init = false;\n  }\n\n  _handShake() {\n    this._write(SYN, null, noop);\n\n    this.cork();\n  }\n\n  _onData(data) {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n\n  _postMessage(data) {\n    const originConstraint = this._targetOrigin;\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n  onMessage(event) {\n    const message = event.data; // validate message\n\n    if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(data, _, cb) {\n    this._postMessage(data);\n\n    cb();\n  }\n\n  _destroy() {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n\n}\n\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\n\nfunction arrayClone(arr) {\n  const n = arr.length;\n  const copy = new Array(n);\n\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n\n  return copy;\n}\n\nclass SafeEventEmitter extends EventEmitter {\n  emit(type) {\n    let doError = type === \"error\";\n    const events = this._events;\n\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    } // If there is no 'error' event listener then throw.\n\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (doError) {\n      let er;\n\n      if (args.length > 0) {\n        [er] = args;\n      }\n\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      } // At least give some kind of context to the user\n\n\n      const err = new Error(\"Unhandled error.\".concat(er ? \" (\".concat(er.message, \")\") : \"\"));\n      err.context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n\n    if (handler === undefined) {\n      return false;\n    }\n\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n\n    return true;\n  }\n\n}\n\nclass SerializableError extends Error {\n  constructor(_ref) {\n    let {\n      code,\n      message,\n      data\n    } = _ref;\n\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n\n    super(message);\n\n    _defineProperty(this, \"code\", void 0);\n\n    _defineProperty(this, \"data\", void 0);\n\n    this.code = code;\n\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n\n  toString() {\n    return stringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack\n    });\n  }\n\n}\n\nfunction serializeError(error) {\n  return error.toString();\n}\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n};\nfunction createErrorMiddleware(log) {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({\n          code: -32603,\n          message: \"invalid method\"\n        });\n        end();\n        return;\n      }\n\n      next(done => {\n        const {\n          error\n        } = res;\n\n        if (!error) {\n          return done();\n        }\n\n        log.error(\"OpenLogin - RPC Error: \".concat(error.message), error);\n        return done();\n      });\n    } catch (error) {\n      log.error(\"OpenLogin - RPC Error thrown: \".concat(error.message), error);\n      res.error = new SerializableError({\n        code: -32603,\n        message: error.message\n      });\n      end();\n    }\n  };\n}\nfunction createStreamMiddleware() {\n  const idMap = {};\n\n  function readNoop() {\n    return false;\n  }\n\n  const events = new SafeEventEmitter();\n\n  function processResponse(res) {\n    const context = idMap[res.id];\n\n    if (!context) {\n      throw new Error(\"StreamMiddleware - Unknown response id \\\"\".concat(res.id, \"\\\"\"));\n    }\n\n    delete idMap[res.id]; // copy whole res onto original res\n\n    Object.assign(context.res, res); // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n\n    setTimeout(context.end);\n  }\n\n  function processNotification(res) {\n    events.emit(\"notification\", res);\n  }\n\n  function processMessage(res, _encoding, cb) {\n    let err;\n\n    try {\n      const isNotification = !res.id;\n\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    } // continue processing stream\n\n\n    cb(err);\n  }\n\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n\n  const middleware = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req); // register request on id map\n\n    idMap[req.id] = {\n      req,\n      res,\n      next,\n      end\n    };\n  };\n\n  return {\n    events,\n    middleware,\n    stream\n  };\n}\nfunction createScaffoldMiddleware(handlers) {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method]; // if no handler, return\n\n    if (handler === undefined) {\n      return next();\n    } // if handler is fn, call as middleware\n\n\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    } // if handler is some other value, use as result\n\n\n    res.result = handler;\n    return end();\n  };\n}\nfunction createIdRemapMiddleware() {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = randomId();\n    req.id = newId;\n    res.id = newId;\n    next(done => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\nfunction createLoggerMiddleware(logger) {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise;\n    const nextPromise = new Promise(resolve => {\n      resolveNextPromise = resolve;\n    });\n    let returnHandlerCallback = null;\n    let nextWasCalled = false; // This will be called by the consumer's async middleware.\n\n    const asyncNext = async () => {\n      nextWasCalled = true; // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next(runReturnHandlersCallback => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n\n        returnHandlerCallback(null);\n      } else {\n        end(null);\n      }\n    } catch (error) {\n      if (returnHandlerCallback) {\n        returnHandlerCallback(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\n\nclass JRPCEngine extends SafeEventEmitter {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"_middleware\", void 0);\n\n    this._middleware = [];\n  }\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n\n\n  static async _runAllMiddleware(req, res, middlewareStack) {\n    const returnHandlers = [];\n    let error = null;\n    let isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n\n      if (isComplete) {\n        break;\n      }\n    }\n\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n\n\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n\n        if (error) {\n          res.error = serializeError(error);\n        } // True indicates that the request should end\n\n\n        resolve([error, true]);\n      };\n\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({\n                code: -32603,\n                message: \"JRPCEngine: 'next' return handlers must be functions\"\n              }));\n            }\n\n            returnHandlers.push(returnHandler);\n          } // False indicates that the request should not end\n\n\n          resolve([null, false]);\n        }\n      };\n\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n\n\n  static async _runReturnHandlers(handlers) {\n    for (const handler of handlers) {\n      await new Promise((resolve, reject) => {\n        handler(err => err ? reject(err) : resolve());\n      });\n    }\n  }\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n\n\n  static _checkForCompletion(req, res, isComplete) {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Response has no error or result for request\"\n      });\n    }\n\n    if (!isComplete) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Nothing ended request\"\n      });\n    }\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n\n\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n\n  handle(req, cb) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n\n      return this._handleBatch(req);\n    }\n\n    if (cb) {\n      return this._handle(req, cb);\n    }\n\n    return this._promiseHandle(req);\n  }\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n\n\n  asMiddleware() {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError);\n        }\n\n        return next(async handlerCallback => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n\n  async _handleBatch(reqs, cb) {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all( // 1. Begin executing each request in the order received\n      reqs.map(this._promiseHandle.bind(this))); // 3. Return batch response\n\n      if (cb) {\n        return cb(null, responses);\n      }\n\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * A promise-wrapped _handle.\n   */\n\n\n  _promiseHandle(req) {\n    return new Promise(resolve => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n\n\n  async _handle(callerReq, cb) {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"request must be plain object\"\n      });\n      return cb(error, {\n        id: undefined,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"method must be string\"\n      });\n      return cb(error, {\n        id: callerReq.id,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n\n    const req = _objectSpread$1({}, callerReq);\n\n    const res = {\n      id: req.id,\n      jsonrpc: req.jsonrpc\n    };\n    let error = null;\n\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n\n      if (!res.error) {\n        res.error = serializeError(error);\n      }\n    }\n\n    return cb(error, res);\n  }\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n\n\n  async _processRequest(req, res) {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware); // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n\n    JRPCEngine._checkForCompletion(req, res, isComplete); // The return handlers should run even if an error was encountered during\n    // middleware processing.\n\n\n    await JRPCEngine._runReturnHandlers(returnHandlers); // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n\n    if (error) {\n      throw error;\n    }\n  }\n\n}\nfunction mergeMiddleware(middlewareStack) {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach(middleware => engine.push(middleware));\n  return engine.asMiddleware();\n}\nfunction createEngineStream(opts) {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n\n  const {\n    engine\n  } = opts; // eslint-disable-next-line prefer-const\n\n  let stream;\n\n  function read() {\n    return undefined;\n  }\n\n  function write(req, _encoding, cb) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n\n  stream = new Duplex({\n    objectMode: true,\n    read,\n    write\n  }); // forward notifications\n\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      stream.push(message);\n    });\n  }\n\n  return stream;\n}\n\nclass Substream extends Duplex {\n  constructor(_ref) {\n    let {\n      parent,\n      name\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    _defineProperty(this, \"_parent\", void 0);\n\n    _defineProperty(this, \"_name\", void 0);\n\n    this._parent = parent;\n    this._name = name;\n  }\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n\n\n  _read() {\n    return undefined;\n  }\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n\n\n  _write(chunk, _encoding, callback) {\n    this._parent.push({\n      name: this._name,\n      data: chunk\n    });\n\n    callback();\n  }\n\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\nclass ObjectMultiplex extends Duplex {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(_objectSpread(_objectSpread({}, opts), {}, {\n      objectMode: true\n    }));\n\n    _defineProperty(this, \"_substreams\", void 0);\n\n    _defineProperty(this, \"getStream\", void 0);\n\n    this._substreams = {};\n  }\n\n  createStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // create substream\n\n\n    const substream = new Substream({\n      parent: this,\n      name\n    });\n    this._substreams[name] = substream; // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    anyStreamEnd(this, _error => substream.destroy(_error || undefined));\n    return substream;\n  } // ignore streams (dont display orphaned data warning)\n\n\n  ignoreStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // set\n\n\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(chunk, _encoding, callback) {\n    const {\n      name,\n      data\n    } = chunk;\n\n    if (!name) {\n      window.console.warn(\"ObjectMultiplex - malformed chunk without name \\\"\".concat(chunk, \"\\\"\"));\n      return callback();\n    } // get corresponding substream\n\n\n    const substream = this._substreams[name];\n\n    if (!substream) {\n      window.console.warn(\"ObjectMultiplex - orphaned data for stream \\\"\".concat(name, \"\\\"\"));\n      return callback();\n    } // push data into substream\n\n\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n\n    return callback();\n  }\n\n} // util\n\nfunction anyStreamEnd(stream, _cb) {\n  const cb = once(_cb);\n  eos(stream, {\n    readable: false\n  }, cb);\n  eos(stream, {\n    writable: false\n  }, cb);\n}\n\nfunction setupMultiplex(stream) {\n  const mux = new ObjectMultiplex();\n\n  mux.getStream = function streamHelper(name) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n\n    return this.createStream(name);\n  };\n\n  pump(stream, mux, stream, err => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n\nclass PostMessageStream extends BasePostMessageStream {\n  _postMessage(data) {\n    let originConstraint = this._targetOrigin;\n\n    if (typeof data === \"object\") {\n      const dataObj = data;\n\n      if (typeof dataObj.data === \"object\") {\n        const dataObjData = dataObj.data;\n\n        if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n          const dataObjDataParam = dataObjData.params[0];\n\n          if (dataObjDataParam._origin) {\n            originConstraint = dataObjDataParam._origin;\n          } // add a constraint for the response\n\n\n          dataObjDataParam._origin = window.location.origin;\n        }\n      }\n    }\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n}\n\nexport { BasePostMessageStream, IGNORE_SUBSTREAM, JRPCEngine, ObjectMultiplex, PostMessageStream, SafeEventEmitter, SerializableError, Substream, createAsyncMiddleware, createEngineStream, createErrorMiddleware, createIdRemapMiddleware, createLoggerMiddleware, createScaffoldMiddleware, createStreamMiddleware, getRpcPromiseCallback, mergeMiddleware, serializeError, setupMultiplex };\n//# sourceMappingURL=openloginJrpc.esm.js.map\n"]},"metadata":{},"sourceType":"module"}