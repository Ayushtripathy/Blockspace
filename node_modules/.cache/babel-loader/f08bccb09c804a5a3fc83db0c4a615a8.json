{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.track = track;\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Parse.Analytics provides an interface to Parse's logging and analytics\n * backend.\n *\n * @class Parse.Analytics\n * @static\n * @hideconstructor\n */\n\n/**\n * Tracks the occurrence of a custom event with additional dimensions.\n * Parse will store a data point at the time of invocation with the given\n * event name.\n *\n * Dimensions will allow segmentation of the occurrences of this custom\n * event. Keys and values should be {@code String}s, and will throw\n * otherwise.\n *\n * To track a user signup along with additional metadata, consider the\n * following:\n * <pre>\n * var dimensions = {\n *  gender: 'm',\n *  source: 'web',\n *  dayType: 'weekend'\n * };\n * Parse.Analytics.track('signup', dimensions);\n * </pre>\n *\n * There is a default limit of 8 dimensions per event tracked.\n *\n * @function track\n * @name Parse.Analytics.track\n * @param {string} name The name of the custom event to report to Parse as\n * having happened.\n * @param {object} dimensions The dictionary of information by which to\n * segment this event.\n * @returns {Promise} A promise that is resolved when the round-trip\n * to the server completes.\n */\n\n\nfunction track(name\n/*: string*/\n, dimensions\n/*: { [key: string]: string }*/\n)\n/*: Promise*/\n{\n  name = name || '';\n  name = name.replace(/^\\s*/, '');\n  name = name.replace(/\\s*$/, '');\n\n  if (name.length === 0) {\n    throw new TypeError('A name for the custom event must be provided');\n  }\n\n  for (var _key in dimensions) {\n    if (typeof _key !== 'string' || typeof dimensions[_key] !== 'string') {\n      throw new TypeError('track() dimensions expects keys and values of type \"string\".');\n    }\n  }\n\n  return _CoreManager.default.getAnalyticsController().track(name, dimensions);\n}\n\nvar DefaultController = {\n  track: function (name, dimensions) {\n    var path = \"events/\".concat(name);\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', path, {\n      dimensions: dimensions\n    });\n  }\n};\n\n_CoreManager.default.setAnalyticsController(DefaultController);","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/Twitter-Start/node_modules/moralis/lib/browser/Analytics.js"],"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","track","_CoreManager","name","dimensions","replace","length","TypeError","_key","default","getAnalyticsController","DefaultController","path","concat","RESTController","getRESTController","request","setAnalyticsController"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8DAAD,CAApC;;AAEA,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,sDAAD,CAApC;;AAEAD,sBAAsB,CAACG,OAAD,EAAU,YAAV,EAAwB;AAC5CC,EAAAA,KAAK,EAAE;AADqC,CAAxB,CAAtB;;AAIAD,OAAO,CAACE,KAAR,GAAgBA,KAAhB;;AAEA,IAAIC,YAAY,GAAGJ,sBAAsB,CAACD,OAAO,CAAC,eAAD,CAAR,CAAzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASI,KAAT,CAAeE;AACf;AADA,EAEEC;AACF;AAHA;AAKA;AACA;AACED,EAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AACAA,EAAAA,IAAI,GAAGA,IAAI,CAACE,OAAL,CAAa,MAAb,EAAqB,EAArB,CAAP;AACAF,EAAAA,IAAI,GAAGA,IAAI,CAACE,OAAL,CAAa,MAAb,EAAqB,EAArB,CAAP;;AAEA,MAAIF,IAAI,CAACG,MAAL,KAAgB,CAApB,EAAuB;AACrB,UAAM,IAAIC,SAAJ,CAAc,8CAAd,CAAN;AACD;;AAED,OAAK,IAAIC,IAAT,IAAiBJ,UAAjB,EAA6B;AAC3B,QAAI,OAAOI,IAAP,KAAgB,QAAhB,IAA4B,OAAOJ,UAAU,CAACI,IAAD,CAAjB,KAA4B,QAA5D,EAAsE;AACpE,YAAM,IAAID,SAAJ,CAAc,8DAAd,CAAN;AACD;AACF;;AAED,SAAOL,YAAY,CAACO,OAAb,CAAqBC,sBAArB,GAA8CT,KAA9C,CAAoDE,IAApD,EAA0DC,UAA1D,CAAP;AACD;;AAED,IAAIO,iBAAiB,GAAG;AACtBV,EAAAA,KAAK,EAAE,UAAUE,IAAV,EAAgBC,UAAhB,EAA4B;AACjC,QAAIQ,IAAI,GAAG,UAAUC,MAAV,CAAiBV,IAAjB,CAAX;;AAEA,QAAIW,cAAc,GAAGZ,YAAY,CAACO,OAAb,CAAqBM,iBAArB,EAArB;;AAEA,WAAOD,cAAc,CAACE,OAAf,CAAuB,MAAvB,EAA+BJ,IAA/B,EAAqC;AAC1CR,MAAAA,UAAU,EAAEA;AAD8B,KAArC,CAAP;AAGD;AATqB,CAAxB;;AAYAF,YAAY,CAACO,OAAb,CAAqBQ,sBAArB,CAA4CN,iBAA5C","sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.track = track;\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Parse.Analytics provides an interface to Parse's logging and analytics\n * backend.\n *\n * @class Parse.Analytics\n * @static\n * @hideconstructor\n */\n\n/**\n * Tracks the occurrence of a custom event with additional dimensions.\n * Parse will store a data point at the time of invocation with the given\n * event name.\n *\n * Dimensions will allow segmentation of the occurrences of this custom\n * event. Keys and values should be {@code String}s, and will throw\n * otherwise.\n *\n * To track a user signup along with additional metadata, consider the\n * following:\n * <pre>\n * var dimensions = {\n *  gender: 'm',\n *  source: 'web',\n *  dayType: 'weekend'\n * };\n * Parse.Analytics.track('signup', dimensions);\n * </pre>\n *\n * There is a default limit of 8 dimensions per event tracked.\n *\n * @function track\n * @name Parse.Analytics.track\n * @param {string} name The name of the custom event to report to Parse as\n * having happened.\n * @param {object} dimensions The dictionary of information by which to\n * segment this event.\n * @returns {Promise} A promise that is resolved when the round-trip\n * to the server completes.\n */\n\n\nfunction track(name\n/*: string*/\n, dimensions\n/*: { [key: string]: string }*/\n)\n/*: Promise*/\n{\n  name = name || '';\n  name = name.replace(/^\\s*/, '');\n  name = name.replace(/\\s*$/, '');\n\n  if (name.length === 0) {\n    throw new TypeError('A name for the custom event must be provided');\n  }\n\n  for (var _key in dimensions) {\n    if (typeof _key !== 'string' || typeof dimensions[_key] !== 'string') {\n      throw new TypeError('track() dimensions expects keys and values of type \"string\".');\n    }\n  }\n\n  return _CoreManager.default.getAnalyticsController().track(name, dimensions);\n}\n\nvar DefaultController = {\n  track: function (name, dimensions) {\n    var path = \"events/\".concat(name);\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    return RESTController.request('POST', path, {\n      dimensions: dimensions\n    });\n  }\n};\n\n_CoreManager.default.setAnalyticsController(DefaultController);"]},"metadata":{},"sourceType":"script"}