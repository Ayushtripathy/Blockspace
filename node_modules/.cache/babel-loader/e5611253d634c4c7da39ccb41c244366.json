{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _ParseOp = require(\"./ParseOp\");\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Creates a new Relation for the given parent object and key. This\n * constructor should rarely be used directly, but rather created by\n * Parse.Object.relation.\n *\n * <p>\n * A class that is used to access all of the children of a many-to-many\n * relationship.  Each instance of Parse.Relation is associated with a\n * particular parent object and key.\n * </p>\n *\n * @alias Parse.Relation\n */\n\n\nvar ParseRelation = /*#__PURE__*/function () {\n  /**\n   * @param {Parse.Object} parent The parent of this relation.\n   * @param {string} key The key for this relation on the parent.\n   */\n  function ParseRelation(parent\n  /*: ?ParseObject*/\n  , key\n  /*: ?string*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseRelation);\n    (0, _defineProperty2.default)(this, \"parent\", void 0);\n    (0, _defineProperty2.default)(this, \"key\", void 0);\n    (0, _defineProperty2.default)(this, \"targetClassName\", void 0);\n    this.parent = parent;\n    this.key = key;\n    this.targetClassName = null;\n  }\n  /*\n   * Makes sure that this relation has the right parent and key.\n   */\n\n\n  (0, _createClass2.default)(ParseRelation, [{\n    key: \"_ensureParentAndKey\",\n    value: function (parent\n    /*: ParseObject*/\n    , key\n    /*: string*/\n    ) {\n      this.key = this.key || key;\n\n      if (this.key !== key) {\n        throw new Error('Internal Error. Relation retrieved from two different keys.');\n      }\n\n      if (this.parent) {\n        if (this.parent.className !== parent.className) {\n          throw new Error('Internal Error. Relation retrieved from two different Objects.');\n        }\n\n        if (this.parent.id) {\n          if (this.parent.id !== parent.id) {\n            throw new Error('Internal Error. Relation retrieved from two different Objects.');\n          }\n        } else if (parent.id) {\n          this.parent = parent;\n        }\n      } else {\n        this.parent = parent;\n      }\n    }\n    /**\n     * Adds a Parse.Object or an array of Parse.Objects to the relation.\n     *\n     * @param {(Parse.Object|Array)} objects The item or items to add.\n     * @returns {Parse.Object} The parent of the relation.\n     */\n\n  }, {\n    key: \"add\",\n    value: function (objects\n    /*: ParseObject | Array<ParseObject | string>*/\n    )\n    /*: ParseObject*/\n    {\n      if (!(0, _isArray.default)(objects)) {\n        objects = [objects];\n      }\n\n      var change = new _ParseOp.RelationOp(objects, []);\n      var parent = this.parent;\n\n      if (!parent) {\n        throw new Error('Cannot add to a Relation without a parent');\n      }\n\n      if (objects.length === 0) {\n        return parent;\n      }\n\n      parent.set(this.key, change);\n      this.targetClassName = change._targetClassName;\n      return parent;\n    }\n    /**\n     * Removes a Parse.Object or an array of Parse.Objects from this relation.\n     *\n     * @param {(Parse.Object|Array)} objects The item or items to remove.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function (objects\n    /*: ParseObject | Array<ParseObject | string>*/\n    ) {\n      if (!(0, _isArray.default)(objects)) {\n        objects = [objects];\n      }\n\n      var change = new _ParseOp.RelationOp([], objects);\n\n      if (!this.parent) {\n        throw new Error('Cannot remove from a Relation without a parent');\n      }\n\n      if (objects.length === 0) {\n        return;\n      }\n\n      this.parent.set(this.key, change);\n      this.targetClassName = change._targetClassName;\n    }\n    /**\n     * Returns a JSON version of the object suitable for saving to disk.\n     *\n     * @returns {object} JSON representation of Relation\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: { __type: 'Relation', className: ?string }*/\n    {\n      return {\n        __type: 'Relation',\n        className: this.targetClassName\n      };\n    }\n    /**\n     * Returns a Parse.Query that is limited to objects in this\n     * relation.\n     *\n     * @returns {Parse.Query} Relation Query\n     */\n\n  }, {\n    key: \"query\",\n    value: function query()\n    /*: ParseQuery*/\n    {\n      var query;\n      var parent = this.parent;\n\n      if (!parent) {\n        throw new Error('Cannot construct a query for a Relation without a parent');\n      }\n\n      if (!this.targetClassName) {\n        query = new _ParseQuery.default(parent.className);\n        query._extraOptions.redirectClassNameForKey = this.key;\n      } else {\n        query = new _ParseQuery.default(this.targetClassName);\n      }\n\n      query._addCondition('$relatedTo', 'object', {\n        __type: 'Pointer',\n        className: parent.className,\n        objectId: parent.id\n      });\n\n      query._addCondition('$relatedTo', 'key', this.key);\n\n      return query;\n    }\n  }]);\n  return ParseRelation;\n}();\n\nvar _default = ParseRelation;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/Twitter-Start/node_modules/moralis/lib/browser/ParseRelation.js"],"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","default","_isArray","_classCallCheck2","_createClass2","_defineProperty2","_ParseOp","_ParseObject","_ParseQuery","ParseRelation","parent","key","targetClassName","Error","className","id","objects","change","RelationOp","length","set","_targetClassName","__type","query","_extraOptions","redirectClassNameForKey","_addCondition","objectId","_default"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8DAAD,CAApC;;AAEA,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,sDAAD,CAApC;;AAEAD,sBAAsB,CAACG,OAAD,EAAU,YAAV,EAAwB;AAC5CC,EAAAA,KAAK,EAAE;AADqC,CAAxB,CAAtB;;AAIAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,QAAQ,GAAGJ,sBAAsB,CAACD,OAAO,CAAC,sDAAD,CAAR,CAArC;;AAEA,IAAIM,gBAAgB,GAAGL,sBAAsB,CAACD,OAAO,CAAC,+CAAD,CAAR,CAA7C;;AAEA,IAAIO,aAAa,GAAGN,sBAAsB,CAACD,OAAO,CAAC,4CAAD,CAAR,CAA1C;;AAEA,IAAIQ,gBAAgB,GAAGP,sBAAsB,CAACD,OAAO,CAAC,+CAAD,CAAR,CAA7C;;AAEA,IAAIS,QAAQ,GAAGT,OAAO,CAAC,WAAD,CAAtB;;AAEA,IAAIU,YAAY,GAAGT,sBAAsB,CAACD,OAAO,CAAC,eAAD,CAAR,CAAzC;;AAEA,IAAIW,WAAW,GAAGV,sBAAsB,CAACD,OAAO,CAAC,cAAD,CAAR,CAAxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIY,aAAa,GAAG,aAAa,YAAY;AAC3C;AACF;AACA;AACA;AACE,WAASA,aAAT,CAAuBC;AACvB;AADA,IAEEC;AACF;AAHA,IAIE;AACA,KAAC,GAAGR,gBAAgB,CAACF,OAArB,EAA8B,IAA9B,EAAoCQ,aAApC;AACA,KAAC,GAAGJ,gBAAgB,CAACJ,OAArB,EAA8B,IAA9B,EAAoC,QAApC,EAA8C,KAAK,CAAnD;AACA,KAAC,GAAGI,gBAAgB,CAACJ,OAArB,EAA8B,IAA9B,EAAoC,KAApC,EAA2C,KAAK,CAAhD;AACA,KAAC,GAAGI,gBAAgB,CAACJ,OAArB,EAA8B,IAA9B,EAAoC,iBAApC,EAAuD,KAAK,CAA5D;AACA,SAAKS,MAAL,GAAcA,MAAd;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKC,eAAL,GAAuB,IAAvB;AACD;AACD;AACF;AACA;;;AAGE,GAAC,GAAGR,aAAa,CAACH,OAAlB,EAA2BQ,aAA3B,EAA0C,CAAC;AACzCE,IAAAA,GAAG,EAAE,qBADoC;AAEzCX,IAAAA,KAAK,EAAE,UAAUU;AACjB;AADO,MAELC;AACF;AAHO,MAIL;AACA,WAAKA,GAAL,GAAW,KAAKA,GAAL,IAAYA,GAAvB;;AAEA,UAAI,KAAKA,GAAL,KAAaA,GAAjB,EAAsB;AACpB,cAAM,IAAIE,KAAJ,CAAU,6DAAV,CAAN;AACD;;AAED,UAAI,KAAKH,MAAT,EAAiB;AACf,YAAI,KAAKA,MAAL,CAAYI,SAAZ,KAA0BJ,MAAM,CAACI,SAArC,EAAgD;AAC9C,gBAAM,IAAID,KAAJ,CAAU,gEAAV,CAAN;AACD;;AAED,YAAI,KAAKH,MAAL,CAAYK,EAAhB,EAAoB;AAClB,cAAI,KAAKL,MAAL,CAAYK,EAAZ,KAAmBL,MAAM,CAACK,EAA9B,EAAkC;AAChC,kBAAM,IAAIF,KAAJ,CAAU,gEAAV,CAAN;AACD;AACF,SAJD,MAIO,IAAIH,MAAM,CAACK,EAAX,EAAe;AACpB,eAAKL,MAAL,GAAcA,MAAd;AACD;AACF,OAZD,MAYO;AACL,aAAKA,MAAL,GAAcA,MAAd;AACD;AACF;AACD;AACJ;AACA;AACA;AACA;AACA;;AAlC6C,GAAD,EAoCvC;AACDC,IAAAA,GAAG,EAAE,KADJ;AAEDX,IAAAA,KAAK,EAAE,UAAUgB;AACjB;AADO;AAGP;AACA;AACE,UAAI,CAAC,CAAC,GAAGd,QAAQ,CAACD,OAAb,EAAsBe,OAAtB,CAAL,EAAqC;AACnCA,QAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;AACD;;AAED,UAAIC,MAAM,GAAG,IAAIX,QAAQ,CAACY,UAAb,CAAwBF,OAAxB,EAAiC,EAAjC,CAAb;AACA,UAAIN,MAAM,GAAG,KAAKA,MAAlB;;AAEA,UAAI,CAACA,MAAL,EAAa;AACX,cAAM,IAAIG,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAED,UAAIG,OAAO,CAACG,MAAR,KAAmB,CAAvB,EAA0B;AACxB,eAAOT,MAAP;AACD;;AAEDA,MAAAA,MAAM,CAACU,GAAP,CAAW,KAAKT,GAAhB,EAAqBM,MAArB;AACA,WAAKL,eAAL,GAAuBK,MAAM,CAACI,gBAA9B;AACA,aAAOX,MAAP;AACD;AACD;AACJ;AACA;AACA;AACA;;AA9BK,GApCuC,EAoEvC;AACDC,IAAAA,GAAG,EAAE,QADJ;AAEDX,IAAAA,KAAK,EAAE,UAAUgB;AACjB;AADO,MAEL;AACA,UAAI,CAAC,CAAC,GAAGd,QAAQ,CAACD,OAAb,EAAsBe,OAAtB,CAAL,EAAqC;AACnCA,QAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;AACD;;AAED,UAAIC,MAAM,GAAG,IAAIX,QAAQ,CAACY,UAAb,CAAwB,EAAxB,EAA4BF,OAA5B,CAAb;;AAEA,UAAI,CAAC,KAAKN,MAAV,EAAkB;AAChB,cAAM,IAAIG,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,UAAIG,OAAO,CAACG,MAAR,KAAmB,CAAvB,EAA0B;AACxB;AACD;;AAED,WAAKT,MAAL,CAAYU,GAAZ,CAAgB,KAAKT,GAArB,EAA0BM,MAA1B;AACA,WAAKL,eAAL,GAAuBK,MAAM,CAACI,gBAA9B;AACD;AACD;AACJ;AACA;AACA;AACA;;AA1BK,GApEuC,EAgGvC;AACDV,IAAAA,GAAG,EAAE,QADJ;AAEDX,IAAAA,KAAK,EAAE;AACP;AACA;AACE,aAAO;AACLsB,QAAAA,MAAM,EAAE,UADH;AAELR,QAAAA,SAAS,EAAE,KAAKF;AAFX,OAAP;AAID;AACD;AACJ;AACA;AACA;AACA;AACA;;AAfK,GAhGuC,EAiHvC;AACDD,IAAAA,GAAG,EAAE,OADJ;AAEDX,IAAAA,KAAK,EAAE,SAASuB,KAAT;AACP;AACA;AACE,UAAIA,KAAJ;AACA,UAAIb,MAAM,GAAG,KAAKA,MAAlB;;AAEA,UAAI,CAACA,MAAL,EAAa;AACX,cAAM,IAAIG,KAAJ,CAAU,0DAAV,CAAN;AACD;;AAED,UAAI,CAAC,KAAKD,eAAV,EAA2B;AACzBW,QAAAA,KAAK,GAAG,IAAIf,WAAW,CAACP,OAAhB,CAAwBS,MAAM,CAACI,SAA/B,CAAR;AACAS,QAAAA,KAAK,CAACC,aAAN,CAAoBC,uBAApB,GAA8C,KAAKd,GAAnD;AACD,OAHD,MAGO;AACLY,QAAAA,KAAK,GAAG,IAAIf,WAAW,CAACP,OAAhB,CAAwB,KAAKW,eAA7B,CAAR;AACD;;AAEDW,MAAAA,KAAK,CAACG,aAAN,CAAoB,YAApB,EAAkC,QAAlC,EAA4C;AAC1CJ,QAAAA,MAAM,EAAE,SADkC;AAE1CR,QAAAA,SAAS,EAAEJ,MAAM,CAACI,SAFwB;AAG1Ca,QAAAA,QAAQ,EAAEjB,MAAM,CAACK;AAHyB,OAA5C;;AAMAQ,MAAAA,KAAK,CAACG,aAAN,CAAoB,YAApB,EAAkC,KAAlC,EAAyC,KAAKf,GAA9C;;AAEA,aAAOY,KAAP;AACD;AA5BA,GAjHuC,CAA1C;AA+IA,SAAOd,aAAP;AACD,CAvKgC,EAAjC;;AAyKA,IAAImB,QAAQ,GAAGnB,aAAf;AACAV,OAAO,CAACE,OAAR,GAAkB2B,QAAlB","sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _ParseOp = require(\"./ParseOp\");\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Creates a new Relation for the given parent object and key. This\n * constructor should rarely be used directly, but rather created by\n * Parse.Object.relation.\n *\n * <p>\n * A class that is used to access all of the children of a many-to-many\n * relationship.  Each instance of Parse.Relation is associated with a\n * particular parent object and key.\n * </p>\n *\n * @alias Parse.Relation\n */\n\n\nvar ParseRelation = /*#__PURE__*/function () {\n  /**\n   * @param {Parse.Object} parent The parent of this relation.\n   * @param {string} key The key for this relation on the parent.\n   */\n  function ParseRelation(parent\n  /*: ?ParseObject*/\n  , key\n  /*: ?string*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseRelation);\n    (0, _defineProperty2.default)(this, \"parent\", void 0);\n    (0, _defineProperty2.default)(this, \"key\", void 0);\n    (0, _defineProperty2.default)(this, \"targetClassName\", void 0);\n    this.parent = parent;\n    this.key = key;\n    this.targetClassName = null;\n  }\n  /*\n   * Makes sure that this relation has the right parent and key.\n   */\n\n\n  (0, _createClass2.default)(ParseRelation, [{\n    key: \"_ensureParentAndKey\",\n    value: function (parent\n    /*: ParseObject*/\n    , key\n    /*: string*/\n    ) {\n      this.key = this.key || key;\n\n      if (this.key !== key) {\n        throw new Error('Internal Error. Relation retrieved from two different keys.');\n      }\n\n      if (this.parent) {\n        if (this.parent.className !== parent.className) {\n          throw new Error('Internal Error. Relation retrieved from two different Objects.');\n        }\n\n        if (this.parent.id) {\n          if (this.parent.id !== parent.id) {\n            throw new Error('Internal Error. Relation retrieved from two different Objects.');\n          }\n        } else if (parent.id) {\n          this.parent = parent;\n        }\n      } else {\n        this.parent = parent;\n      }\n    }\n    /**\n     * Adds a Parse.Object or an array of Parse.Objects to the relation.\n     *\n     * @param {(Parse.Object|Array)} objects The item or items to add.\n     * @returns {Parse.Object} The parent of the relation.\n     */\n\n  }, {\n    key: \"add\",\n    value: function (objects\n    /*: ParseObject | Array<ParseObject | string>*/\n    )\n    /*: ParseObject*/\n    {\n      if (!(0, _isArray.default)(objects)) {\n        objects = [objects];\n      }\n\n      var change = new _ParseOp.RelationOp(objects, []);\n      var parent = this.parent;\n\n      if (!parent) {\n        throw new Error('Cannot add to a Relation without a parent');\n      }\n\n      if (objects.length === 0) {\n        return parent;\n      }\n\n      parent.set(this.key, change);\n      this.targetClassName = change._targetClassName;\n      return parent;\n    }\n    /**\n     * Removes a Parse.Object or an array of Parse.Objects from this relation.\n     *\n     * @param {(Parse.Object|Array)} objects The item or items to remove.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function (objects\n    /*: ParseObject | Array<ParseObject | string>*/\n    ) {\n      if (!(0, _isArray.default)(objects)) {\n        objects = [objects];\n      }\n\n      var change = new _ParseOp.RelationOp([], objects);\n\n      if (!this.parent) {\n        throw new Error('Cannot remove from a Relation without a parent');\n      }\n\n      if (objects.length === 0) {\n        return;\n      }\n\n      this.parent.set(this.key, change);\n      this.targetClassName = change._targetClassName;\n    }\n    /**\n     * Returns a JSON version of the object suitable for saving to disk.\n     *\n     * @returns {object} JSON representation of Relation\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function ()\n    /*: { __type: 'Relation', className: ?string }*/\n    {\n      return {\n        __type: 'Relation',\n        className: this.targetClassName\n      };\n    }\n    /**\n     * Returns a Parse.Query that is limited to objects in this\n     * relation.\n     *\n     * @returns {Parse.Query} Relation Query\n     */\n\n  }, {\n    key: \"query\",\n    value: function query()\n    /*: ParseQuery*/\n    {\n      var query;\n      var parent = this.parent;\n\n      if (!parent) {\n        throw new Error('Cannot construct a query for a Relation without a parent');\n      }\n\n      if (!this.targetClassName) {\n        query = new _ParseQuery.default(parent.className);\n        query._extraOptions.redirectClassNameForKey = this.key;\n      } else {\n        query = new _ParseQuery.default(this.targetClassName);\n      }\n\n      query._addCondition('$relatedTo', 'object', {\n        __type: 'Pointer',\n        className: parent.className,\n        objectId: parent.id\n      });\n\n      query._addCondition('$relatedTo', 'key', this.key);\n\n      return query;\n    }\n  }]);\n  return ParseRelation;\n}();\n\nvar _default = ParseRelation;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}