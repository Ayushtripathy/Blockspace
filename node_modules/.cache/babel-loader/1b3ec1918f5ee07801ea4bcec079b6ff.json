{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MergedStore = void 0;\n\nconst ObservableStore_1 = require(\"./ObservableStore\");\n\nclass MergedStore extends ObservableStore_1.ObservableStore {\n  constructor() {\n    let children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    // Typecast: Preserve existing behavior\n    super({});\n    this._children = children; // subscribe to children\n\n    children.forEach(child => this._addChild(child));\n\n    this._updateWholeState();\n  }\n\n  _addChild(child) {\n    child.subscribe(() => this._updateWholeState());\n  }\n\n  _updateWholeState() {\n    const childStates = this._children.map(child => child.getState()); // apply shallow merge over states\n\n\n    const state = Object.assign({}, ...childStates);\n    this.putState(state);\n  }\n\n}\n\nexports.MergedStore = MergedStore;","map":{"version":3,"sources":["../src/MergedStore.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,MAAa,WAAb,SAEU,iBAAA,CAAA,eAFV,CAE4B;AAG1B,EAAA,WAAA,GAAyB;AAAA,QAAb,QAAa,uEAAF,EAAE;AACvB;AACA,UAAM,EAAN;AAEA,SAAK,SAAL,GAAiB,QAAjB,CAJuB,CAKvB;;AACA,IAAA,QAAQ,CAAC,OAAT,CAAkB,KAAD,IAAW,KAAK,SAAL,CAAe,KAAf,CAA5B;;AACA,SAAK,iBAAL;AACD;;AAED,EAAA,SAAS,CAAC,KAAD,EAAmC;AAC1C,IAAA,KAAK,CAAC,SAAN,CAAgB,MAAM,KAAK,iBAAL,EAAtB;AACD;;AAED,EAAA,iBAAiB,GAAA;AACf,UAAM,WAAW,GAAG,KAAK,SAAL,CAAe,GAAf,CAAoB,KAAD,IAAW,KAAK,CAAC,QAAN,EAA9B,CAApB,CADe,CAEf;;;AACA,UAAM,KAAK,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,GAAG,WAArB,CAAd;AACA,SAAK,QAAL,CAAc,KAAd;AACD;;AAtByB;;AAF5B,OAAA,CAAA,WAAA,GAAA,WAAA","sourcesContent":["import { ObservableStore } from './ObservableStore';\n\nexport class MergedStore<\n  T extends Record<string, unknown>,\n> extends ObservableStore<T> {\n  private _children: ObservableStore<Partial<T>>[];\n\n  constructor(children = []) {\n    // Typecast: Preserve existing behavior\n    super({} as unknown as T);\n\n    this._children = children;\n    // subscribe to children\n    children.forEach((child) => this._addChild(child));\n    this._updateWholeState();\n  }\n\n  _addChild(child: ObservableStore<Partial<T>>): void {\n    child.subscribe(() => this._updateWholeState());\n  }\n\n  _updateWholeState(): void {\n    const childStates = this._children.map((child) => child.getState());\n    // apply shallow merge over states\n    const state = Object.assign({}, ...childStates);\n    this.putState(state);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}