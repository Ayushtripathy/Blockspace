{"ast":null,"code":"var global = require('../internals/global');\n\nvar aCallable = require('../internals/a-callable');\n\nvar toObject = require('../internals/to-object');\n\nvar IndexedObject = require('../internals/indexed-object');\n\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\nvar TypeError = global.TypeError; // `Array.prototype.{ reduce, reduceRight }` methods implementation\n\nvar createMethod = function (IS_RIGHT) {\n  return function (that, callbackfn, argumentsLength, memo) {\n    aCallable(callbackfn);\n    var O = toObject(that);\n    var self = IndexedObject(O);\n    var length = lengthOfArrayLike(O);\n    var index = IS_RIGHT ? length - 1 : 0;\n    var i = IS_RIGHT ? -1 : 1;\n    if (argumentsLength < 2) while (true) {\n      if (index in self) {\n        memo = self[index];\n        index += i;\n        break;\n      }\n\n      index += i;\n\n      if (IS_RIGHT ? index < 0 : length <= index) {\n        throw TypeError('Reduce of empty array with no initial value');\n      }\n    }\n\n    for (; IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {\n      memo = callbackfn(memo, self[index], index, O);\n    }\n\n    return memo;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.reduce` method\n  // https://tc39.es/ecma262/#sec-array.prototype.reduce\n  left: createMethod(false),\n  // `Array.prototype.reduceRight` method\n  // https://tc39.es/ecma262/#sec-array.prototype.reduceright\n  right: createMethod(true)\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/Twitter-Start/node_modules/core-js-pure/internals/array-reduce.js"],"names":["global","require","aCallable","toObject","IndexedObject","lengthOfArrayLike","TypeError","createMethod","IS_RIGHT","that","callbackfn","argumentsLength","memo","O","self","length","index","i","module","exports","left","right"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,qBAAD,CAApB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,yBAAD,CAAvB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIG,aAAa,GAAGH,OAAO,CAAC,6BAAD,CAA3B;;AACA,IAAII,iBAAiB,GAAGJ,OAAO,CAAC,mCAAD,CAA/B;;AAEA,IAAIK,SAAS,GAAGN,MAAM,CAACM,SAAvB,C,CAEA;;AACA,IAAIC,YAAY,GAAG,UAAUC,QAAV,EAAoB;AACrC,SAAO,UAAUC,IAAV,EAAgBC,UAAhB,EAA4BC,eAA5B,EAA6CC,IAA7C,EAAmD;AACxDV,IAAAA,SAAS,CAACQ,UAAD,CAAT;AACA,QAAIG,CAAC,GAAGV,QAAQ,CAACM,IAAD,CAAhB;AACA,QAAIK,IAAI,GAAGV,aAAa,CAACS,CAAD,CAAxB;AACA,QAAIE,MAAM,GAAGV,iBAAiB,CAACQ,CAAD,CAA9B;AACA,QAAIG,KAAK,GAAGR,QAAQ,GAAGO,MAAM,GAAG,CAAZ,GAAgB,CAApC;AACA,QAAIE,CAAC,GAAGT,QAAQ,GAAG,CAAC,CAAJ,GAAQ,CAAxB;AACA,QAAIG,eAAe,GAAG,CAAtB,EAAyB,OAAO,IAAP,EAAa;AACpC,UAAIK,KAAK,IAAIF,IAAb,EAAmB;AACjBF,QAAAA,IAAI,GAAGE,IAAI,CAACE,KAAD,CAAX;AACAA,QAAAA,KAAK,IAAIC,CAAT;AACA;AACD;;AACDD,MAAAA,KAAK,IAAIC,CAAT;;AACA,UAAIT,QAAQ,GAAGQ,KAAK,GAAG,CAAX,GAAeD,MAAM,IAAIC,KAArC,EAA4C;AAC1C,cAAMV,SAAS,CAAC,6CAAD,CAAf;AACD;AACF;;AACD,WAAME,QAAQ,GAAGQ,KAAK,IAAI,CAAZ,GAAgBD,MAAM,GAAGC,KAAvC,EAA8CA,KAAK,IAAIC,CAAvD,EAA0D,IAAID,KAAK,IAAIF,IAAb,EAAmB;AAC3EF,MAAAA,IAAI,GAAGF,UAAU,CAACE,IAAD,EAAOE,IAAI,CAACE,KAAD,CAAX,EAAoBA,KAApB,EAA2BH,CAA3B,CAAjB;AACD;;AACD,WAAOD,IAAP;AACD,GAtBD;AAuBD,CAxBD;;AA0BAM,MAAM,CAACC,OAAP,GAAiB;AACf;AACA;AACAC,EAAAA,IAAI,EAAEb,YAAY,CAAC,KAAD,CAHH;AAIf;AACA;AACAc,EAAAA,KAAK,EAAEd,YAAY,CAAC,IAAD;AANJ,CAAjB","sourcesContent":["var global = require('../internals/global');\nvar aCallable = require('../internals/a-callable');\nvar toObject = require('../internals/to-object');\nvar IndexedObject = require('../internals/indexed-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\nvar TypeError = global.TypeError;\n\n// `Array.prototype.{ reduce, reduceRight }` methods implementation\nvar createMethod = function (IS_RIGHT) {\n  return function (that, callbackfn, argumentsLength, memo) {\n    aCallable(callbackfn);\n    var O = toObject(that);\n    var self = IndexedObject(O);\n    var length = lengthOfArrayLike(O);\n    var index = IS_RIGHT ? length - 1 : 0;\n    var i = IS_RIGHT ? -1 : 1;\n    if (argumentsLength < 2) while (true) {\n      if (index in self) {\n        memo = self[index];\n        index += i;\n        break;\n      }\n      index += i;\n      if (IS_RIGHT ? index < 0 : length <= index) {\n        throw TypeError('Reduce of empty array with no initial value');\n      }\n    }\n    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {\n      memo = callbackfn(memo, self[index], index, O);\n    }\n    return memo;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.reduce` method\n  // https://tc39.es/ecma262/#sec-array.prototype.reduce\n  left: createMethod(false),\n  // `Array.prototype.reduceRight` method\n  // https://tc39.es/ecma262/#sec-array.prototype.reduceright\n  right: createMethod(true)\n};\n"]},"metadata":{},"sourceType":"script"}