{"version":3,"file":"torusUtils.esm.js","sources":["../src/loglevel.js","../src/some.js","../src/utils.js","../src/torus.js"],"sourcesContent":["import loglevel from 'loglevel'\n\nconst log = loglevel.getLogger('torus.js')\nlog.disableAll()\n\nexport default log\n","function capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n}\n\nexport class SomeError extends Error {\n  constructor({ errors, responses, predicate }) {\n    super('Unable to resolve enough promises.')\n    this.errors = errors\n    this.responses = responses\n    this.predicate = predicate\n  }\n}\n\nexport const Some = (promises, predicate) =>\n  new Promise((resolve, reject) => {\n    let finishedCount = 0\n    const sharedState = { resolved: false }\n    const errorArr = new Array(promises.length).fill(undefined)\n    const resultArr = new Array(promises.length).fill(undefined)\n    let predicateError\n    promises.forEach((x, index) => {\n      x.then((resp) => {\n        resultArr[index] = resp\n        return undefined\n      })\n        .catch((error) => {\n          errorArr[index] = error\n        })\n        .finally(() => {\n          if (sharedState.resolved) return\n          predicate(resultArr.slice(0), sharedState)\n            .then((data) => {\n              sharedState.resolved = true\n              resolve(data)\n              return undefined\n            })\n            .catch((error) => {\n              // log only the last predicate error\n              predicateError = error\n            })\n            .finally((_) => {\n              finishedCount += 1\n              if (finishedCount === promises.length) {\n                const errors = Object.values(\n                  resultArr.reduce((acc, z) => {\n                    const { id, error } = z || {}\n                    if (error?.data?.length > 0) {\n                      if (error.data.startsWith('Error occurred while verifying params')) acc[id] = capitalizeFirstLetter(error.data)\n                      else acc[id] = error.data\n                    }\n                    return acc\n                  }, {})\n                )\n\n                if (errors.length > 0) {\n                  // Format-able errors\n                  const msg = errors.length > 1 ? `\\n${errors.map((it) => `â€¢ ${it}`).join('\\n')}` : errors[0]\n                  reject(new Error(msg))\n                } else {\n                  reject(\n                    new SomeError({\n                      errors: errorArr,\n                      responses: resultArr,\n                      predicate: predicateError?.message || predicateError,\n                    })\n                  )\n                }\n              }\n            })\n        })\n    })\n  })\n","import { generateJsonRPCObject, post } from '@toruslabs/http-helpers'\nimport JsonStringify from 'json-stable-stringify'\n\nimport log from './loglevel'\nimport { Some } from './some'\n\nexport class GetOrSetNonceError extends Error {}\n\nexport const kCombinations = (s, k) => {\n  let set = s\n  if (typeof set === 'number') {\n    set = Array.from({ length: set }, (_, i) => i)\n  }\n  if (k > set.length || k <= 0) {\n    return []\n  }\n\n  if (k === set.length) {\n    return [set]\n  }\n\n  if (k === 1) {\n    return set.reduce((acc, cur) => [...acc, [cur]], [])\n  }\n\n  const combs = []\n  let tailCombs = []\n\n  for (let i = 0; i <= set.length - k + 1; i += 1) {\n    tailCombs = kCombinations(set.slice(i + 1), k - 1)\n    for (let j = 0; j < tailCombs.length; j += 1) {\n      combs.push([set[i], ...tailCombs[j]])\n    }\n  }\n\n  return combs\n}\n\nexport const thresholdSame = (arr, t) => {\n  const hashMap = {}\n  for (let i = 0; i < arr.length; i += 1) {\n    const str = JsonStringify(arr[i])\n    hashMap[str] = hashMap[str] ? hashMap[str] + 1 : 1\n    if (hashMap[str] === t) {\n      return arr[i]\n    }\n  }\n  return undefined\n}\n\nexport const keyLookup = async (endpoints, verifier, verifierId) => {\n  const lookupPromises = endpoints.map((x) =>\n    post(\n      x,\n      generateJsonRPCObject('VerifierLookupRequest', {\n        verifier,\n        verifier_id: verifierId.toString(),\n      })\n    ).catch((err) => log.error('lookup request failed', err))\n  )\n  return Some(lookupPromises, (lookupResults) => {\n    const lookupShares = lookupResults.filter((x1) => x1)\n    const errorResult = thresholdSame(\n      lookupShares.map((x2) => x2 && x2.error),\n      ~~(endpoints.length / 2) + 1\n    )\n    const keyResult = thresholdSame(\n      lookupShares.map((x3) => x3 && x3.result),\n      ~~(endpoints.length / 2) + 1\n    )\n    if (keyResult || errorResult) {\n      return Promise.resolve({ keyResult, errorResult })\n    }\n    return Promise.reject(new Error(`invalid results ${JSON.stringify(lookupResults)}`))\n  })\n}\n\nexport const waitKeyLookup = (endpoints, verifier, verifierId, timeout) =>\n  new Promise((resolve, reject) => {\n    setTimeout(() => {\n      keyLookup(endpoints, verifier, verifierId).then(resolve).catch(reject)\n    }, timeout)\n  })\n\nexport const keyAssign = async ({ endpoints, torusNodePubs, lastPoint, firstPoint, verifier, verifierId, signerHost, network }) => {\n  let nodeNum\n  let initialPoint\n  if (lastPoint === undefined) {\n    nodeNum = Math.floor(Math.random() * endpoints.length)\n    initialPoint = nodeNum\n  } else {\n    nodeNum = lastPoint % endpoints.length\n  }\n  if (nodeNum === firstPoint) throw new Error('Looped through all')\n  if (firstPoint !== undefined) initialPoint = firstPoint\n\n  const data = generateJsonRPCObject('KeyAssign', {\n    verifier,\n    verifier_id: verifierId.toString(),\n  })\n  try {\n    const signedData = await post(\n      signerHost,\n      data,\n      {\n        headers: {\n          pubKeyX: torusNodePubs[nodeNum].X,\n          pubKeyY: torusNodePubs[nodeNum].Y,\n          network,\n        },\n      },\n      { useAPIKey: true }\n    )\n    return post(\n      endpoints[nodeNum],\n      { ...data, ...signedData },\n      {\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8',\n        },\n      }\n    )\n  } catch (error) {\n    log.error(error)\n    const acceptedErrorMsgs = [\n      // Slow node\n      'Timed out',\n      // Happens when the node is not reachable (dns issue etc)\n      'TypeError: Failed to fetch', // All except iOS and Firefox\n      'TypeError: cancelled', // iOS\n      'TypeError: NetworkError when attempting to fetch resource.', // Firefox\n    ]\n    if (acceptedErrorMsgs.includes(error.message))\n      return keyAssign({ endpoints, torusNodePubs, lastPoint: nodeNum + 1, firstPoint: initialPoint, verifier, verifierId, signerHost, network })\n    throw new Error(\n      `Sorry, the Torus Network that powers Web3Auth is currently very busy.\n    We will generate your key in time. Pls try again later. \\n\n    ${error.message || ''}`\n    )\n  }\n}\n","import { decrypt, generatePrivate, getPublic } from '@toruslabs/eccrypto'\nimport { generateJsonRPCObject, get, post, setAPIKey, setEmbedHost } from '@toruslabs/http-helpers'\nimport BN from 'bn.js'\nimport { ec as EC } from 'elliptic'\nimport stringify from 'json-stable-stringify'\nimport { keccak256, toChecksumAddress } from 'web3-utils'\n\nimport log from './loglevel'\nimport { Some } from './some'\nimport { GetOrSetNonceError, kCombinations, keyAssign, keyLookup, thresholdSame, waitKeyLookup } from './utils'\n\n// Implement threshold logic wrappers around public APIs\n// of Torus nodes to handle malicious node responses\nclass Torus {\n  constructor({\n    enableOneKey = false,\n    metadataHost = 'https://metadata.tor.us',\n    allowHost = 'https://signer.tor.us/api/allow',\n    signerHost = 'https://signer.tor.us/api/sign',\n    serverTimeOffset = 0,\n    network = 'mainnet',\n  } = {}) {\n    this.ec = new EC('secp256k1')\n    this.metadataHost = metadataHost\n    this.allowHost = allowHost\n    this.enableOneKey = enableOneKey\n    this.serverTimeOffset = serverTimeOffset || 0 // ms\n    this.signerHost = signerHost\n    this.network = network\n  }\n\n  static enableLogging(v = true) {\n    if (v) log.enableAll()\n    else log.disableAll()\n  }\n\n  static setAPIKey(apiKey) {\n    setAPIKey(apiKey)\n  }\n\n  static setEmbedHost(embedHost) {\n    setEmbedHost(embedHost)\n  }\n\n  /**\n   * Note: use this function only for openlogin tkey account lookups.\n   */\n  async getUserTypeAndAddress(endpoints, torusNodePubs, { verifier, verifierId }, doesKeyAssign = false) {\n    const { keyResult, errorResult } = (await keyLookup(endpoints, verifier, verifierId)) || {}\n    let isNewKey = false\n    let finalKeyResult\n    if (errorResult && JSON.stringify(errorResult).includes('Verifier + VerifierID has not yet been assigned')) {\n      if (!doesKeyAssign) {\n        throw new Error('Verifier + VerifierID has not yet been assigned')\n      }\n      await keyAssign({\n        endpoints,\n        torusNodePubs,\n        lastPoint: undefined,\n        firstPoint: undefined,\n        verifier,\n        verifierId,\n        signerHost: this.signerHost,\n        network: this.network,\n      })\n      const assignResult = (await waitKeyLookup(endpoints, verifier, verifierId, 1000)) || {}\n      finalKeyResult = assignResult.keyResult\n      isNewKey = true\n    } else if (keyResult) {\n      finalKeyResult = keyResult\n    } else {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`)\n    }\n    if (finalKeyResult) {\n      const { pub_key_X: X, pub_key_Y: Y } = finalKeyResult.keys[0]\n      let typeOfUser\n      let nonce\n      let pubNonce\n      let modifiedPubKey\n      let upgraded\n\n      try {\n        ;({ typeOfUser, nonce, pubNonce, upgraded } = await this.getOrSetNonce(X, Y, undefined, !isNewKey))\n        nonce = new BN(nonce || '0', 16)\n      } catch {\n        throw new GetOrSetNonceError()\n      }\n      if (typeOfUser === 'v1') {\n        modifiedPubKey = this.ec\n          .keyFromPublic({ x: X.toString(16), y: Y.toString(16) })\n          .getPublic()\n          .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic())\n      } else if (typeOfUser === 'v2') {\n        modifiedPubKey = this.ec\n          .keyFromPublic({ x: X.toString(16), y: Y.toString(16) })\n          .getPublic()\n          .add(this.ec.keyFromPublic({ x: pubNonce.x, y: pubNonce.y }).getPublic())\n      } else {\n        throw new Error('getOrSetNonce should always return typeOfUser.')\n      }\n      const finalX = modifiedPubKey.getX().toString(16)\n      const finalY = modifiedPubKey.getY().toString(16)\n      const address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY())\n      return { typeOfUser, nonce, pubNonce, upgraded, X: finalX, Y: finalY, address }\n    }\n    throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`)\n  }\n\n  async setCustomKey({ privKeyHex, metadataNonce, torusKeyHex, customKeyHex }) {\n    let torusKey\n    if (torusKeyHex) {\n      torusKey = new BN(torusKeyHex, 16)\n    } else {\n      const privKey = new BN(privKeyHex, 16)\n      torusKey = privKey.sub(metadataNonce).umod(this.ec.curve.n)\n    }\n    const customKey = new BN(customKeyHex, 16)\n    const newMetadataNonce = customKey.sub(torusKey).umod(this.ec.curve.n)\n    const data = this.generateMetadataParams(newMetadataNonce.toString(16), torusKey.toString(16))\n    await this.setMetadata(data)\n  }\n\n  async retrieveShares(endpoints, indexes, verifier, verifierParams, idToken, extraParams = {}) {\n    const promiseArr = []\n    await get(\n      this.allowHost,\n      {\n        headers: {\n          verifier,\n          verifier_id: verifierParams.verifier_id,\n          network: this.network,\n        },\n      },\n      { useAPIKey: true }\n    )\n    /*\n      CommitmentRequestParams struct {\n        MessagePrefix      string `json:\"messageprefix\"`\n        TokenCommitment    string `json:\"tokencommitment\"`\n        TempPubX           string `json:\"temppubx\"`\n        TempPubY           string `json:\"temppuby\"`\n        VerifierIdentifier string `json:\"verifieridentifier\"`\n      } \n      */\n\n    // generate temporary private and public key that is used to secure receive shares\n    const tmpKey = generatePrivate()\n    const pubKey = getPublic(tmpKey).toString('hex')\n    const pubKeyX = pubKey.slice(2, 66)\n    const pubKeyY = pubKey.slice(66)\n    const tokenCommitment = keccak256(idToken)\n\n    // make commitment requests to endpoints\n    for (let i = 0; i < endpoints.length; i += 1) {\n      const p = post(\n        endpoints[i],\n        generateJsonRPCObject('CommitmentRequest', {\n          messageprefix: 'mug00',\n          tokencommitment: tokenCommitment.slice(2),\n          temppubx: pubKeyX,\n          temppuby: pubKeyY,\n          verifieridentifier: verifier,\n        })\n      ).catch((err) => log.error('commitment', err))\n      promiseArr.push(p)\n    }\n    /*\n      ShareRequestParams struct {\n        Item []bijson.RawMessage `json:\"item\"`\n      }\n      ShareRequestItem struct {\n        IDToken            string          `json:\"idtoken\"`\n        NodeSignatures     []NodeSignature `json:\"nodesignatures\"`\n        VerifierIdentifier string          `json:\"verifieridentifier\"`\n      }\n      NodeSignature struct {\n        Signature   string\n        Data        string\n        NodePubKeyX string\n        NodePubKeyY string\n      }\n      CommitmentRequestResult struct {\n        Signature string `json:\"signature\"`\n        Data      string `json:\"data\"`\n        NodePubX  string `json:\"nodepubx\"`\n        NodePubY  string `json:\"nodepuby\"`\n      }\n      */\n    // send share request once k + t number of commitment requests have completed\n    return Some(promiseArr, (resultArr) => {\n      const completedRequests = resultArr.filter((x) => {\n        if (!x || typeof x !== 'object') {\n          return false\n        }\n        if (x.error) {\n          return false\n        }\n        return true\n      })\n      if (completedRequests.length >= ~~(endpoints.length / 4) * 3 + 1) {\n        return Promise.resolve(resultArr)\n      }\n      return Promise.reject(new Error(`invalid ${JSON.stringify(resultArr)}`))\n    })\n      .then((responses) => {\n        const promiseArrRequest = []\n        const nodeSigs = []\n        for (let i = 0; i < responses.length; i += 1) {\n          if (responses[i]) nodeSigs.push(responses[i].result)\n        }\n        for (let i = 0; i < endpoints.length; i += 1) {\n          // eslint-disable-next-line promise/no-nesting\n          const p = post(\n            endpoints[i],\n            generateJsonRPCObject('ShareRequest', {\n              encrypted: 'yes',\n              item: [{ ...verifierParams, idtoken: idToken, nodesignatures: nodeSigs, verifieridentifier: verifier, ...extraParams }],\n            })\n          ).catch((err) => log.error('share req', err))\n          promiseArrRequest.push(p)\n        }\n        return Some(promiseArrRequest, async (shareResponses, sharedState) => {\n          /*\n              ShareRequestResult struct {\n                Keys []KeyAssignment\n              }\n                      / KeyAssignmentPublic -\n              type KeyAssignmentPublic struct {\n                Index     big.Int\n                PublicKey common.Point\n                Threshold int\n                Verifiers map[string][]string // Verifier => VerifierID\n              }\n\n              // KeyAssignment -\n              type KeyAssignment struct {\n                KeyAssignmentPublic\n                Share big.Int // Or Si\n              }\n            */\n          // check if threshold number of nodes have returned the same user public key\n          const completedRequests = shareResponses.filter((x) => x)\n          const thresholdPublicKey = thresholdSame(\n            shareResponses.map((x) => x && x.result && x.result.keys[0].PublicKey),\n            ~~(endpoints.length / 2) + 1\n          )\n          // optimistically run lagrange interpolation once threshold number of shares have been received\n          // this is matched against the user public key to ensure that shares are consistent\n          if (completedRequests.length >= ~~(endpoints.length / 2) + 1 && thresholdPublicKey) {\n            const sharePromises = []\n            const nodeIndex = []\n            for (let i = 0; i < shareResponses.length; i += 1) {\n              if (shareResponses[i] && shareResponses[i].result && shareResponses[i].result.keys && shareResponses[i].result.keys.length > 0) {\n                shareResponses[i].result.keys.sort((a, b) => new BN(a.Index, 16).cmp(new BN(b.Index, 16)))\n                if (shareResponses[i].result.keys[0].Metadata) {\n                  const metadata = {\n                    ephemPublicKey: Buffer.from(shareResponses[i].result.keys[0].Metadata.ephemPublicKey, 'hex'),\n                    iv: Buffer.from(shareResponses[i].result.keys[0].Metadata.iv, 'hex'),\n                    mac: Buffer.from(shareResponses[i].result.keys[0].Metadata.mac, 'hex'),\n                    mode: Buffer.from(shareResponses[i].result.keys[0].Metadata.mode, 'hex'),\n                  }\n                  sharePromises.push(\n                    // eslint-disable-next-line promise/no-nesting\n                    decrypt(tmpKey, {\n                      ...metadata,\n                      ciphertext: Buffer.from(atob(shareResponses[i].result.keys[0].Share).padStart(64, '0'), 'hex'),\n                    }).catch((err) => log.debug('share decryption', err))\n                  )\n                } else {\n                  sharePromises.push(Promise.resolve(Buffer.from(shareResponses[i].result.keys[0].Share.padStart(64, '0'), 'hex')))\n                }\n              } else {\n                sharePromises.push(Promise.resolve(undefined))\n              }\n              nodeIndex.push(new BN(indexes[i], 16))\n            }\n            const sharesResolved = await Promise.all(sharePromises)\n            if (sharedState.resolved) return undefined\n\n            const decryptedShares = sharesResolved.reduce((acc, curr, index) => {\n              if (curr) acc.push({ index: nodeIndex[index], value: new BN(curr) })\n              return acc\n            }, [])\n            // run lagrange interpolation on all subsets, faster in the optimistic scenario than berlekamp-welch due to early exit\n            const allCombis = kCombinations(decryptedShares.length, ~~(endpoints.length / 2) + 1)\n            let privateKey\n            for (let j = 0; j < allCombis.length; j += 1) {\n              const currentCombi = allCombis[j]\n              const currentCombiShares = decryptedShares.filter((v, index) => currentCombi.includes(index))\n              const shares = currentCombiShares.map((x) => x.value)\n              const indices = currentCombiShares.map((x) => x.index)\n              const derivedPrivateKey = this.lagrangeInterpolation(shares, indices)\n              const decryptedPubKey = getPublic(Buffer.from(derivedPrivateKey.toString(16, 64), 'hex')).toString('hex')\n              const decryptedPubKeyX = decryptedPubKey.slice(2, 66)\n              const decryptedPubKeyY = decryptedPubKey.slice(66)\n              if (\n                new BN(decryptedPubKeyX, 16).cmp(new BN(thresholdPublicKey.X, 16)) === 0 &&\n                new BN(decryptedPubKeyY, 16).cmp(new BN(thresholdPublicKey.Y, 16)) === 0\n              ) {\n                privateKey = derivedPrivateKey\n                break\n              }\n            }\n            if (privateKey === undefined) {\n              throw new Error('could not derive private key')\n            }\n            return privateKey\n          }\n          throw new Error('invalid')\n        })\n      })\n      .then(async (returnedKey) => {\n        let privateKey = returnedKey\n        const decryptedPubKey = getPublic(Buffer.from(privateKey.toString(16, 64), 'hex')).toString('hex')\n        const decryptedPubKeyX = decryptedPubKey.slice(2, 66)\n        const decryptedPubKeyY = decryptedPubKey.slice(66)\n        let metadataNonce\n        if (this.enableOneKey) {\n          const { nonce } = await this.getNonce(decryptedPubKeyX, decryptedPubKeyY, privateKey)\n          metadataNonce = new BN(nonce || '0', 16)\n        } else {\n          metadataNonce = await this.getMetadata({ pub_key_X: decryptedPubKeyX, pub_key_Y: decryptedPubKeyY })\n        }\n        log.debug('> torus.js/retrieveShares', { privKey: privateKey.toString(16), metadataNonce: metadataNonce.toString(16) })\n\n        privateKey = privateKey.add(metadataNonce).umod(this.ec.curve.n)\n\n        const ethAddress = this.generateAddressFromPrivKey(privateKey)\n        log.debug('> torus.js/retrieveShares', { ethAddress, privKey: privateKey.toString(16) })\n\n        // return reconstructed private key and ethereum address\n        return {\n          ethAddress,\n          privKey: privateKey.toString('hex', 64),\n          metadataNonce,\n        }\n      })\n  }\n\n  async getMetadata(data, options) {\n    try {\n      const metadataResponse = await post(`${this.metadataHost}/get`, data, options, { useAPIKey: true })\n      if (!metadataResponse || !metadataResponse.message) {\n        return new BN(0)\n      }\n      return new BN(metadataResponse.message, 16) // nonce\n    } catch (error) {\n      log.error('get metadata error', error)\n      return new BN(0)\n    }\n  }\n\n  generateMetadataParams(message, privateKey) {\n    const key = this.ec.keyFromPrivate(privateKey.toString('hex', 64))\n    const setData = {\n      data: message,\n      timestamp: new BN(~~(this.serverTimeOffset + Date.now() / 1000)).toString(16),\n    }\n    const sig = key.sign(keccak256(stringify(setData)).slice(2))\n    return {\n      pub_key_X: key.getPublic().getX().toString('hex'),\n      pub_key_Y: key.getPublic().getY().toString('hex'),\n      set_data: setData,\n      signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new BN(sig.v).toString(16, 2), 'hex').toString('base64'),\n    }\n  }\n\n  async setMetadata(data, options) {\n    try {\n      const metadataResponse = await post(`${this.metadataHost}/set`, data, options, { useAPIKey: true })\n      return metadataResponse.message // IPFS hash\n    } catch (error) {\n      log.error('set metadata error', error)\n      return ''\n    }\n  }\n\n  lagrangeInterpolation(shares, nodeIndex) {\n    if (shares.length !== nodeIndex.length) {\n      return null\n    }\n    let secret = new BN(0)\n    for (let i = 0; i < shares.length; i += 1) {\n      let upper = new BN(1)\n      let lower = new BN(1)\n      for (let j = 0; j < shares.length; j += 1) {\n        if (i !== j) {\n          upper = upper.mul(nodeIndex[j].neg())\n          upper = upper.umod(this.ec.curve.n)\n          let temp = nodeIndex[i].sub(nodeIndex[j])\n          temp = temp.umod(this.ec.curve.n)\n          lower = lower.mul(temp).umod(this.ec.curve.n)\n        }\n      }\n      let delta = upper.mul(lower.invm(this.ec.curve.n)).umod(this.ec.curve.n)\n      delta = delta.mul(shares[i]).umod(this.ec.curve.n)\n      secret = secret.add(delta)\n    }\n    return secret.umod(this.ec.curve.n)\n  }\n\n  generateAddressFromPrivKey(privateKey) {\n    const key = this.ec.keyFromPrivate(privateKey.toString('hex', 64), 'hex')\n    const publicKey = key.getPublic().encode('hex').slice(2)\n    const ethAddressLower = `0x${keccak256(Buffer.from(publicKey, 'hex')).slice(64 - 38)}`\n    return toChecksumAddress(ethAddressLower)\n  }\n\n  generateAddressFromPubKey(publicKeyX, publicKeyY) {\n    const key = this.ec.keyFromPublic({ x: publicKeyX.toString('hex', 64), y: publicKeyY.toString('hex', 64) })\n    const publicKey = key.getPublic().encode('hex').slice(2)\n    const ethAddressLower = `0x${keccak256(Buffer.from(publicKey, 'hex')).slice(64 - 38)}`\n    return toChecksumAddress(ethAddressLower)\n  }\n\n  /**\n   * Note: use this function only with custom auth, don't use to lookup openlogin accounts.\n   */\n  async getPublicAddress(endpoints, torusNodePubs, { verifier, verifierId }, isExtended = false) {\n    log.debug('> torus.js/getPublicAddress', { endpoints, torusNodePubs, verifier, verifierId, isExtended })\n\n    let finalKeyResult\n    let isNewKey = false\n\n    const { keyResult, errorResult } = (await keyLookup(endpoints, verifier, verifierId)) || {}\n    if (errorResult && JSON.stringify(errorResult).includes('Verifier not supported')) {\n      // change error msg\n      throw new Error(`Verifier not supported. Check if you: \\n\n      1. Are on the right network (Torus testnet/mainnet) \\n\n      2. Have setup a verifier on dashboard.web3auth.io?`)\n    } else if (errorResult && JSON.stringify(errorResult).includes('Verifier + VerifierID has not yet been assigned')) {\n      await keyAssign({\n        endpoints,\n        torusNodePubs,\n        lastPoint: undefined,\n        firstPoint: undefined,\n        verifier,\n        verifierId,\n        signerHost: this.signerHost,\n        network: this.network,\n      })\n      const assignResult = (await waitKeyLookup(endpoints, verifier, verifierId, 1000)) || {}\n      finalKeyResult = assignResult.keyResult\n      isNewKey = true\n    } else if (keyResult) {\n      finalKeyResult = keyResult\n    } else {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`)\n    }\n    log.debug('> torus.js/getPublicAddress', { finalKeyResult, isNewKey })\n\n    if (finalKeyResult) {\n      let { pub_key_X: X, pub_key_Y: Y } = finalKeyResult.keys[0]\n      let typeOfUser\n      let nonce\n      let pubNonce\n      let modifiedPubKey\n      if (this.enableOneKey) {\n        let upgraded\n        try {\n          ;({ typeOfUser, nonce, pubNonce, upgraded } = await this.getOrSetNonce(X, Y, undefined, !isNewKey))\n          nonce = new BN(nonce || '0', 16)\n        } catch {\n          throw new GetOrSetNonceError()\n        }\n        if (typeOfUser === 'v1') {\n          modifiedPubKey = this.ec\n            .keyFromPublic({ x: X.toString(16), y: Y.toString(16) })\n            .getPublic()\n            .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic())\n        } else if (typeOfUser === 'v2') {\n          if (upgraded) {\n            // OneKey is upgraded to 2/n, returned address is address of Torus key (postbox key), not tKey\n            modifiedPubKey = this.ec.keyFromPublic({ x: X.toString(16), y: Y.toString(16) }).getPublic()\n          } else {\n            modifiedPubKey = this.ec\n              .keyFromPublic({ x: X.toString(16), y: Y.toString(16) })\n              .getPublic()\n              .add(this.ec.keyFromPublic({ x: pubNonce.x, y: pubNonce.y }).getPublic())\n          }\n        } else {\n          throw new Error('getOrSetNonce should always return typeOfUser.')\n        }\n      } else {\n        typeOfUser = 'v1'\n        nonce = await this.getMetadata({ pub_key_X: X, pub_key_Y: Y })\n        modifiedPubKey = this.ec\n          .keyFromPublic({ x: X.toString(16), y: Y.toString(16) })\n          .getPublic()\n          .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic())\n      }\n\n      X = modifiedPubKey.getX().toString(16)\n      Y = modifiedPubKey.getY().toString(16)\n\n      const address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY())\n      log.debug('> torus.js/getPublicAddress', { X, Y, address, typeOfUser, nonce: nonce?.toString(16), pubNonce })\n\n      if (!isExtended) return address\n      return {\n        typeOfUser,\n        address,\n        X,\n        Y,\n        metadataNonce: nonce,\n        pubNonce,\n      }\n    }\n    throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`)\n  }\n\n  /**\n   * Internal functions for OneKey (OpenLogin v2), only call these functions if you know what you're doing\n   */\n\n  static isGetOrSetNonceError(err) {\n    return err instanceof GetOrSetNonceError\n  }\n\n  async getOrSetNonce(X, Y, privKey, getOnly = false) {\n    let data\n    const msg = getOnly ? 'getNonce' : 'getOrSetNonce'\n    if (privKey) {\n      data = this.generateMetadataParams(msg, privKey)\n    } else {\n      data = {\n        pub_key_X: X,\n        pub_key_Y: Y,\n        set_data: { data: msg },\n      }\n    }\n    return post(`${this.metadataHost}/get_or_set_nonce`, data, undefined, { useAPIKey: true })\n  }\n\n  async getNonce(X, Y, privKey) {\n    return this.getOrSetNonce(X, Y, privKey, true)\n  }\n\n  getPostboxKeyFrom1OutOf1(privKey, nonce) {\n    const privKeyBN = new BN(privKey, 16)\n    const nonceBN = new BN(nonce, 16)\n    return privKeyBN.sub(nonceBN).umod(this.ec.curve.n).toString('hex')\n  }\n}\n\nexport default Torus\n"],"names":["log","loglevel","getLogger","disableAll","capitalizeFirstLetter","str","charAt","toUpperCase","slice","SomeError","errors","responses","predicate","Error","Some","promises","Promise","resolve","reject","finishedCount","sharedState","resolved","errorArr","Array","length","fill","undefined","resultArr","predicateError","forEach","x","index","then","resp","catch","error","finally","data","_","Object","values","reduce","acc","z","id","startsWith","msg","map","it","join","message","GetOrSetNonceError","kCombinations","s","k","set","from","i","cur","combs","tailCombs","j","push","thresholdSame","arr","t","hashMap","JsonStringify","keyLookup","endpoints","verifier","verifierId","lookupPromises","post","generateJsonRPCObject","verifier_id","toString","err","lookupResults","lookupShares","filter","x1","errorResult","x2","keyResult","x3","result","JSON","stringify","waitKeyLookup","timeout","setTimeout","keyAssign","torusNodePubs","lastPoint","firstPoint","signerHost","network","nodeNum","Math","floor","random","initialPoint","headers","pubKeyX","X","pubKeyY","Y","useAPIKey","signedData","acceptedErrorMsgs","includes","Torus","enableOneKey","metadataHost","allowHost","serverTimeOffset","ec","EC","doesKeyAssign","isNewKey","assignResult","finalKeyResult","keys","pub_key_X","pub_key_Y","getOrSetNonce","typeOfUser","nonce","pubNonce","upgraded","BN","modifiedPubKey","keyFromPublic","y","getPublic","add","keyFromPrivate","finalX","getX","finalY","getY","address","generateAddressFromPubKey","privKeyHex","metadataNonce","torusKeyHex","customKeyHex","torusKey","privKey","sub","umod","curve","n","customKey","newMetadataNonce","generateMetadataParams","setMetadata","indexes","verifierParams","idToken","extraParams","promiseArr","get","tmpKey","generatePrivate","pubKey","tokenCommitment","keccak256","p","messageprefix","tokencommitment","temppubx","temppuby","verifieridentifier","completedRequests","promiseArrRequest","nodeSigs","encrypted","item","idtoken","nodesignatures","shareResponses","thresholdPublicKey","PublicKey","sharePromises","nodeIndex","sort","a","b","Index","cmp","Metadata","metadata","ephemPublicKey","Buffer","iv","mac","mode","decrypt","ciphertext","atob","Share","padStart","debug","all","sharesResolved","decryptedShares","curr","value","allCombis","currentCombi","currentCombiShares","v","shares","indices","derivedPrivateKey","lagrangeInterpolation","decryptedPubKey","decryptedPubKeyX","decryptedPubKeyY","privateKey","returnedKey","getNonce","getMetadata","ethAddress","generateAddressFromPrivKey","options","metadataResponse","key","setData","timestamp","Date","now","sig","sign","set_data","signature","r","secret","upper","lower","mul","neg","temp","delta","invm","publicKey","encode","ethAddressLower","toChecksumAddress","publicKeyX","publicKeyY","isExtended","getOnly","privKeyBN","nonceBN","enableAll","apiKey","setAPIKey","embedHost","setEmbedHost"],"mappings":"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"}